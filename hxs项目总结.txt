

## 为什么要用DTO传输

前台在与后台交互中,为了处理前台需要的某些额外功能,所添加的临时字段,我们就把需要处理的字段放在DTO里面,

Entity只放数据库中的字段,这样有利于维护

## 为什么要用Result设置数据类型

# 上传操作

 图片上传

图片上传说白了就是文件上传

有可能每个服务都会有涉及到文件上传的操作

所以我们把文件上传抽出来作为一个公共的文件上传服务

##### upload.vue 88&89

```js
//文件长传成功后回显后台返回的图片
this.dialogImageUrl = file.response.data;
//给input表单赋值-->提交表单
this.$emit("input", file.response.data)
```

##### MrBrandForm.vue

```js
<template>
  <div>
    <v-card-text>
      <v-form v-model="valid" ref="form">
        <v-text-field
          v-model="brand.name"
          label="品牌名称"
          :rules="nameRules"
          required
        ></v-text-field>

        <v-cascader
          url="/category/list"
          required
          v-model="brand.categories"
          multiple
          label="商品分类"
        />

        <v-layout row>
          <v-flex xs3>
            <span style="font-size: 16px; color: #444">品牌LOGO：</span>
          </v-flex>
          <v-flex>
            <v-upload
              v-model="brand.image"
              url="/upload"
              :multiple="false"
              :pic-width="250"
              :pic-height="90"
            />
          </v-flex>
        </v-layout>
      </v-form>
    </v-card-text>

    <v-divider></v-divider>

    <v-card-actions>
      <v-spacer></v-spacer>
      <v-btn small @click="cancel()">取消</v-btn>
      <v-btn small color="primary" @click="submitForm()">确认</v-btn>
    </v-card-actions>
  </div>
</template>
<script>
export default {
  name: "MrBrandForm",
  props: {
    dialog: Boolean,
    brandDetail:Object,
    isEdit:Boolean
  },
  watch: {
    dialog(val) {
      delete this.brand.id;
      if (val) this.$refs.form.reset();
    },
    brandDetail (val) {
      //控制是新增还是修改发生的数据变化
      if(this.isEdit){
        //回显数据
        this.$http.get('/category/brand',{
          params:{
            brandId:val.id
          }
        }).then(resp => {
          let brand = val;
          brand.categories = resp.data.data;
          this.brand = brand;
        }).catch(error => console.log(error));

      }
    },
    
  },
  data() {
    //在js中 null == false , '' == false , undefined == false , 0 == false
    return {
      valid: true,
      nameRules: [
        (v) => !!v || "品牌名称不能为空",
        (v) => (v && v.length <= 10) || "品牌名称最多10个长度",
      ],
      brand: {
        name: "",
        image:'',
        categories: [],
      },
    };
  },
  methods: {
    cancel() {
      this.$emit("closeDialog");
    },
    submitForm() {
      if (!this.$refs.form.validate()) {
        return;
      }
      let formData = this.brand;
      let categoryIdArr = this.brand.categories.map((category) => category.id);
      formData.categories = categoryIdArr.join();

      //$.ajax() 和 $.get() | $.post()方法的区别?
      this.$http({
        url:'/brand/save',
        method:this.isEdit ? 'put' : 'post',
        data:formData
      }).then((resp) => {
          if (resp.data.code != 200) {
            return;
          }
          //关闭模态框
          this.cancel();
          //刷新表单

        })
        .catch((error) => console.log(error));
    },
  },
};
</script>
```

#####  在mingrui-shop-basics下新建mingrui-shop-basic-upload-server

pom.xml

```java
			<!-- SpringBoot-整合Web组件 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>com.baidu</groupId>
                <artifactId>mingrui-shopcommon-core</artifactId>
                <version>1.0-SNAPSHOT</version>
            </dependency>
```

##### application.yml

```java
server:
  port: 8200
spring:
  application:
    name: upload-server
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
mingrui:
  upload:
    path:
      windows: D:\\images
      linux: /hxs/images
    img:
      host: http://81.70.218.5/
```

##### RunUploadServerApplication	启动类

```java
package com.baidu;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

/**
 * @ClassName RunUploadServerApplication
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2020/12/29
 * @Version V1.0
 **/
@SpringBootApplication
@EnableEurekaClient
public class RunUploadServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(RunUploadServerApplication.class);
    }
}
```

##### 新建包com.baidu.shop.upload.controller	在包下新建UploadController

```java
package com.baidu.shop.upload.controller;

import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.status.HTTPStatus;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.UUID;


/**
 * @ClassName UploadController
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2020/12/29
 * @Version V1.0
 **/
@RestController
@CrossOrigin(origins = "http://manage.mrshop.com")
@RequestMapping(value = "upload")
public class UploadController extends BaseApiService{
    //linux系统的上传目录
    @Value(value = "${mingrui.upload.path.windows}")
    private String windowsPath;

    //window系统的上传目录
    @Value(value = "${mingrui.upload.path.linux}")
    private String linuxPath;

    @Value(value = "${mingrui.upload.img.host}")
    private String imageHost;

    @PostMapping
    public Result<String> uploadImg(@RequestParam MultipartFile file) {

        if(file.isEmpty()) return this.setResultError("上传的文件为空");//判断上传的文件是否为空

        String filename = file.getOriginalFilename();//获取文件名

        //String path = "";
        String os = System.getProperty("os.name").toLowerCase();
        String path = os.indexOf("win") != -1 ? windowsPath : os.indexOf("lin") != -1 ? linuxPath : "";
//        if(os.indexOf("win") != -1){
//            path = windowsPath;
//        }else if(os.indexOf("lin") != -1){
//            path = linuxPath;
//        }

        //UUID.randomUUID() + 1.jpg UUID.randomUUID() + 1.jpg
        filename = UUID.randomUUID() + filename;//防止文件名重复

        //创建文件 路径+分隔符(linux和window的目录分隔符不一样)+文件名
        File dest = new File(path + File.separator + filename);

        //判断文件夹是否存在,不存在的话就创建
        if(!dest.getParentFile().exists()) dest.getParentFile().mkdirs();

        try {
            file.transferTo(dest);//上传
        } catch (IllegalStateException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return this.setResult(HTTPStatus.OK,"upload success!!!",imageHost + "/" + filename);//将文件名返回页面用于页面回显
    }
}
```

##### 新建包:com.baidu.global	GlobalCorsConfig	用来处理跨域

也可以在Controller加上注解@CrossOrigin(origins = "http://manage.mrshop.com")

```java
package com.baidu.global;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

/**
 * @ClassName GlobalCorsConfig
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2020/12/29
 * @Version V1.0
 **/
@Configuration
public class GlobalCorsConfig {
    @Bean
    public CorsFilter corsFilter() {
        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        final CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true); // 允许cookies跨域
        config.addAllowedOrigin("*");// 允许向该服务器提交请求的URI，*表示全部允许。。这里尽量限制来源域，比如http://xxxx:8080 ,以降低安全风险。。
        config.addAllowedHeader("*");// 允许访问的头信息,*表示全部
        config.setMaxAge(18000L);// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
        config.addAllowedMethod("*");// 允许提交请求的方法，*表示全部允许，也可以单独设置GET、PUT等
        config.addAllowedMethod("HEAD");
        config.addAllowedMethod("GET");// 允许Get的请求方法
        config.addAllowedMethod("PUT");
        config.addAllowedMethod("POST");
        config.addAllowedMethod("DELETE");
        config.addAllowedMethod("PATCH");
        source.registerCorsConfiguration("/**", config);
        //3.返回新的CorsFilter.
        return new CorsFilter(source);
    }
}

```

##### 使用postman测试上传

![image-20210106080821154](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106080821154.png)

#### 为什么需要在将图片放在本地目录?

如果将图片放在项目目录的话,前台对项目的访问量就会非常的大,造成了没有必要的服务器压力

####  将图片放在本地目录浏览器还可以访问吗?

不可以

#### 我们将利用nginx来做代理服务,代理本地目录

##### hosts文件中新增

```
127.0.0.1 image.mrshop.com
```

##### nginx-home/conf/nginx.conf新增

```
	server {
		listen 80;
		server_name image.mrshop.com;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		location ~ .*\.(gif|jpg|pdf|jpeg|png)$
		{
	
		root D:\images;
		}
		location / {
		root html;
		index index.html index.htm;
		}
	}
```

##### 重启nginx

```
nginx.exe -s reload
```

##### 浏览器输入返回的参数进行测试

#####  启动vue项目测试能否成功

不能成功,还是请求了网关,网关会吧api-xxx的请求转发到service-xxx的服务中,而service-xxx并没有 upload服务

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106081544737.png" alt="image-20210106081544737" style="zoom:50%;" />

所以我想只要包含/upload请求的我都不进行路由

##### zuul的application.yml

```java
zuul:
  # 声明路由
  routes:
    # 路由名称
    api-xxx:
      # 声明将所有以/api-ribbon/的请求都转发到eureka-ribbon的服务中
      path: /api-xxx/**
      serviceId: xxx-server
  # 启用重试
  retryable: true
  # 包含此路径的不进行路由
  ignored-patterns: /upload/**
  # 忽略上传服务
  ignored-services:
     -upload-server
```

重启zuul服务测试,还是不行,为什么?因为这个配置没有从根本上去解决问题,虽然忽略了/upload的请求,但是/上传的请求中依然包含/api-xxx

所以我们需要借助nginx来帮助我们做一些事:

只要包含/api-xxx/upload的请求都将/api-xxx去掉,

为什么是在nginx里面处理?

因为浏览器发起请求的时候第一个经过nginx服务

##### 在nginx-home/conf/nginx.conf 添加api.mrshop.com的代理配置

```
	server {
			listen 80;
			server_name api.mrshop.com;
			
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-Server $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			
			location / {
			proxy_pass http://127.0.0.1:8088;
			proxy_connect_timeout 600;
			proxy_read_timeout 600;
			}
			
			# 上传路径的映射
			# 只要包含/api-xxx/upload 都会把请求映射到8200服务
			# rewrite "^/api-xxx/(.*)$" /$1 break;
			# 将/api-xxx 替换成/
			location /api-xxx/upload {
				proxy_pass http://127.0.0.1:8200;
				proxy_connect_timeout 600;
				proxy_read_timeout 600;
				rewrite "^/api-xxx/(.*)$" /$1 break;
			}

		}
```

##### 重启nginx

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106081805192.png" alt="image-20210106081805192" style="zoom:80%;" />





# 使用FastDFS做上传



## 1.centos下安装fastDFS

解压fastDFS压缩包.得到压缩文件

![image-20210105111448801](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105111448801.png)

在linux系统中自己的目录下新建fastDFS目录

```
mkdir fastDFS
```

![image-20210105111524817](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105111524817.png)

进入fastDFS目录

```
cd fastDFS/
```

将刚刚解压得到的压缩包全部上传到此文件内

![image-20210105111739848](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105111739848.png)

## 2.安装C/C++ 编译环境

```
yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake
```

## 3.安装libevent

```
yum -y install libevent
```

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105112140134.png" alt="image-20210105112140134" style="zoom:80%;" />

## 4.安装 libfastcommon

```
tar -xvf libfastcommon-master.tar #解压压缩包
cd libfastcommon-master/ #进入目录
./make.sh #编译
```

![image-20210105112259923](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105112259923.png)

```
./make.sh install #安装
cp /usr/lib64/libfastcommon.so /usr/lib #复制镜像
```

![image-20210105112427631](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105112427631.png)

## 5.安装FastDFS

```
cd .. #进入fastDFS目录
tar -zxvf FastDFS_v5.08.tar.gz #解压压缩包
cd FastDFS/ #进入目录
./make.sh #编译
./make.sh install #安装
```

## 6.启动tracker

```
cd /etc/fdfs #进入fastDFS配置目录
cp tracker.conf.sample tracker.conf #复制文件
vi tracker.conf #编辑刚刚复制的配置文件
```

修改配置

```
base_path=/shop/fdfs/tracker
```

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105112902603.png" alt="image-20210105112902603" style="zoom:80%;" />

保存退出

Esc --> :wq

创建刚刚设置的目录

```
mkdir -p /shop/fdfs/tracker
```

启动tracker

```
service fdfs_trackerd start #停止换成stop
```

![image-20210105113156647](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113156647.png)

## 7.启动storage

```
cp storage.conf.sample storage.conf
vi storage.conf
```

修改配置

```
base_path=/shop/fdfs/storage
store_path0=/shop/fdfs/storage
tracker_server=本机ip地址:22122 #注意不能写localhost,需要写ip地址
```

![image-20210105113458335](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113458335.png)

![image-20210105113557791](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113557791.png)

![image-20210105113703016](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113703016.png)

保存退出

Esc --> :wq

创建刚刚设置的目录

```
mkdir -p /shop/fdfs/storage
```

启动storage

```
service fdfs_storaged start
```

![image-20210105113812168](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113812168.png)

查看进程

```
ps -ef | grep fdfs
```

![image-20210105113851912](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105113851912.png)

## 8.安装FastDFS的Nginx模块

进入压缩包所在的目录

![image-20210105114011065](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114011065.png)

```
tar -zxvf fastdfs-nginx-module_v1.16.tar.gz #解压压缩包
cd fastdfs-nginx-module/src/ #进入目录
vi config
//直接输入下面的命令,注意冒号需要手敲
: --> %s+/usr/local/+/usr/+g --> enter --> esc --> :wq --> enter
```

保存退出	Esc --> :wq

```
cp mod_fastdfs.conf /etc/fdfs/ #复制文件
vi /etc/fdfs/mod_fastdfs.conf
```

修改默认配置

```
connect_timeout=10
tracker_server=本机ip地址:22122 #不能写localhost
url_have_group_name = true
store_path0=/shop/fdfs/storage
```

![image-20210105114419782](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114419782.png)

![image-20210105114515063](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114515063.png)

![image-20210105114645529](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114645529.png)

![image-20210105114633591](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114633591.png)

退出保存 Esc --> :wq

进入FastDFS/conf目录

![image-20210105114835313](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114835313.png)

```
cp http.conf mime.types /etc/fdfs/ #复制文件
```

## 9.安装Nginx

进入压缩包所在的目录

![image-20210105114924805](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105114924805.png)

```
tar -zxvf nginx-1.10.0.tar.gz #解压压缩包
yum -y install make zlib-devel libtool openssl openssl-devel #安装依赖
cd nginx-1.10.0/
./configure --prefix=/opt/nginx --sbin-path=/usr/bin/nginx --add-module=/hxs/fastDFS/fastdfs-nginx-module/src
```

注意:

--prefix= --> nginx配置文件所在目录

--sbin-path= --> 执行程序文件所在目录

--add-module= -->外部模块路径，启用对外部模块的支持 这个路径一定不能配置错,就写你自己 fastdfs-nginx-module的目录即可

```
make && make install #编译并安装
```

![image-20210105115744966](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105115744966.png)

编辑nginx的配置文件

```
vi /opt/nginx/conf/nginx.conf
```

erver的配置

```
listen 80;
    server_name localhost:8888;#storage的端口号
    # 监听域名中带有group的，交给FastDFS模块处理
    location ~/group([0-9])/ {
    	ngx_fastdfs_module;
    }

```

保存退出 Esc --> :wq

```
cd /opt/nginx #nginx主目录
```

![image-20210105120219304](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105120219304.png)

启动nginx

```
nginx
nginx -s stop #停止
nginx -s reload #重新加载配置
```

![image-20210105120300980](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105120300980.png)

需要启动三个

```
在FastDFS下执行
service fdfs_trackerd start
service fdfs_storaged start
在/opt/nginx/执行
nginx
ps -ef | grep java
```

浏览器访问ip地址

![image-20210105120345102](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105120345102.png)

##### 安装成功后

# java上传文件到fastDFS服务

##### pom.xml

```java
<dependency>
    <groupId>com.github.tobato</groupId>
    <artifactId>fastdfs-client</artifactId>
    <version>1.26.1-RELEASE</version>
</dependency>
```

#####  application.yml

```java
fdfs:
  so-timeout: 1501
  connect-timeout: 601
  thumb-image: # 缩略图
    width: 60
    height: 60
  tracker-list: # tracker地址
    - 81.70.218.5:22122
mingrui:
  upload:
    path:
      windows: D:\\images
      linux: /hxs/images
    img:
      host: http://81.70.218.5/
```

#####  config包下新建配置类FastClientImporter

```java
package com.baidu.config;

import com.github.tobato.fastdfs.FdfsClientConfig;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableMBeanExport;
import org.springframework.context.annotation.Import;
import org.springframework.jmx.support.RegistrationPolicy;

/**
 * @ClassName FastClientImporter
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
@Configuration
@Import(FdfsClientConfig.class)
@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)
public class FastClientImporter {
}
```



##### 上传文件controller

```java
package com.baidu.shop.upload.controller;

import com.baidu.shop.base.Result;
import com.baidu.shop.status.HTTPStatus;
import com.github.tobato.fastdfs.domain.StorePath;
import com.github.tobato.fastdfs.domain.ThumbImageConfig;
import com.github.tobato.fastdfs.service.FastFileStorageClient;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.io.InputStream;

/**
 * @ClassName FastDFSUploadController
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
@RestController
@RequestMapping(value = "upload")
@Slf4j
public class FastDFSUploadController {
    //图片服务器的地址
    @Value(value = "${mingrui.upload.img.host}")
    private String imgHost;
    @Autowired
    private FastFileStorageClient storageClient;
    @Autowired
    private ThumbImageConfig thumbImageConfig;
    @PostMapping
    public Result<String> uploadImg(@RequestParam MultipartFile file) throws IOException {
        InputStream inputStream = file.getInputStream();//获取文件输入流
        String filename = file.getOriginalFilename();//文件名
        String ex = filename.substring(filename.lastIndexOf(".") + 1);//文件后缀名
        // 上传并且生成缩略图
        StorePath storePath = this.storageClient.uploadImageAndCrtThumbImage(inputStream, file.getSize(), ex, null);//上传
        // 带分组的路径
        log.info("上传图片全路径:{}", storePath.getFullPath());
        // 不带分组的路径
        log.info("上传图片路径:{}", storePath.getPath());
        // 获取缩略图路径
        String path = thumbImageConfig.getThumbImagePath(storePath.getFullPath());
        log.info("缩略图路径:{}", path);
        return new Result<String>(HTTPStatus.OK,"上传成功",imgHost + path);
    }
}
```

##### postman测试上传图片

# Category的增删改查

## 查询

CategoryEntity

```java
package com.baidu.shop.entity;

import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.io.Serializable;

/**
 * @ClassName CategoryEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2020/12/22
 * @Version V1.0
 **/
@ApiModel(value = "分类实体类")
@Data
@Table(name = "tb_category")
public class CategoryEntity {

    @Id
    @ApiModelProperty(value = "类目id",example = "1")
    @NotNull(message = "id不能为空",groups = {MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "类目名称")
    @NotEmpty(message = "name不能为空",groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private String name;

    @ApiModelProperty(value = "父类目id,顶级类目填0",example = "1")
    @NotNull(message = "父类id不能为空",groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private Integer parentId;

    @ApiModelProperty(value = "是否为父节点,0为否,1为是",example = "1")
    @NotNull(message = "状态不能为空",groups = {MingruiOperation.Add.class})
    private Integer isParent;

    @ApiModelProperty(value = "排序指数,越小越靠前",example = "1")
    @NotNull(message = "排序值不能为空",groups = {MingruiOperation.Add.class})
    private Integer sort;
}
```

CategoryService

```java
	ApiOperation(value = "通过查询商品分类")
    @GetMapping(value = "category/list")
    Result<List<CategoryEntity>> getCategoryByPid(Integer pid);
```

类别管理的查询出来是有前台进行处理的不需要后台分页

前台树状图默认传parentId为0是从父类查询 也就是查询全部

用list接收数据,用this.setResultSuccess(list);传给前台

```java
@Override//查询
    public Result<List<CategoryEntity>> getCategoryByPid(Integer pid) {
        CategoryEntity categoryEntity = new CategoryEntity();
        categoryEntity.setParentId(pid);
        List<CategoryEntity>list = categoryMapper.select(categoryEntity);
        return this.setResultSuccess(list);//调用返回成功方法,传list
    }
```



## 新增

CategoryService

```java
    @ApiOperation(value = "新增")
    @PostMapping(value = "category/save")
    Result<Object>saveCategory(@RequestBody CategoryEntity categoryEntity);
```

Category查询出来是树状图的,有父子叶结构,要在某个节点下添加一个子节点,那么改节点必须是父节点状态( Is_Parent字段控制着节点状态,1为父节点状态,0为子节点状态也就是在它下面没有叶节点 )

所以第一步就是把改数据的IsParent设置为1

前台点击新增会传来一个 name="新的节点"	parentId为点击创建节点id 的一个数据

new一个新的对象,把id设置为parentId,isParent设置为1,进行父类状态的修改

然后新增数据传来的数据

![image-20201231112525275](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20201231112525275.png)

```java
    @Transactional//事务
    @Override//新增
    public Result<Object> saveCategory(CategoryEntity categoryEntity) {
//        if (categoryEntity.getIsParent() != 1){
//            CategoryEntity cate = new CategoryEntity();
//            cate.setIsParent(1);
//            categoryMapper.updateByPrimaryKeySelective(cate);
//        }

        CategoryEntity cate = new CategoryEntity();
        cate.setId(categoryEntity.getParentId());
        cate.setIsParent(1);
        categoryMapper.updateByPrimaryKeySelective(cate);

        categoryMapper.insertSelective(categoryEntity);
        return this.setResultSuccess();//调用返回成功方法,不用传参数
    }
```

## 修改

CategoryService

```java
    @ApiOperation(value = "修改")
    @PutMapping(value = "category/edit")
    Result<Object>editCategory(@RequestBody CategoryEntity categoryEntity);
```

Category的修改没有涉及到过多的其他因素,只需要修改本身就可以

```java
    @Transactional
    @Override//修改
    public Result<Object> editCategory(CategoryEntity categoryEntity) {
        categoryMapper.updateByPrimaryKeySelective(categoryEntity);
        return this.setResultSuccess();//调用返回成功方法,不用传参数
    }
```

## 删除

CategoryService

```java
    @ApiOperation(value = "删除")
    @DeleteMapping(value = "category/del")
    Result<Object>deleteById(Integer id);
```

Category的删除

1.判断接收id是否合法,id不能为0,因为Category表id没有0,更不能小于0,id不能为null,调用返回错误信息方法

2.考虑到一个问题,如果你现在删除的是某个父节点的最后一个子节点,那么这个子节点的父节点的状态应该调整为子节点状态也就是IsParent要修改为0

所以要根据接收的id查询一条完整的数据!!

3.查询出一条数据用对象接收,判断改对象是否存在,如果不存在调用返回错误信息方法

4.再判断对象的IsParent是否为1,为1是父节点,不能被直接删除,所以调用返回错误信息方法

5.我们要查询出来跟他同级节点的数据,利用ParentId,用list集合接收

6.判断

如果list的长度<=1 满足条件就可以修改父类的状态了,因为长度=1的时候,最后这条数据就是要删除的自己

new一个对象,把IsParent设置为0,id设置为上面对象的ParentId,进行修改操作

7.删除传来的id的数据

```jva
    public Result<Object> deleteById(Integer id) {
        //判断前台传来的id是否合法
            if (null == id || id<= 0) return this.setResultError("id不合法");
        //根据id查询一条数据
        CategoryEntity categoryEntity = categoryMapper.selectByPrimaryKey(id);
        //判断查询一条数据是否存在
        if (null == categoryEntity) return  this.setResultError("数据不存在");
        //根据查询的数据的 判断isid是否为1 1为父节点不能删除
        if (categoryEntity.getIsParent() == 1) return this.setResultError("当前节点为父节点");

        Example example = new Example(categoryEntity.getClass());
        example.createCriteria().andEqualTo("parentId",categoryEntity.getParentId());
        List<CategoryEntity>categoryEntityList = categoryMapper.selectByExample(example);

        if (categoryEntityList.size() <= 1){
            CategoryEntity UpdateCategory = new CategoryEntity();
            UpdateCategory.setIsParent(0);
            UpdateCategory.setId(categoryEntity.getParentId());
            categoryMapper.updateByPrimaryKeySelective(UpdateCategory);
        }

        categoryMapper.deleteByPrimaryKey(id);
        return this.setResultSuccess();
    }
```

# Brand的增删改查

## 查询

### 前台

在item中新建Mrbrand.vue

```vue
<template>
  <v-card>
    <v-card-title>
      <v-btn color="info">新增</v-btn>
      <!-- 调按钮和输入框之间的间距 -->
      <v-spacer />
      <!--
            append-icon : 图标
            label : input默认值
        -->
      <v-text-field
        append-icon="search"
        label="品牌名称"
        @keyup.enter="getTableData()"
        v-model="search"
      ></v-text-field>
    </v-card-title>
    <!-- 表格组件 -->
        <!-- :pagination.sync="pagination" 绑定分页属性,并将分页参数绑定给data.pagination
        -->
        <!-- :total-items="total" 设置总条数,获取data.total中的值 -->
    <v-data-table
      :headers="headers"
      :items="desserts"
      :pagination.sync="pagination"
      :total-items="total"
      class="elevation-1"
    >
      <template slot="items" slot-scope="props">
        <td class="text-xs-center">{{ props.item.id }}</td>
        <td class="text-xs-center">{{ props.item.name }}</td>
        <td class="text-xs-center">
          <!-- src 是html标签的属性 :src="vue的属性" -->
          <img :src="props.item.image" />
        </td>
        <td class="text-xs-center">{{ props.item.letter }}</td>
      </template>
    </v-data-table>
  </v-card>
</template>
<script>
export default {
  name: "MrBrand",//组件的名称
  data() {
    return {
      pagination: {},//分页参数信息
      total: 0,//总条数,初始值为0
      search: "",
      headers: [
        {
          text: "id",
          align: "center",
          value: "id",
        },
        {
          text: "品牌名称",
          align: "center",
          value: "name",
        },
        {
          text: "品牌logo",
          align: "center",
          value: "image",
        },
        {
          text: "首字母",
          align: "center",
          value: "letter",
        },
      ],
      desserts: [],//数据
    };
  },
    //组件加载完毕后执行的方法
  mounted() {
    this.getTableData();//查询方法,刷新列表
  },
  methods: {
    getTableData() {
      this.$http
        .get("/brand/list", {
          //查询传递的参数
          params: {
            page: this.pagination.page,
            rows: this.pagination.rowsPerPage,
            sort: this.pagination.sortBy,
            order: this.pagination.descending,
            name: this.search
          },
        })
        .then((resp) => {
          //给数据属性赋值
          this.desserts = resp.data.data.list;
          //给总条数赋值
          this.total = resp.data.data.total;
        })
        .catch((error) => console.log(error));
    }
  },
  watch: {//监控属性
    pagination() {//监控分页属性的变化
      this.getTableData();//刷新列表
    }
  }
};
</script>
```

更改index.js 27行

```vue
route("/item/brand",'/item/MrBrand',"MrBrand"),
```

### 后台

core.pom

```java
		<!--帮助开发人员快速生成API文档-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
```

在base下创建BaseDTO

```java
package com.baidu.shop.base;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import org.springframework.util.StringUtils;

/**
 * @ClassName BaseDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/22
 * @Version V1.0
 **/
@Data
@ApiModel(value = "BaseDTO用于数据传输,其他dto需要继承此类")
public class BaseDTO {

    @ApiModelProperty(value = "当前页", example = "1")
    private Integer page;

    @ApiModelProperty(value = "每页显示多少条",example = "5")
    private Integer rows;

    @ApiModelProperty(value = "排序字段")
    private String sort;

    @ApiModelProperty(value = "是否升序")
    private String order;

    @ApiModelProperty(hidden = true)
    public String getOrderByClause() {
        if (!StringUtils.isEmpty(sort)) return sort + " " +
                order.replace("false", "asc").replace("true", "desc");
        return "";
    }
}
```

core.pom

```java
		<!--分页工具-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.10</version>
        </dependency>
            
        <dependency>
            <groupId>com.baidu</groupId>
            <artifactId>mingrui-shopservice-api-xxx</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
```

在com.baidu.shop下新建dto包

```java
package com.baidu.shop.dto;

import com.baidu.shop.base.BaseDTO;
import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

/**
 * @ClassName CategoryService
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/19
 * @Version V1.0
 **/
@ApiModel(value = "品牌DTO")
@Data
public class BrandDTO extends BaseDTO {
    @ApiModelProperty(value = "品牌主键",example = "1")
    @NotNull(message = "主键不能为空", groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "品牌名称")
    @NotEmpty(message = "品牌名称不能为空", groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private String name;

    @ApiModelProperty(value = "品牌logo")
    private String image;

    @ApiModelProperty(value = "商品首字母")
    private Character letter;

    @ApiModelProperty(value = "品牌分类信息")
    @NotEmpty(message = "品牌分类信息不能为空",groups = {MingruiOperation.Add.class})
    private String categories;
}
```

entity包下新建BrandEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @ClassName BrandEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/22
 * @Version V1.0
 **/
@Table(name = "tb_brand")
@Data
public class BrandEntity {

    @Id
    private Integer id;

    private String name;

    private String image;

    private Character letter;
}
```

在mapper包下新建BrandMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.BrandEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName BrandMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/22
 * @Version V1.0
 **/
public interface BrandMapper extends Mapper<BrandEntity> {
}
```

在impl包下新建BrandServiceImpl

然后在实现层方法里调用,完成分页

```java
//调用分页插件
//brandDTO中继承了baseDTO,page为当前页数,rows为每页显示多少条
PageHelper.startPage(brandDTO.getPage(),brandDTO.getRows());
```

给字段排序

```java
		//如果sort(排序字段)不为空
		if (!StringUtils.isEmpty(brandDTO.getSort())){
			//调用排序 orderBy里面参数控制了升序降序
            PageHelper.orderBy(brandDTO.getOrderBy());
        }
```

根据name模糊查询

```java
		//因为继承的Mapper的泛型是BrandEntity,所以要转一下
		BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO,BrandEntity.class);
        Example example = new Example(BrandEntity.class);
        example.createCriteria().andLike("name","%"+ brandEntity.getName() +"%");
```

```java
    @Override
    public Result<PageInfo<BrandEntity>> getBrandInfo(BrandDTO brandDTO) {
        //分页插件
        PageHelper.startPage(brandDTO.getPage(),brandDTO.getRows());

        if (!StringUtils.isEmpty(brandDTO.getSort())){
            PageHelper.orderBy(brandDTO.getOrderBy());
        }

        BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO,BrandEntity.class);

        Example example = new Example(BrandEntity.class);
        example.createCriteria().andLike("name","%"+ brandEntity.getName() +"%");
		
        List<BrandEntity> brandEntityList = brandMapper.selectByExample(example);
        //实例化pageInfo,把查询到的集合放到pageInfo里面,返回给vue
        PageInfo<BrandEntity> pageInfo = new PageInfo<>(brandEntityList);
        return this.setResultSuccess(pageInfo);
    }
```

## 新增

### 前台

新建MrBrandForm.vue

```vue
<template>
  <div>
    <v-card-text>
      <v-form v-model="valid" ref="form">
        <v-text-field
          v-model="brand.name"
          label="品牌名称"
          :rules="nameRules"
          required
        ></v-text-field>
		//查询分类信息
        <v-cascader
          url="/category/list"
          required
          v-model="brand.categories"
          multiple
          label="商品分类"
        />

        <v-layout row>
          <v-flex xs3>
            <span style="font-size: 16px; color: #444">品牌LOGO：</span>
          </v-flex>
          <v-flex>
            <v-upload
              v-model="brand.image"
              url="/upload"
              :multiple="false"
              :pic-width="250"
              :pic-height="90"
            />
          </v-flex>
        </v-layout>
      </v-form>
    </v-card-text>

    <v-divider></v-divider>

    <v-card-actions>
      <v-spacer></v-spacer>
      <v-btn small @click="cancel()">取消</v-btn>
      <v-btn small color="primary" @click="submitForm()">确认</v-btn>
    </v-card-actions>
  </div>
</template>
<script>
export default {
  name: "MrBrandForm",
  props: {
    dialog: Boolean,//模态框状态设置为boolean类型
  },
  watch: {
    dialog(val) {
      if (val) this.$refs.form.reset();
    },
  },
  data() {
    //在js中 null == false , '' == false , undefined == false , 0 == false
    return {
      valid: true,
      nameRules: [
        (v) => !!v || "品牌名称不能为空",
        (v) => (v && v.length <= 10) || "品牌名称最多10个长度",
      ],
      brand: {
        name: "",
        image:'',
        categories: [],
      },
    };
  },
  methods: {
    cancel() {
      this.$emit("closeDialog");
    },
    submitForm() {
      if (!this.$refs.form.validate()) {
        return;
      }
      let formData = this.brand;
      let categoryIdArr = this.brand.categories.map((category) => category.id);
      formData.categories = categoryIdArr.join();

      this.$http
        .post("/brand/save", formData)
        .then((resp) => {
          if (resp.data.code != 200) {
            return;
          }
          //关闭模态框
          this.cancel();
          //刷新表单
        })
        .catch((error) => console.log(error));
    },
  },
};
</script>
```

在MrBrand中添加新增属性

```vue
<template>
  <v-card>
    <v-card-title>
      <v-btn color="info" @click="dialog = true">新增</v-btn>//点击新增按钮打开模态框

      <div class="text-xs-center">
    <v-dialog
      v-model="dialog"
      width="500"
    >
      <v-card>
        <v-card-title
          class="headline grey lighten-2"
          primary-title
        >
          品牌新增
        </v-card-title>

        <mr-brand-form @closeDialog="dialog = false" :dialog="dialog"/>

      </v-card>
    </v-dialog>
  </div>

      <!-- 调按钮和输入框之间的间距 -->
      <v-spacer />

      <!--
            append-icon : 图标
            label : input默认值
        -->
      <v-text-field
        append-icon="search"
        label="品牌名称"
        @keyup.enter="getTableData()"
        v-model="search"
      ></v-text-field>
    </v-card-title>
    <!-- 表格组件 -->
    <v-data-table
      :headers="headers"
      :items="desserts"
      :pagination.sync="pagination"
      :total-items="total"
      class="elevation-1"
    >
      <template slot="items" slot-scope="props">
        <td class="text-xs-center">{{ props.item.id }}</td>
        <td class="text-xs-center">{{ props.item.name }}</td>
        <td class="text-xs-center">
          <!-- src 是html标签的属性 :src="vue的属性" -->
          <img :src="props.item.image" />
        </td>
        <td class="text-xs-center">{{ props.item.letter }}</td>
      </template>
    </v-data-table>
  </v-card>
</template>
<script>
import MrBrandForm from './MrBrandForm';
export default {
  name: "MrBrand",
  components:{
    MrBrandForm
  },
  data() {
    return {
      pagination: {},
      dialog: false,
      total: 0,
      search: "",
      headers: [
        {
          text: "id",
          align: "center",
          value: "id",
        },
        {
          text: "品牌名称",
          align: "center",
          value: "name",
        },
        {
          text: "品牌logo",
          align: "center",
          value: "image",
        },
        {
          text: "首字母",
          align: "center",
          value: "letter",
        },
      ],
      desserts: [],
    };
  },
  mounted() {
    this.getTableData();
  },
  methods: {
    getTableData() {

      this.$http
        .get("/brand/list", {
          params: {
            page: this.pagination.page,
            rows: this.pagination.rowsPerPage,
            sort: this.pagination.sortBy,
            order: this.pagination.descending,
            name: this.search
          },
        })
        .then((resp) => {
          this.desserts = resp.data.data.list;
          this.total = resp.data.data.total;
        })
        .catch((error) => console.log(error));
    }
  },
  watch: {
    pagination() {
      this.getTableData();
    }
  }
};
</script>
```

### 后台

新增时,需要有让 首字母 自动补上的操作

复制一个PinYInUtil工具包,设置letter(首字母),调用工具包中的getUpperCase方法

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210104221252695.png" alt="image-20210104221252695" style="zoom: 67%;" />

String.valueof 把对象转为String类型 (把name值传进去,把它转为字符串类型,截取[0],就是首字母) 就得到了一个string类型的首字母

再把这个首字母转成char类型,因为数据库是char类型

```java
brandEntity.setLetter(PinYinUtil.getUpperCase(String.valueOf(brandEntity.getName().toCharArray()[0]),false).toCharArray()[0]);
```

设置好数据的首字母后	完成新增

```java
brandMapper.insertSelective(brandEntity);
```

接下来要把商品分类信息新增到中间表 tb_category_brand 内,需要应对可能是多个分类信息进行处理

```java
    @Transactional//事务
    @Override
    public Result<JsonObject> saveBrandInfo(BrandDTO brandDTO) {
        //因为继承的Mapper的泛型是BrandEntity,所以要转一下
        BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO, BrandEntity.class);
        
        brandEntity.setLetter(PinYinUtil.getUpperCase(String.valueOf(brandEntity.getName().toCharArray()[0]),false).toCharArray()[0]);

        brandMapper.insertSelective(brandEntity);

       this.insertCategoryBrandList(brandDTO.getCategories(),brandEntity.getId());
        /*
        //获取传来商品信息
		String categories = brandDTO.getCategories();
		//判断传来的商品信息是否为空,为空返回Error
        if (StringUtils.isEmpty(brandDTO.getCategories()))return this.setResultError("");

        List<CategoryBrandEntity> categoryBrandEntities = new ArrayList<>();

		//如果包含","	表示有多个商品信息需要写入中间表
        if (categories.contains(",")){
            //以","分隔,放入String[]数组中
            String[] categoryArr = categories.split(",");

            //遍历数组
            for (String s : categoryArr){
                //实例化一个中间表实体类对象
                CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();

                //把传来的id设置成BrandId
                categoryBrandEntity.setBrandId(brandEntity.getId());
                //把需要绑定商品信息id设置成ategoryId
                categoryBrandEntity.setCategoryId(Integer.valueOf(s));
                //把对象add到list数组categoryBrandEntities中
                categoryBrandEntities.add(categoryBrandEntity);
            }
            //新增中间表数据
            cateoryBrandMapper.insertList(categoryBrandEntities);
        }else{
            CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();
            categoryBrandEntity.setBrandId(brandEntity.getId());
            categoryBrandEntity.setCategoryId(Integer.valueOf(categories));

            categoryBrandMapper.insert(categoryBrandEntity);
        }
        */
        return this.setResultSuccess();
    }
```

## 修改

```vue
<template>
  <v-card>
    <v-card-title>
      <v-btn color="info" @click="addData()">新增</v-btn>

      <div class="text-xs-center">
        <v-dialog v-model="dialog" width="500">
          <v-card>
            <v-card-title class="headline grey lighten-2" primary-title>
              品牌{{ isEdit?'修改':'新增' }}
            </v-card-title>

            <mr-brand-form @closeDialog="closeDialog" :dialog="dialog" :isEdit="isEdit" :brandDetail="brandDetail" />
          </v-card>
        </v-dialog>
      </div>

      <!-- 调按钮和输入框之间的间距 -->
      <v-spacer />

      <!--
            append-icon : 图标
            label : input默认值
        -->
      <v-text-field
        append-icon="search"
        label="品牌名称"
        @keyup.enter="getTableData()"
        v-model="search"
      ></v-text-field>
    </v-card-title>
    <!-- 表格组件 -->
    <v-data-table
      :headers="headers"
      :items="desserts"
      :pagination.sync="pagination"
      :total-items="total"
      class="elevation-1"
    >
      <template slot="items" slot-scope="props">
        <td class="text-xs-center">{{ props.item.id }}</td>
        <td class="text-xs-center">{{ props.item.name }}</td>
        <td class="text-xs-center">
          <!-- src 是html标签的属性 :src="vue的属性" -->
          <img width="100" :src="props.item.image" />
        </td>
        <td class="text-xs-center">{{ props.item.letter }}</td>
        <td class="text-xs-center">
          <v-btn flat icon color="green" @click="editData(props.item)">
            <v-icon>edit</v-icon>
          </v-btn>
          <v-btn flat icon color="red" @click="deleteBrand(props.item)">
            <v-icon>delete</v-icon>
          </v-btn>
        </td>
      </template>
    </v-data-table>
  </v-card>
</template>
<script>
import MrBrandForm from "./MrBrandForm";
export default {
  name: "MrBrand",
  components: {
    MrBrandForm,
  },
  data() {
    return {
      brandDetail:{},
      isEdit:false,
      pagination: {},
      dialog: false,
      total: 0,
      search: "",
      headers: [
        {
          text: "id",
          align: "center",
          value: "id",
        },
        {
          text: "品牌名称",
          align: "center",
          value: "name",
        },
        {
          text: "品牌logo",
          align: "center",
          value: "image",
        },
        {
          text: "首字母",
          align: "center",
          value: "letter",
        },
        {
          text: "操作",
          align: "center",
          sortable: false,
          value: "id",
        },
      ],
      desserts: [],
    };
  },
  mounted() {
    this.getTableData();
  },
  methods: {
    closeDialog () {
      this.dialog = false;
      this.getTableData();
    },
    addData () {
      //this.brandDetail = {};
      this.isEdit = false;
      this.dialog = true;
    },
    editData (obj) {
      this.brandDetail = obj;
      this.isEdit = true;
      this.dialog = true;
    },
    getTableData() {
      this.$http
        .get("/brand/list", {
          params: {
            page: this.pagination.page,
            rows: this.pagination.rowsPerPage,
            sort: this.pagination.sortBy,
            order: this.pagination.descending,
            name: this.search,
          },
        })
        .then((resp) => {
          this.desserts = resp.data.data.list;
          this.total = resp.data.data.total;
        })
        .catch((error) => console.log(error));
    },
    deleteBrand(item) {
        this.$message.confirm('此操作将永久删除该品牌, 是否继续?').then(() => {
          // 发起删除请求
          this.$http.delete("/brand/delete?id=" + item.id,)
            .then(() => {
              // 删除成功，重新加载数据
              this.$message.success("删除成功！");
              this.getTableData();
            })
        }).catch(() => {
          this.$message.info("删除已取消！");
        });

      },
  },
  watch: {
    pagination() {
      this.getTableData();
    },
  },
};
</script>
```



### 后台

```java
    @Transactional//事务
    @Override
    public Result<JsonObject> editBrandInfo(BrandDTO brandDTO) {
		
        //复制一下参数到BrandEntity
        BrandEntity brandEntity = BaiduBeanUtil.copyProperties(brandDTO, BrandEntity.class);
        //设置一下首字母
        brandEntity.setLetter(PinYinUtil.getUpperCase(String.valueOf(brandEntity.getName().toCharArray()[0]), false).toCharArray()[0]);
        //修改
        brandMapper.updateByPrimaryKeySelective(brandEntity);

        //根据id值 删除中间表中的关联数据
        this.deleteCategoryBrandId(brandEntity.getId());
        //新增中间表的关联数据
        this.insertCategoryBrandList(brandDTO.getCategories(),brandEntity.getId());
        return this.setResultSuccess();
    }

	//提取了删除代码							  品牌管理id
	private void deleteCategoryBrandId(Integer brandId){
        //要根据brandId删除中间表的数据,Example参数对象是中间表实体类
        Example example = new Example(CategoryBrandEntity.class);
        example.createCriteria().andEqualTo("brandId",brandId);
        categoryBrandMapper.deleteByExample(example);
    }

	//提取了新增中间表的方法						需要关联的商品分类id	   品牌管理id
    private void insertCategoryBrandList(String categories, Integer brandId){

        //因为提取方法中没有返回值 所以如果为空 抛出异常
        if (StringUtils.isEmpty(categories)) throw new RuntimeException("分类信息不能为空");

        //高级版新增多条商品分类信息
        if (categories.contains(",")){
            categoryBrandMapper.insertList(
                    Arrays.asList(categories.split(","))
                    .stream()
                    .map(categoryIdStr -> new CategoryBrandEntity(Integer.valueOf(categoryIdStr)
                    ,brandId))
                    .collect(Collectors.toList())
            );
        }else{
            CategoryBrandEntity categoryBrandEntity = new CategoryBrandEntity();
            categoryBrandEntity.setBrandId(brandId);
            categoryBrandEntity.setCategoryId(Integer.valueOf(categories));

            categoryBrandMapper.insertSelective(categoryBrandEntity);
        }
    }
```

## 删除

### 前台

在mrBrand.vue中 52行

```vue
          <v-btn flat icon color="red" @click="deleteBrand(props.item)">
            <v-icon>delete</v-icon>
          </v-btn>
```

在mrBrand.vue中 141行

```vue
deleteBrand(item) {
        this.$message.confirm('此操作将永久删除该品牌, 是否继续?').then(() => {
          // 发起删除请求
          this.$http.delete("/brand/delete?id=" + item.id,)
            .then(() => {
              // 删除成功，重新加载数据
              this.$message.success("删除成功！");
              this.getTableData();
            })
        }).catch(() => {
          this.$message.info("删除已取消！");
        });
      }
```

### 后台

```java
    @Transactional
    @Override
    public Result<JsonObject> deleteBrandInfo(Integer id) {
        brandMapper.deleteByPrimaryKey(id);
		
        //删除完品牌管理记得删除他绑定的商品分类信息
        //删除中间表
        this.deleteCategoryBrandId(id);
        return this.setResultSuccess();
    }
    
    //提取了删除代码							  品牌管理id
	private void deleteCategoryBrandId(Integer brandId){
        //要根据brandId删除中间表的数据,Example参数对象是中间表实体类
        Example example = new Example(CategoryBrandEntity.class);
        example.createCriteria().andEqualTo("brandId",brandId);
        categoryBrandMapper.deleteByExample(example);
    }
```

# SpecGroup的增删改查

## 加载分类信息

前台 index.js 29行

```vue
route("/item/specification",'/item/specification/Specification',"Specification"),
```

specification包下Specification.vue

```
<v-tree url="/category/list" :isEdit="false" @handleClick="handleClick"/>
```

## 查询

### 前台

SpecGroup.vue 72行

```vue
loadData(){\
          this.$http.get("/specgroup/getSpecGroupInfo",{
              params:{
                  cid:this.cid
              }
          })
          .then((resp) => {
              this.groups = resp.data.data;
          })
          .catch(() => {
              this.groups = [];
          })
      }
```



### 后台

创建entity	SpecGroupEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @ClassName SpecGroupEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
@Table(name = "tb_spec_group")
@Data
public class SpecGroupEntity {

    @Id
    private Integer id;

    private Integer cid;

    private String name;
}
```

创建dto	SpecGroupDTO

```java
package com.baidu.shop.dto;

import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

/**
 * @ClassName SpecGroupDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
@ApiModel(value = "规格组数据传输DTO")
@Data
public class SpecGroupDTO {

    @ApiModelProperty(value = "主键",example = "1")
    @NotNull(message = "主键不能为空",groups = {MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "类型id",example = "1")
    @NotNull(message = "类型id不能为空",groups = {MingruiOperation.Add.class})
    private Integer cid;

    @ApiModelProperty(value = "规格组名称")
    @NotEmpty(message = "规格组名称不能为空",groups = {MingruiOperation.Add.class})
    private String name;
}
```

创建mapper  SpecGroupMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.SpecGroupEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName SpecGroupMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
public interface SpecGroupMapper extends Mapper<SpecGroupEntity> {
}
```

SpecificationService

```java
	@ApiOperation(value = "通过条件查询规格组")
    @GetMapping(value = "/specgroup/getSpecGroupInfo")
    Result<List<SpecGroupEntity>> getSpecGroupInfo(SpecGroupDTO specGroupDTO);
```

根据传来的cid查询要显示的商品规格

![image-20210105150654636](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105150654636.png)

```java
   @Override
    public Result<List<SpecGroupEntity>> getSpecGroupInfo(SpecGroupDTO specGroupDTO) {
        Example example = new Example(SpecGroupEntity.class);
        example.createCriteria().andEqualTo("cid",BaiduBeanUtil.copyProperties(specGroupDTO,SpecGroupEntity.class).getCid());
        List<SpecGroupEntity> list = specGroupMapper.selectByExample(example);
        return this.setResultSuccess(list);
    }
```

## 新增

### 前台

```vue
save(){
           this.$http({
            method: this.isEdit ? 'put' : 'post',
            url: '/specgroup/save',
            data: this.group
          }).then(() => {
            // 关闭窗口
            this.show = false;
            this.$message.success("保存成功！");
            this.loadData();
          }).catch(() => {
              this.$message.error("保存失败！");
            });
      }
```

### 后台

```java
 @ApiOperation(value = "新增")
    @PostMapping(value = "/specgroup/save")
    Result<JsonObject> saveSpecGroup(@Validated({MingruiOperation.Add.class}) @RequestBody SpecGroupDTO specGroupDTO);
```

![image-20210105150611776](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105150611776.png)

```java
    @Transactional
    @Override
    public Result<JsonObject> saveSpecGroup(SpecGroupDTO specGroupDTO) {
        specGroupMapper.insertSelective(BaiduBeanUtil.copyProperties(specGroupDTO,SpecGroupEntity.class));
        return this.setResultSuccess();
    }
```

## 修改

### 前台

```vue
save(){
           this.$http({
            method: this.isEdit ? 'put' : 'post',
            url: '/specgroup/save',
            data: this.group
          }).then(() => {
            // 关闭窗口
            this.show = false;
            this.$message.success("保存成功！");
            this.loadData();
          }).catch(() => {
              this.$message.error("保存失败！");
            });
      }
```

### 后台

```java
@ApiOperation(value = "修改")
    @PutMapping(value = "/specgroup/save")
    Result<JsonObject> updateSpecGroup(@Validated({MingruiOperation.Update.class}) @RequestBody SpecGroupDTO specGroupDTO);
```

![image-20210105150924269](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105150924269.png)

```java
    @Transactional
    @Override
    public Result<JsonObject> updateSpecGroup(SpecGroupDTO specGroupDTO) {
        specGroupMapper.updateByPrimaryKeySelective(BaiduBeanUtil.copyProperties(specGroupDTO,SpecGroupEntity.class));
        return this.setResultSuccess();
    }
```

## 删除

### 前台

```vue
 deleteGroup(id){
          this.$message.confirm("确认要删除分组吗？")
          .then(() => {
            this.$http.delete("/specgroup/delete/" + id)
                .then((resp) => {
                    if (resp.data.code != 200) {
                        this.$message.error(resp.data.message);
                        return;
                    }
                    this.$message.success("删除成功");
                    this.loadData();
                })
                .catch(() => {
                    this.$message.error("删除失败");
                    this.loadData();
                })
          })
      }
```



### 后台

SpecificationService

```java
@ApiOperation(value = "删除")
    @DeleteMapping(value = "/specgroup/delete/{id}")
    Result<JsonObject> deleteSpecGroup(@PathVariable Integer id);
```

impl

```java
@Transactional
@Override
public Result<JsonObject> deleteSpecGroup(Integer id) {
    //---------判断该规格下面是否设置了规格参数----------
    Example example = new Example(SpecParamEntity.class);
    example.createCriteria().andEqualTo("groupId",id);

    List<SpecParamEntity> specParamList = specParamMapper.selectByExample(example);
    if (specParamList.size() > 0) return this.setResultError("该规格下面还有规格参数");
	//---------------------------------------------
    
    //删除
    specGroupMapper.deleteByPrimaryKey(id);
    return this.setResultSuccess();
}
```

# SpecParam的增删改查

## 查询

### 前台

```vue
loadData() {
      this.$http
        .get("/specparam/getSpecParamInfo?groupId=" + this.group.id)
        .then((resp) => {
          resp.data.data.forEach(p => {
              p.segments = p.segments ? p.segments.split(",").map(s => s.split("-")) : [];
          })
          this.params = resp.data.data;
        })
        .catch(() => {
          this.params = [];
        });
    }
```

### 后台

创建entity	SpecParamEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @ClassName SpecParamEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
@Table(name = "tb_spec_param")
@Data
public class SpecParamEntity {

    @Id
    private Integer id;

    private  Integer cid;

    private Integer groupId;

    private String name;

    @Column(name = "`numeric`")
    private Boolean numeric;

    private String unit;

    private Boolean generic;

    private  Boolean searching;

    private String segments;
}
```

创建dto  SpecParamDTO

```java
package com.baidu.shop.dto;

import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotNull;

/**
 * @ClassName SpecParamDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
@ApiModel(value = "规格参数传输DTO")
@Data
public class SpecParamDTO {

    @ApiModelProperty(value = "主键",example = "1")
    @NotNull(message = "主键不能为空",groups = {MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "分类id",example = "1")
    private Integer cid;

    @ApiModelProperty(value = "规格组id",example = "1")
    private Integer groupId;

    @ApiModelProperty(value = "规格参数名称")
    private String name;

    @ApiModelProperty(value = "是否是数字类型参数,1->true或0->false",example = "0")
    @NotNull(message = "是否是数字类型参数不能为空",groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private Boolean numeric;

    @ApiModelProperty(value = "数字类型参数的单位,非数字类型可以为空")
    private String unit;

    @ApiModelProperty(value = "是否是sku通用属性,1->true或0->false",example = "0")
    @NotNull(message = "是否是sku通用属性不为空",groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private Boolean generic;

    @ApiModelProperty(value = "是否用于搜索过滤,1->true或0->false",example = "0")
    @NotNull(message = "是否用于搜索过滤不能为空",groups = {MingruiOperation.Add.class,MingruiOperation.Update.class})
    private Boolean searching;

    @ApiModelProperty(value = "数值类型参数,如果需要搜索,则添加分段间隔值,如cpu频率间隔:0.5-1.0")
    private String segments;
}
```

创建mapper   SpecParamMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.SpecParamEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName SpecParamMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/4
 * @Version V1.0
 **/
public interface SpecParamMapper extends Mapper<SpecParamEntity> {
}

```

SpecificationService

```java
 	@ApiOperation(value = "通过条件查询规格参数")
    @GetMapping(value = "/specparam/getSpecParamInfo")
    Result<List<SpecParamEntity>> getSpecParamInfo(SpecParamDTO specParamDTO);
```

点击规格,查询规格下面的规格参数

![image-20210105151719977](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105151719977.png)

```java
@Override//查询规格参数
public Result<List<SpecParamEntity>> getSpecParamInfo(SpecParamDTO specParamDTO) {
    SpecParamEntity specParamEntity = BaiduBeanUtil.copyProperties(specParamDTO,SpecParamEntity.class);
    Example example = new Example(SpecParamEntity.class);
    example.createCriteria().andEqualTo("groupId",specParamEntity.getGroupId());

    List<SpecParamEntity> list = specParamMapper.selectByExample(example);
    return this.setResultSuccess(list);
}
```

## 新增

### 前台

```vue
    save(){
        const p = {};
        Object.assign(p, this.param);
        p.segments = p.segments.map(s => s.join("-")).join(",")
        this.$http({
            method: this.isEdit ? 'put' : 'post',
            url: '/specparam/save',
            data: p,
        }).then(() => {
            // 关闭窗口
            this.show = false;
            this.$message.success("保存成功！");
            this.loadData();
          }).catch(() => {
              this.$message.error("保存失败！");
            });
    }
```

### 后台

SpecificationService

```java
@ApiOperation(value = "新增规格参数")
    @PostMapping(value = "/specparam/save")
    Result<JSONObject> saveSpecParam(@Validated({MingruiOperation.Add.class}) @RequestBody SpecParamDTO specParamDTO);
```

![image-20210105152147150](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210105152147150.png)

```java
@Transactional
@Override
public Result<JSONObject> saveSpecParam(SpecParamDTO specParamDTO) {
    specParamMapper.insertSelective(BaiduBeanUtil.copyProperties(specParamDTO,SpecParamEntity.class));
    return this.setResultSuccess();
}
```

## 修改

### 前台

```vue
    save(){
        const p = {};
        Object.assign(p, this.param);
        p.segments = p.segments.map(s => s.join("-")).join(",")
        this.$http({
            method: this.isEdit ? 'put' : 'post',
            url: '/specparam/save',
            data: p,
        }).then(() => {
            // 关闭窗口
            this.show = false;
            this.$message.success("保存成功！");
            this.loadData();
          }).catch(() => {
              this.$message.error("保存失败！");
            });
    }
```

### 后台

SpecificationService

```java
@ApiOperation(value = "修改规格参数")
    @PutMapping(value = "/specparam/save")
    Result<JSONObject> updateSpecParam(@Validated({MingruiOperation.Update.class}) @RequestBody SpecParamDTO specParamDTO);
```

impl

```java
    @Transactional
    @Override
    public Result<JSONObject> updateSpecParam(SpecParamDTO specParamDTO) {
       specParamMapper.updateByPrimaryKey(BaiduBeanUtil.copyProperties(specParamDTO,SpecParamEntity.class));
        return this.setResultSuccess();
    }
```

## 删除

### 前台

```vue
deleteParam(id) {
        this.$message.confirm("确认要删除该参数吗？")
        .then(() => {
            this.$http.delete("/item/spec/param/" + id)
            .then(() => {
                this.$message.success("删除成功");
            })
            .catch(() => {
                this.$message.error("删除失败");
            })
        })
    }
```



### 后台

SpecificationService

```java
@ApiOperation(value = "删除规格参数")
    @DeleteMapping(value = "/specparam/delete/{id}")
    Result<JSONObject> deleteSpecParam(@PathVariable Integer id);
```



```java
    @Transactional
    @Override
    public Result<JSONObject> deleteSpecParam(Integer id) {
        specParamMapper.deleteByPrimaryKey(id);
        return this.setResultSuccess();
    }
```

# Goods的曾删改查

## Spu

#### SpuEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

/**
 * @ClassName SpuEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
@Table(name = "tb_spu")
@Data
public class SpuEntity {

    @Id
    private Integer id;

    private String title;

    private String subTitle;

    private Integer cid1;

    private Integer cid2;

    private Integer cid3;

    private Integer brandId;

    private Integer saleable;

    private Integer valid;

    private Date createTime;

    private Date lastUpdateTime;
}
```

#### SpuDTO

```java
package com.baidu.shop.dto;

import com.baidu.shop.base.BaseDTO;
import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.util.Date;

/**
 * @ClassName SpuDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
@ApiModel(value = "spu数据传输DTO")
@Data
public class SpuDTO extends BaseDTO {

    @ApiModelProperty(value = "主键",example = "1")
    @NotNull(message = "主键不能为空",groups = {MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "标题")
    @NotEmpty(message = "标题不能为空",groups = {MingruiOperation.Add.class})
    private String title;

    @ApiModelProperty(value = "子标题")
    private String subTitle;

    @ApiModelProperty(value = "1级类目id",example = "1")
    @NotNull(message = "1级类目id不能为空",groups = {MingruiOperation.Add.class})
    private Integer cid1;

    @ApiModelProperty(value = "1级类目id",example = "1")
    @NotNull(message = "2级类目id不能为空",groups = {MingruiOperation.Add.class})
    private Integer cid2;

    @ApiModelProperty(value = "1级类目id",example = "1")
    @NotNull(message = "3级类目id不能为空",groups = {MingruiOperation.Add.class})
    private Integer cid3;

    @ApiModelProperty(value = "商品所属品牌id",example = "1")
    @NotNull(message = "商品所属id不能为空",groups = {MingruiOperation.Add.class})
    private Integer brandId;

    //不需要验证
    @ApiModelProperty(value = "是否上架,1上架,0下架",example = "1")
    private Integer saleable;

    //不需要验证
    @ApiModelProperty(value = "是否有效,1有效,0无效",example = "1")
    private Integer valid;

    //不需要验证
    @ApiModelProperty(value = "添加时间")
    private Date createTime;

    //不需要验证
    @ApiModelProperty(value = "最后修改时间")
    private Date lastUpdateTime;

}
```

#### 创建GoodsService

```java
package com.baidu.shop.service;

import com.baidu.shop.base.Result;
import com.baidu.shop.dto.SpuDTO;
import com.baidu.shop.entity.SpuEntity;
import com.github.pagehelper.PageInfo;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * @ClassName GoodsService
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
@Api(tags = "商品接口")
public interface GoodsService {
}
```

#### SpuMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.SpuEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName SpuMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/5
 * @Version V1.0
 **/
public interface SpuMapper extends Mapper<SpuEntity> {
}
```

#### 创建GoodsServiceImpl

```java
@RestController
public class GoodsServiceImpl extends BaseApiService implements GoodsService {
}
```



## 查询

```java
@Override
public Result<List<SpuDTO>> getSpuInfo(SpuDTO spuDTO) {
    SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO, SpuEntity.class);
    
    if(!StringUtils.isEmpty(spuDTO.getSort())){
        PageHelper.orderBy(spuDTO.getOrderBy());
    }

    if (ObjectUtil.isNotNull(spuDTO.getPage()) && ObjectUtil.isNotNull(spuDTO.getRows())){
        PageHelper.startPage(spuDTO.getPage(),spuDTO.getRows());
    }

    Example example = new Example(SpuEntity.class);
    Example.Criteria criteria = example.createCriteria();

    //判断前台传来的
    if (ObjectUtil.isNotNull(spuEntity.getSaleable()) && spuEntity.getSaleable() != 2){
        criteria.andEqualTo("saleable",spuEntity.getSaleable());
    }
    if (ObjectUtil.isNotNull(spuEntity.getTitle())){
        criteria.andLike("title","%"+spuEntity.getTitle()+"%");
    }

    List<SpuEntity> list = spuMapper.selectByExample(example);
    PageInfo<SpuEntity> pageInfo = new PageInfo<>(list);
    return this.setResultSuccess(pageInfo);
}
```

## 新增

GoodsForm.vue	18行

```vue
			<v-flex xs5>
                <!--商品分类-->
                <v-cascader
                  url="/category/list"
                  required
                  showAllLevels
                  v-model="goods.categories"
                  label="请选择商品分类"/>
              </v-flex>
```

新增组件就可以点击选择商品分类

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106211629235.png" alt="image-20210106211629235" style="zoom: 50%;" />

但是此时点击 分类后 所属品牌还查询不到值

GoodsForm.vue	282行

```vue
 		this.$http
            .get("/brand/getBrandInfoByCategoryId",{
              params:{
                cid:this.goods.categories[2].id
              }
            })
            .then((resp) => {
              console.log(resp);
              this.brandOptions = resp.data.data;
            });
```

在BrandService中 写入

```java
	@ApiOperation(value = "通过id查询品牌")
    @GetMapping(value = "brand/getBrandInfoByCategoryId")
    Result<List<BrandEntity>> getBrandInfoByCategoryId(Integer cid);
```

在BrandMapper中自定义sql

```java
@Select(value = "select * from tb_brand b where b.id in(select cb.brand_id from tb_category_brand cb where cb.category_id=#{cid})")
    List<BrandEntity> getBrandInfoByCategoryId(Integer cid);
```

在BrandServiceImpl中实现

```java
@Override
public Result<List<BrandEntity>> getBrandInfoByCategoryId(Integer cid) {
    List<BrandEntity> list = brandMapper.getBrandInfoByCategoryId(cid);
    return this.setResultSuccess(list);
}
```

这样新增组件 选中商品分类后就可以选择 所属品牌 的值了

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106211750330.png" alt="image-20210106211750330" style="zoom:50%;" />

此时选择 所属品牌 后 页面会报错 找不到404

GoodsForm.vue	293行

这个是用来查询规格参数param表数据的  根据商品分类的id  查询 所有规格的 规格参数信息

```vue
		// 根据分类查询规格参数
          this.$http
            .get("/specparam/getSpecParamInfo",{
              params:{
                cid:this.goods.categories[2].id
              }
            })
            .then((resp) => {
              let specs = [];
              let template = [];
              if (this.isEdit){
                specs = JSON.parse(this.goods.spuDetail.genericSpec);
                template = JSON.parse(this.goods.spuDetail.specialSpec);
              }
```

在SpecificationServiceImpl的getSpecParamInfo方法中添加

```java
    @Override//查询规格参数
    public Result<List<SpecParamEntity>> getSpecParamInfo(SpecParamDTO specParamDTO) {
        SpecParamEntity specParamEntity = BaiduBeanUtil.copyProperties(specParamDTO,SpecParamEntity.class);
        Example example = new Example(SpecParamEntity.class);
        Example.Criteria criteria = example.createCriteria();

        if (ObjectUtil.isNotNull(specParamEntity.getGroupId())){
            criteria.andEqualTo("groupId",specParamEntity.getGroupId());
        }
        //---------添加----------
        //根据商品分类的id  查询 所有规格的 规格参数信息
        if (ObjectUtil.isNotNull(specParamEntity.getCid())){
            criteria.andEqualTo("cid",specParamEntity.getCid());
        }
        //----------------------

        List<SpecParamEntity> list = specParamMapper.selectByExample(example);
        return this.setResultSuccess(list);
    }
```

这样新增组件的第三步骤就有了 商品分类的 规格参数的信息

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106221754447.png" alt="image-20210106221754447" style="zoom:50%;" />

### 添加图片

GoodsForm.vue	57行

```vue
      <!--2、商品描述-->
      <v-stepper-content step="2">
        <v-editor v-model="goods.spuDetail.description" upload-url="/upload"/>
      </v-stepper-content>
```

就可以点击上传图片了

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106222742131.png" alt="image-20210106222742131" style="zoom: 67%;" />

GoodsForm.vue	119行

```vue
              <!--图片上传组件-->
              <v-upload v-model="props.item.images" url="/upload"/>
```
<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210106223213605.png" alt="image-20210106223213605" style="zoom: 50%;" />

GoodsForm.vue 225行

```vue
      //console.log(goodsParams)
      this.$http({
        method: this.isEdit ? "put" : "post",
        url: "/goods/save",
        data: goodsParams
      })
        .then(() => {
          // 成功，关闭窗口
          this.$emit("closeForm");
          // 提示成功
          this.$message.success("保存成功了");
        })
        .catch(() => {
          this.$message.error("保存失败！");
        });
```

SkuEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

/**
 * @ClassName SkuEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@Table(name = "tb_sku")
@Data
public class SkuEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Integer spuId;

    private String title;

    private String images;

    private Integer price;

    private String indexes;

    private String ownSpec;

    private Integer enable;

    private Date createTime;

    private Date lastUpdateTime;
}
```

SpuDetailEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @ClassName SpuDetailEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@Table(name = "tb_spu_detail")
@Data
public class SpuDetailEntity {

    @Id
    private Integer spuId;

    private String description;

    private String genericSpec;

    private String specialSpec;

    private String packingList;

    private String afterService;

}
```

StockEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @ClassName StockEntity
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@Table(name = "tb_stock")
@Data
public class StockEntity {

    @Id
    private Long skuId;

    private Integer seckillStock;

    private Integer seckillTotal;

    private Integer stock;
}
```

SkuDTO

```java
package com.baidu.shop.dto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.jnlp.IntegrationService;
import javax.persistence.Id;
import java.util.Date;

/**
 * @ClassName SkuDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@ApiModel(value = "SKU属性数据传输DTO")
@Data
public class SkuDTO {
    @ApiModelProperty(value = "主键",example = "1")
    private Long id;

    @ApiModelProperty(value = "spu主键",example = "1")
    private Integer spuId;

    @ApiModelProperty(value = "商品标题")
    private String title;

    @ApiModelProperty(value = "商品图片,多个图片以','分割")
    private String images;

    @ApiModelProperty(value = "销售价格,单位为分",example = "1")
    private Integer price;

    @ApiModelProperty(value = "特有规格属性在spu属性模板中的对应下标组合")
    private String indexes;

    @ApiModelProperty(value = "sku的特有规格此参数键值对,json格式,反序列化时是哟ingLinkedHashMap,保证有序")
    private String ownSpec;

    @ApiModelProperty(value = "是否有效,0无效,1有效",example = "1")
    private Boolean enable;

    @ApiModelProperty(value = "添加时间")
    private Date createTime;

    @ApiModelProperty(value = "最后修改时间")
    private Date lastUpdateTime;

    @ApiModelProperty(value = "库存")
    private Integer stock;
}
```

SpuDetailDTO

```java
package com.baidu.shop.dto;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

/**
 * @ClassName SpuDetailDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@ApiModel(value = "spu大字段数据层传输DTO")
@Data
public class SpuDetailDTO {

    @ApiModelProperty(value = "spu主键",example = "1")
    private Integer spuId;

    @ApiModelProperty(value = "商品描述信息")
    private String description;

    @ApiModelProperty(value = "通过规格参数数据")
    private String genericSpec;

    @ApiModelProperty(value = "特有规格参数及可选值信息,json格式")
    private String specialSpec;

    @ApiModelProperty(value = "包装清单")
    private String packingList;

    @ApiModelProperty(value = "售后服务")
    private String afterService;
}
```

StockDTO

```java
package com.baidu.shop.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

/**
 * @ClassName StockDTO
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
@ApiModel(value = "库存数据传输DTO")
@Data
public class StockDTO {

    @ApiModelProperty(value = "sku主键",example = "1")
    private Long skuId;

    @ApiModelProperty(value = "可秒杀库存",example = "1")
    private Integer seckillStock;

    @ApiModelProperty(value = "秒杀总数量",example = "1")
    private Integer seckillTotal;

    @ApiModelProperty(value = "库存数量",example = "1")
    private Integer stock;
}
```

在SpuDTO中添加两个属性

```java

    @ApiModelProperty(value = "大字段数据")
    private SpuDetailDTO spuDetail;

    @ApiModelProperty(value = "sku属性数据集合")
    private List<SkuDTO> skus;
```

GoodsService 

```java
    @ApiOperation(value = "新建商品")
    @PostMapping(value = "goods/save")
    Result<JsonObject> saveGoods(@RequestBody SpuDTO spuDTO);
```

SkuMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.dto.SkuDTO;
import com.baidu.shop.entity.SkuEntity;
import org.apache.ibatis.annotations.Select;
import tk.mybatis.mapper.common.Mapper;

import java.util.List;

/**
 * @ClassName SkuMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
public interface SkuMapper extends Mapper<SkuEntity> {
}
```

SpuDetailMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.SpuDetailEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName SpuDetailMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
public interface SpuDetailMapper extends Mapper<SpuDetailEntity> {
}
```

StockMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.StockEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * @ClassName StockMapper
 * @Description: TODO
 * @Author hexiangshen
 * @Date 2021/1/7
 * @Version V1.0
 **/
public interface StockMapper extends Mapper<StockEntity> {
}
```

GoodsServiceImpl

```java
    //新增!!!!!!!
    @Override
    @Transactional
    public Result<JsonObject> saveGoods(SpuDTO spuDTO) {
        System.out.println(spuDTO);
        final Date date = new Date();
        //新增spu
        SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO, SpuEntity.class);
        spuEntity.setSaleable(1);
        spuEntity.setValid(1);
        spuEntity.setCreateTime(date);
        spuEntity.setLastUpdateTime(date);
        spuMapper.insertSelective(spuEntity);

        //新增大字段
        SpuDetailDTO spuDetail = spuDTO.getSpuDetail();
        SpuDetailEntity spuDetailEntity = BaiduBeanUtil.copyProperties(spuDetail, SpuDetailEntity.class);
        spuDetailEntity.setSpuId(spuEntity.getId());
        spuDetailMapper.insertSelective(spuDetailEntity);

        //新增sku,sku可能时多条数据
        List<SkuDTO> skus = spuDTO.getSkus();
        skus.stream().forEach(skuDTO -> {
            SkuEntity skuEntity = BaiduBeanUtil.copyProperties(skuDTO, SkuEntity.class);
            skuEntity.setSpuId(spuEntity.getId());
            skuEntity.setCreateTime(date);
            skuEntity.setLastUpdateTime(date);
            skuMapper.insertSelective(skuEntity);

            //新增tock
            StockEntity stockEntity = new StockEntity();
            stockEntity.setSkuId(skuEntity.getId());
            stockEntity.setStock(skuDTO.getStock());
            stockMapper.insertSelective(stockEntity);
        });
        return this.setResultSuccess();
    }
```

## 修改

### 回显

源码vue中bug很多

Goods.vue

![image-20210108210840414](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210108210840414.png)

![image-20210108210919527](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210108210919527.png)

![image-20210108210930141](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210108210930141.png)

Goods.vue editItem方法

```vue
editItem(item) {
          this.isEdit = true;
          this.show = true;
          let obj = item;
        // 查询商品详情
        this.$http.get("/goods/getSpuDetailBySpu",{
          params:{
            
            spuId:item.id
          }
        })
          .then(resp => {
            //this.selectedGoods.spuDetail = resp.data;
            //this.selectedGoods.spuDetail.specTemplate = JSON.parse(resp.data.data.genericSpec);
            //this.selectedGoods.spuDetail.specifications = JSON.parse(resp.data.data.specialSpec);
            obj.categories = [];
            obj.spuDetail = resp.data.data;
            obj.spuDetail.specTemplate = JSON.parse(resp.data.data.genericSpec);
            obj.spuDetail.specifications = JSON.parse(resp.data.data.specialSpec);

            this.$http.get('/goods/getSkuBySpuId',{
              params:{
                spuId:item.id
              }
            })
            .then(resp => {
              obj.skus = resp.data.data;
              this.selectedGoods = obj;
            })
            .catch(erro => console.log(erro))
          })
      }
```

GoodsService

```java
    @ApiOperation(value = "获取spu详细信息")
    @GetMapping(value = "goods/getSpuDetailBySpu")
    public Result<SpuDetailEntity> getSpuDetailBySpu(Integer spuId);

    @ApiOperation(value = "获取sku信息")
    @GetMapping(value = "goods/getSkuBySpuId")
    Result<SkuDTO> getSkuBySpuId(Integer spuId);
```

SkuMapper

```java
@Select(value = "select k.*,stock from tb_sku k , tb_stock t where k.id =t.sku_id and k.spu_id=#{spuId}")
List<SkuDTO> selectSkuAndStockBySpuId(Integer spuId);
```

 GoodsServiceImpl

```java
    @Override
    public Result<SpuDetailEntity> getSpuDetailBySpu(Integer spuId) {
        SpuDetailEntity spuDetailEntity = spuDetailMapper.selectByPrimaryKey(spuId);
        return this.setResultSuccess(spuDetailEntity);
    }

    @Override
    public Result<SkuDTO> getSkuBySpuId(Integer spuId) {
        List<SkuDTO> list = skuMapper.selectSkuAndStockBySpuId(spuId);

        return this.setResultSuccess(list);
    }
```

### 修改

GoodsForm.vue

```vue
this.$http({
    method: this.isEdit ? "put" : "post",
    url: "/goods/save",
    data: goodsParams
})
```

GoodsService

```java
    @ApiOperation(value = "修改商品")
    @PutMapping(value = "goods/save")
    Result<JsonObject> editGoods(@Validated({MingruiOperation.Update.class}) @RequestBody SpuDTO spuDTO);
```

修改的步骤

\1. 修改spu

\2. 修改spuDetail

\3. 通过spuId查询出来将要被删除的sku

\4. 获取所有将要被删除skuId(如果直接删除的话stock没有办法删除

\5. 批量删除sku

\6. 批量删除stock

\7. 将新的数据新增到数据库

SkuMapper

添加DeleteByIdListMapper<SkuEntity,Long>

```java
public interface SkuMapper extends Mapper<SkuEntity>, DeleteByIdListMapper<SkuEntity,Long> {
    @Select(value = "select k.*,stock from tb_sku k , tb_stock t where k.id = t.sku_id and k.spu_id=#{spuId}")
    List<SkuDTO> selectSkuAndStockBySpuId(Integer spuId);
}
```

StockMapper

添加 DeleteByIdListMapper<StockEntity,Long> 

```java
public interface StockMapper extends Mapper<StockEntity>, DeleteByIdListMapper<StockEntity,Long> {
}
```

GoodsServiceImpl

```java
    //修改
    @Override
    @Transactional
    public Result<JsonObject> editGoods(SpuDTO spuDTO) {
        final Date date = new Date();
        SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO, SpuEntity.class);
        spuEntity.setLastUpdateTime(date);
        spuMapper.updateByPrimaryKeySelective(spuEntity);

        spuDetailMapper.updateByPrimaryKeySelective(BaiduBeanUtil.copyProperties(spuDTO.getSpuDetail(),SpuDetailEntity.class));

        //删除
        Example example = new Example(SkuEntity.class);
        example.createCriteria().andEqualTo("spuId",spuEntity.getId());
        List<SkuEntity> skuEntities = skuMapper.selectByExample(example);

        List<Long> skuIdList = skuEntities.stream().map(skuEntity -> skuEntity.getId()).collect(Collectors.toList());
        skuMapper.deleteByIdList(skuIdList);
        stockMapper.deleteByIdList(skuIdList);

        this.insertSkuAndStock(spuDTO,spuEntity.getId(),date);

        return this.setResultSuccess();
    }

    //提取重复的 新增sku stock 代码
    private void insertSkuAndStock (SpuDTO spuDTO,Integer spuId,Date date){
        List<SkuDTO> skuList = spuDTO.getSkus();
        skuList.stream().forEach(skuDTO -> {
            SkuEntity skuEntity = BaiduBeanUtil.copyProperties(skuDTO, SkuEntity.class);
            skuEntity.setSpuId(spuId);
            skuEntity.setCreateTime(date);
            skuEntity.setLastUpdateTime(date);
            skuMapper.insertSelective(skuEntity);

            StockEntity stockEntity = new StockEntity();
            stockEntity.setSkuId(skuEntity.getId());
            stockEntity.setStock(skuDTO.getStock());
            stockMapper.insertSelective(stockEntity);
        });
    }
```

## 删除

Goods.vue

```vue
      deleteItem(id) {
        this.$message.confirm('此操作将永久删除该商品, 是否继续?')
          .then(() => {
            // 发起删除请求
            this.$http.delete("/goods/deleteGoods?spuId=" + id)
              .then(() => {
                // 删除成功，重新加载数据
                this.getDataFromApi();
                this.$message.info('删除成功!');
              })
          })
          .catch(() => {
            this.$message.info('已取消删除');
          });
      }
```

GoodsService

```java
    @ApiOperation(value = "删除商品")
    @DeleteMapping(value = "goods/deleteGoods")
    Result<JsonObject> deleteGoods(Integer spuId);
```

GoodsServiceImpl

```java
    @Transactional
    @Override//删除
    public Result<JsonObject> deleteGoods(Integer spuId) {
        spuMapper.deleteByPrimaryKey(spuId);
        spuDetailMapper.deleteByPrimaryKey(spuId);

        this.deleteSkuAndStock(spuId);

        return setResultSuccess();
    }

    //提取重复的 删除sku stock 代码
    private void deleteSkuAndStock (Integer spuId){
        Example example = new Example(SpuEntity.class);
        example.createCriteria().andEqualTo("spuId",spuId);
        List<SkuEntity> skuEntities = skuMapper.selectByExample(example);

        List<Long> skuIdList = skuEntities.stream().map(spuEntity -> spuEntity.getId()).collect(Collectors.toList());
        skuMapper.deleteByIdList(skuIdList);
        stockMapper.deleteByIdList(skuIdList);
    }
```

## 上架下架

### 前台

Goods.vue

```vue
     //五十一行
          <v-btn icon small v-if="props.item.saleable" @click="shangxiajia(props.item)">下架</v-btn>
          <v-btn icon v-else @click="shangxiajia(props.item)">上架</v-btn>
     
     shangxiajia(item){
        let s = item.saleable ? 0 : 1
        this.$http.put("/goods/upAndDown",{
            id:item.id,
            saleable: s
        })
        .then(resp => {
          this.getDataFromApi();
          this.$message.info('下架成功!');
        })
        .catch(() => {
            this.$message.info('下架失败');
          });
      }
```

### 后台

GoodsService

```java
    @ApiOperation(value = "上下架")
    @PutMapping(value = "goods/upAndDown")
    Result<JsonObject> upAndDown(@RequestBody SpuDTO spuDTO);
```

GoodsServiceImpl

```java
    //上架下架
    @Transactional
    @Override
    public Result<JsonObject> upAndDown(SpuDTO spuDTO) {
        SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO, SpuEntity.class);
        spuEntity.setId(spuDTO.getId());
        spuEntity.setSaleable(spuDTO.getSaleable());
        spuMapper.updateByPrimaryKeySelective(spuEntity);
        return this.setResultSuccess();
    }
```

# 6-Elasticsearch

## 1 Elasticsearch学习目标

- 独立安装Elasticsearch
- 会使用Rest的API操作索引
- 会使用Rest的API查询数据 
- 会使用Rest的API聚合数据
- 掌握Spring Data Elasticsearch使用

## 2 Elasticsearch介绍和安装

​		Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。Lucene是迄今为止最先进、性能、 功能 上来讲最全的搜索引擎库。 但是，Lucene只是一个库。想要使用它，你必须使用Java来作为开发 语言并将其直接集成到你的应用中，（以导入jar包的形式），Lucene非常复杂，你需要深入了解检索 的相关知识来理解它是如何工作的。

​		Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，是一个独立的 web项目。但是它的使用方式是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得 简单。 Elasticsearch不仅仅是Lucene和全文搜索，我们还能这样去描述它：

- 分布式的实时(快!)文件存储，每个字段都被索引并可被搜索
- 分布式的实时分析搜索引擎
- 可以扩展到上百台服务器，处理PB级结构化或非结构化数据

参考博客：https://github.com/Exrick/xmall/blob/master/study/Elasticsearch.md

## 2.1 简介

### 2.1.1 Elastic

Elastic官网：https://www.elastic.co/cn/

![image-20210311204555829](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204555829.png)

## 2.1.2 Elasticsearch

 Elasticsearch官网：https://www.elastic.co/cn/products/elasticsearch

![image-20210311204640518](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204640518.png)

- 如上所述，Elasticsearch具备以下特点：
- 分布式，无需人工搭建集群
- Restful风格，一切API都遵循Rest原则，容易上手 
- 近实时搜索，数据更新在Elasticsearch中几乎是完全同步的。 
- Elasticsearch 是一个分布式的搜索引擎，底层基于lucene,主要特点是可以完成全文检索 
- 支持海量数据pb级别，横向拓展，数据分片，等一系列功能、 
- 良好的查询机制，支持模糊，区间，排序，分组，分页，等常规功能 
- 横向可扩展性：只需要增加一台服务器，做一点儿配置，启动一下ES进程就可以并入集 
- 分片机制提供更好的分布性：同一个索引分成多个分片（sharding），这点类似于HDFS的块机 制；分而治之的方式来提升处理效率，相信大家都不会陌生；

不足:

没有细致的权限管理机制,没有像MySQL那样的分各种用户，每个用户有不同的权限 单台节点部署的话，并发查询效率并不高，

使用场景： 

爱奇艺搜电影，京东搜手机，qq搜好友，百度地址各种信息，嘀嘀打车，邮件搜索，微信还有，美团饭 店，旅游景点，可以说，搜索场景无处不在

## 2.2 安装和配置

为了模拟真实场景，我们将在linux下安装Elasticsearch。

### 2.2.1 安装es

将压缩包上传到linux系统中

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204940909.png" alt="image-20210311204940909"  />

```
tar -zxvf elasticsearch-7.5.1-linux-x86_64.tar.gz #解压压缩包
groupadd esgroup #创建用户组
useradd esuser -g esgroup -p 123456 #在用户组下新建用户
cd elasticsearch-7.5.1/config/ #进入配置文件目录
vi jvm.options #修改JVM参数(默认1G)
-Xms512m
-Xmx512m
```

![image-20210311205240763](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205240763.png)

保存退出

```
vi elasticsearch.yml
cluster.name: my-application #集群名称
node.name: node-1 #当前节点名称
path.data: /hxs/es/elasticsearch-7.5.1/data #数据存放目录
path.logs: /hxs/es/elasticsearch-7.5.1/logs #日志目录
network.host: 0.0.0.0 #允许任意ip访问
discovery.seed_hosts: ["119.45.191.248"] #所有节点ip,由于当前环境采用单节点,所以只写当
前节点ip地址
cluster.initial_master_nodes: ["node-1"] #声明master节点,由于当前是单节点环境所以
master节点就是当前节点[此处可以写ip:9200也可以写node.name]
```

![image-20210311205327567](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205327567.png)

![image-20210311205336861](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205336861.png)

![image-20210311205343438](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205343438.png)

![image-20210311205350170](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205350170.png)

保存并退出

```
cd ../../ #进入es的上级目录
```

![image-20210311205415817](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205415817.png)

```
chown -R esuser:esgroup elasticsearch-7.5.1 #给用户授权
su esuser #切换用户
```

![image-20210311205428911](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205428911.png)

```
cd elasticsearch-7.5.1/bin/ #进入bin目录
./elasticsearch 启动es
```

![image-20210311205442805](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205442805.png)

如果出现上图错误

```
su root
sysctl -w vm.max_map_count=262144
sysctl -a|grep vm.max_map_count
su esuser
```

浏览器访问ip:9200

![image-20210311205500985](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205500985.png)

es安装成功

### 2.2.2 安装ik分词器

进入es目录下的plugins目录

![image-20210311205518868](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205518868.png)

```
mkdir ik 
cd ik
```

将elasticsearch-analysis-ik-7.5.1.zip上传到ik目录

```
unzip elasticsearch-analysis-ik-7.5.1.zip #解压压缩包
# 解压完成之后最好切换回root 用户重新给文件夹授权
```

![image-20210311205553296](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205553296.png)

```
rm -rf elasticsearch-analysis-ik-7.5.1.zip #删除压缩包
```

![image-20210311205614444](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205614444.png)

重启es

```
cd ../bin/
./elasticsearch
./elasticsearch -d #后台启动
```

分词器安装成功

### 2.2.3 安装kib3ana(可视化工具)

### 2.2.3.1 什么是kibana

![image-20210311205733624](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205733624.png)

Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能， 生成各种图表，如柱形图，线状图，饼图等。

而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习 Elasticsearch的语法。

### 2.2.3.2 安装

因为Kibana依赖于node，我们的虚拟机没有安装node，而window中安装过。所以我们选择在window 下使用kibana。

版本与elasticsearch保持一致.

![image-20210311205803529](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205803529.png)

解压即可

### 2.2.3.3 配置运行

进入安装目录下的config目录，修改kibana.yml文件：

![image-20210311205911461](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205911461.png)

修改elasticsearch服务器的地址：

```
elasticsearch.hosts: ["http://119.45.191.248:9200"] #119.45.191.248替换成自己虚拟的
IP地址
```

![image-20210311205929406](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205929406.png)

![image-20210311205935879](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205935879.png)

### 2.2.4 测试分词器和kibana

浏览器输入ip:5601

![image-20210311205951124](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205951124.png)

![image-20210311205957024](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311205957024.png)

```
GET _search
{
    "query": {
    "match_all": {}
}
}
    POST _analyze
{
    "analyzer": "ik_max_word",
    "text": "我爱北京天安门"
}
```

![image-20210311210015624](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210015624.png)

![image-20210311210020767](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210020767.png)

![image-20210311210027700](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210027700.png)

### 2.2.5 倒排索引

![image-20210311210045483](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210045483.png)

**倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性 值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的 位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排索引文件，简称倒 排文件(inverted file)。**

逻辑结构部分是一个倒排索引表： 

1. 1、将要搜索的文档内容分词，所有不重复的词组成分词列表。 
2. 2、将搜索的文档最终以Document方式存储起来。 
3. 3、每个词和docment都有关联。

## 2.3 API

Elasticsearch提供了Rest风格的API，即http请求接口，而且也提供了各种语言的客户端API

### 2.3.1 Rest风格API

https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210228365.png" alt="image-20210311210228365" style="zoom:67%;" />

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210233405.png" alt="image-20210311210233405" style="zoom:67%;" />

### 2.3.2 客户端API

https://www.elastic.co/guide/en/elasticsearch/client/index.html

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210300371.png" alt="image-20210311210300371" style="zoom:50%;" />

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210312300.png" alt="image-20210311210312300" style="zoom:50%;" />

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210335501.png" alt="image-20210311210335501" style="zoom:50%;" />

## 3 操作索引

### 3.1 基本概念

elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。 对比关系：

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210402172.png" alt="image-20210311210402172" style="zoom:50%;" />

详细说明： 

- 上图列出了，数据库与es所有之间的所有名词对应关系，尤其注意一栏，index 在关系型数据库当 中是索引的意思，设置后，可提高检索效率，但在es索引库当中everything is indexed 每一列默 认都是索引，突出了，es是搜索引擎效率快

| 概念                  | 说明                                                         |
| --------------------- | ------------------------------------------------------------ |
| 索引库(index)         | index，代表许多的索引， 类比关系型数据库里的DB，是一个逻辑命名空间。 |
| 类型（type）          | 类比关系数据库里的Table。其中，一个index可以定义多个type，但一般使用 习惯仅配一个type。(7+版本已经没有type的概念了) |
| 文档 （document）     | 类比关系数据库里的一行记录(record)，document 是 Elasticsearch 里的一个 JSON 对象，包括零个或多个field。 |
| 字段（field）         | 类比关系数据库里的column，每个column都有自己的字段类型。     |
| 映射配置 （mappings） | 字段的数据类型、属性、是否索引、是否存储等特性               |

要注意的是：Elasticsearch本身就是分布式的，因此即便你只有一个节点，Elasticsearch默认也会对你 的数据进行分片和副本操作，当你向集群添加新数据时，数据也会在新加入的节点中进行平衡。

## 3.2 创建索引

### 3.2.1 语法

Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求 创建索引的请求格式：

建索引的请求格式： 

- 请求方式：PUT
- 请求路径：/索引库名 
- 请求参数：json格式：

```
{
    "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 0
    }
}
```

- settings：索引库的设置 
- number_of_shards：是数据分片数(数据分几块存储[说白了,就是将整个数据集存到不同的位 置])，如果只有一台机器，设置为1 
- number_of_replicas：数据备份数，如果只有一台机器，设置为0(不进行备份)

### 3.2.2 测试

![image-20210311210735444](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210735444.png)

注意:使用postmane测试的时候需要设置headers的ContentType的值为application/json

![image-20210311210749079](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210749079.png)

可以看到索引创建成功了。

### 3.2.3 使用kibana创建

kibana的控制台，可以对http请求进行简化，

示例： 使用kibana 创建索引库 mrshop3

![image-20210311210807901](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210807901.png)

![image-20210311210815830](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210815830.png)

### 3.3 查看索引设置

语法 

Get请求可以帮我们查看索引信息，格式：

```
GET /索引库名
```

![image-20210311210840421](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210840421.png)

```
GET * //查询所有 索引库信息
```

![image-20210311210852615](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210852615.png)

### 3.4 删除索引

删除索引使用DELETE请求

###### 语法

```
删除索引使用DELETE请求
```

###### 实例

![image-20210311210933289](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210933289.png)

当然，我们也可以用HEAD请求，查看索引是否存在：

![image-20210311210941733](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311210941733.png)

### 3.5 创建mapping

https://www.elastic.co/guide/en/elasticsearch/reference/7.5/index.html

### 3.5.1 语法

```
PUT /student
{
    "mappings": {
        "properties": {
        "name":{
        "type": "text",
        "index": true,
        "store": true,
        "analyzer": "ik_max_word"
    },
    "age":{
        "type": "integer"
    },
        "birthday":{
            "type": "date",
            "format": "yyyy-MM-dd"
        }
    }
    },
    "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 0
    }
}
```

### 3.5.1.1 字段类型

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211042686.png" alt="image-20210311211042686" style="zoom: 67%;" />

- String类型，又分两种：

  text：可分词，不可参与聚合 

  keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合

- Numerical：数值类型，分两类

  基本数据类型：long、interger、short、byte、double、float、half_float 

  浮点数的高精度类型：scaled_float

  需要指定一个精度因子，比如10或100。elasticsearch会把真实值乘以这个因子后存 储，取出时再还原。

- Date：日期类型

  elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long， 节省空间。

### 3.5.1.2 index

该 index 选项控制是否对字段值建立索引。它接受 true 或 false ，默认为 true 。未索引的字段不可 查询。

### 3.5.1.3 store

默认情况下，对字段值进行索引以使其可搜索，但不存储它们。这意味着可以查询该字段，但是无法检 索原始字段值。

### 3.5.1.4 analyzer

3.5.1.4 analyzer

![image-20210311211332718](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211332718.png)

## 3.6 获取当前索引的setting信息

```
3.6 获取当前索引的setting信息
```

![image-20210311211348178](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211348178.png)

## 3.7 获取当前索引的mapping信息

```
GET /indexName/_mapping
```

![image-20210311211405847](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211405847.png)

## 3.8 获取所有的索引mapping信息

```
GET /_all/_mapping
```

![image-20210311211429993](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211429993.png)

## 3.9 添加数据

```
POST /student/_doc/1
{
    "name":"赵俊浩",
    "age":18,
    "birthday":"2020-09-02"
}
```

![image-20210311211457525](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211457525.png)

## 3.9.1 生成随机id

注意:新增数据时如果使用自定义id那使用put请求,使用随机id使用post请求

```
POST /student/_doc
{
    "name":"赵俊浩",
    "age":18,
    "birthday":"2020-09-02"
}
```

![image-20210311211519275](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211519275.png)

## 3.9.1 生成随机id

注意:新增数据时如果使用自定义id那使用put请求,使用随机id使用post请求

```
POST /student/_doc
{
    "name":"赵俊浩",
    "age":18,
    "birthday":"2020-09-02"
}
```

![image-20210311211534342](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211534342.png)

## 3.9.2 松散的列设计

事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，

如果在增加数据时有 没有提前定义的属性字段，根据属性值自动创建

```
POST /student/_doc/3
{
    "name":"赵俊浩222",
    "age":18,
    "birthday":"2020-09-02",
    "sex":"男"
}
```

![我们定义mapping的时候没有声明sex字段也可以创建成功 通过id值查询信息](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211557622.png)

我们定义mapping的时候没有声明sex字段也可以创建成功 

通过id值查询信息

```
GET /student/_doc/3
```

![image-20210311211611609](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211611609.png)

![image-20210311211615726](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211615726.png)

## 3.10 修改数据

```
PUT /student/_doc/1
{
    "name":"赵俊浩1",
    "age":18,
    "birthday":"2020-09-02"
}
```

![image-20210311211631499](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211631499.png)

## 3.11 删除数据

```
DELETE /student/_doc/1
```

![image-20210311211644237](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211644237.png)

## 4 查询

我们从4块来讲查询： 

- 基本查询 
- _source 
- 过滤 
- 结果过滤 
- 高级查询 
- 排序

## 4.1 基本查询

###### 基本语法

```
GET /索引库名/_search
{
    "query":{
        "查询类型":{
            "查询条件":"查询条件值"
        }
    }
}
```

GET /索引库名/_search { "query":{ "查询类型":{ "查询条件":"查询条件值" } } }

- 查询类型： 

  例如： match_all ， match ， term ， range 等等 查询条件：

- 查询条件会根据类型的不同，写法也有差异，后面详细讲解

## 4.1.1 查询所有（match_all)

###### 实例

```
GET /student/_search
    {
        "query":{
        "match_all": {}
    }
}
```

- query ：代表查询对象 
- match_all ：代表查询所有

![image-20210311211934693](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211934693.png)

- took：查询花费时间，单位是毫秒 

- time_out：是否超时 

- _shards：分片信息 

  hits：搜索结果总览对象 total：搜索到的总条数 

  max_score：所有结果中文档得分的最高分 

  hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息 

  ​	_index：索引库 

  ​	_type：文档类型 

     _id：文档id 

     _score：文档得分 

     _source：文档的源数据

## 4.1.2 匹配查询（match）

数据准备

```js
#创建索引
    PUT /

    goods {
        "mappings":{
            "properties":{
                "title":{
                    "type":"text",
                            "index":true,
                            "store":true,
                            "analyzer":"ik_max_word"
                },
                "description":{
                    "type":"text",
                            "index":true,
                            "store":true,
                            "analyzer":"ik_max_word"
                },
                "price":{
                    "type":"double"
                },
                "stock":{
                    "type":"integer"
                }
            }
        },
        "settings":{
            "number_of_shards":1,
                    "number_of_replicas":0
        }
    }
    #批量新增数据
    POST /goods/_doc/

    _bulk {
        "index":{
        }
    }

    {
        "title":"华为手机", "description":"这个是华为 mate 30 pro手
        机 "," price ":5000.00," stock ":100}
        {
            "index":{
        }
        }
        {
            "title":"苹果手机", "description":"这个是apple 11 手机", "price":5800.00, "stock":67
        }
        {
            "index":{
        }
        }
        {
            "title":"oppo手机", "description":"这个是oppo xxxx手机 "," price ":2000.00," stock ":55}
    #查询数据
            GET / goods / _search
            {
                "query":{
                "match_all":{
                }
            }
		}
```

- or关系

match 类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系

```
GET /goods/_search
{
        "query": {
        "match": {
        	"title": "华为手机 "
        }
    }
}
```

![image-20210311212437266](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212437266.png)

结果:

​	手机全部被查询出来了 

​	在上面的案例中，分词后手机不仅会查询到华为，而且与手机相关的其他品牌都会查询到，符合 “手机” 这个词条的都能查询到

- and关系

某些情况下，我们需要更精确查找，我们希望这个关系变成 and ，可以这样做：

```
GET /goods/_search
{
    "query": {
        "match": {
            "title": {"query": "华为手机","operator": "and"}
        }
    }
}
```

![image-20210311212522929](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212522929.png)

- or和and之间？

在 or 与 and 间二选一有点过于非黑即白。 如果用户给定的条件分词后有 5 个查询词项，想查找只包 含其中 4 个词的文档，该如何处理？将 operator 操作符参数设置成 and 只会将此文档排除。

有时候这正是我们期望的，但在全文搜索的大多数应用场景下，我们既想包含那些可能相关的文档，同 时又排除那些不太相关的。换句话说，我们想要处于中间某种结果。

match 查询支持 minimum_should_match 最小匹配参数， 这让我们可以指定必须匹配的词项数用来 表示一个文档是否相关。我们可以将其设置为某个具体数字，更常用的做法是将其设置为一个 百分数 ， 因为我们无法控制用户搜索时输入的单词数量：

```
GET /goods/_search
{
    "query": {
        "match": {
            "title": {"query": "华为5g手机","minimum_should_match": "50%"}
        }
    }
}
```

![image-20210311212607756](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212607756.png)

## 4.1.3 多字段查询(multi_match) multipart/form-data

multi_match 与 match 类似，不同的是它指定在多个字段中查询这个关键字

```
#新增测试数据
POST /goods/_doc
{
    "title":"戴尔电脑",
    "description":"手机可以通过usb接口连接电脑",
    "price":5000.00,
    "stock":100
}
GET /goods/_search
{
    "query": {
        "multi_match": {
            "query": "手机",
            "fields": ["title","description"]
        }
    }
}
```

![image-20210311212705357](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212705357.png)

## 4.1.4 词条匹配(term)

term 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些未分词的字符串

```
GET /goods/_search
{
    "query":{
        "term":{
            "price":2000
        }
    }
}
```

![image-20210311212822269](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212822269.png)

## 4.1.5 多词条精确匹配(terms) 

terms 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一 个值，那么这个文档满足条件

```
GET /goods/_search
{
    "query":{
        "terms": {
            "price": [
                2000,
                5000
            ]
        }
    }
}
```

![image-20210311212858607](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212858607.png)

## 4.2 结果过滤

默认情况下，elasticsearch在搜索的结果中，会把文档中保存在 _source 的所有字段都返回。 

如果我们只想获取其中的部分字段，我们可以添加 _source 的过滤

## 4.2.1 直接指定返回字段

###### 示例

```
GET /goods/_search
{
    "_source": ["title","description"],
        "query":{
        "terms": {
            "price": [
                    2000,
                    5000
            ]
        }
    }
}
```

![image-20210311212948267](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212948267.png)

## 4.2.2 指定includes和excludes

如果要查询的字段或者 不要字段过多，可以通过 包含includes， 或者 排除excludes， 

- includes：来指定想要显示的字段 

- excludes：来指定不想要显示的字段

二者都是可选的。

###### 实例

```
GET /goods/_search
{
    "_source": {
        "excludes":["title","stock"]
        },
            "query":{
                "terms": {
            "price": [
                    5000,
                    2000
            ]
        }
    }
}
```

## 4.3 高级查询

## 4.3.1 布尔组合（bool)

bool 把各种其它查询通过 must （与）、 must_not （非）、 should （或）的方式进行组合

```
GET /goods/_search
{
    "query": {
        "bool": {
        "must": [
        {
        "match": {
        "title": "华为"
        }
    },
    {
    "match": {
                    "description": "pro"
                    }
                }
            ]
        }
    }
}
```

![image-20210311213302661](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213302661.png)

```
GET /goods/_search
{
    "query": {
        "bool": {
            "must_not": [
                {
                    "match": {
                        "title": "oppo"
                    }
                }
            ]
        }
    }
}
```

![image-20210311213337788](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213337788.png)

```
GET /goods/_search
{
    "query": {
        "bool": {
            "should": [
                {
                    "match": {
                        "description": "华为"
                            }
                                },
                                {
                            "match": {
                        "description": "apple"
                    }
                }
            ]
        }
    }
}
```

![image-20210311213406721](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213406721.png)

```
GET /goods/_search
{
"query": {
"bool": {
"must": [
{
"match": {
"title": "华为"
}
},
{
"match": {
"description": "pro"
}
}
],
"must_not": [
{
"match": {
"title": "oppo"
}
}
],
"should": [
{
"match": {
"description": "华为"
}
},
{
"match": {
"description": "apple"
}
}
]
}
}
}
```

![image-20210311213906460](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213906460.png)

## 4.3.2 范围查询(range)

range 区间查询，值 >= 条件 <= 值 

例如：2000-4999之间的价格

```
GET /goods/_search
    {
        "query": {
            "range": {
                "price": {
                    "gte": 2000,
                    "lte": 4999
            }
        }
    }
}
```

![image-20210311213932906](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213932906.png)

range 查询允许以下字符：

| 操作符 | 说明     |
| ------ | -------- |
| gt     | 大于     |
| gte    | 大于等于 |
| lt     | 小于     |
| lte    | 小于等于 |

## 4.3.3 模糊查询(fuzzy)

我们新增一个商品：

```
#新增测试数据
POST /goods/_doc
{
    "title":"huawei手机升级版",
    "description":"这个是huawei 手机的升级版",
    "price":6000.00,
    "stock":100
}
```

\#新增测试数据 POST /goods/_doc { "title":"huawei手机升级版", "description":"这个是huawei 手机的升级版", "price":6000.00, "stock":100 }

```
GET /goods/_search
{
    "query": {
        "fuzzy": {
            "title":"华为路"
        }
    }
}

```

![image-20210311214154071](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214154071.png)

我们可以通过 fuzziness 来指定允许的编辑容错距离：

```
GET /goods/_search
{
    "query": {
        "fuzzy": {
            "title":{
                "value":"华为路由",
                "fuzziness": 2
            }
        }
    }
}
```

![image-20210311214220649](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214220649.png)

## 4.4 过滤(filter)

###### 条件查询中进行过滤

所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件 影响评分，那么就不要把过滤条件作为查询条件来用。而是使用 filter 方式：

查询条件会影响文档数据的成绩优先级，如果有的条件 不希望影响成绩优先级，那么用fliter方法

```
GET /goods/_search
{
"query": {
"bool": {
"must":
{
"match": {
"title": "华为手机"
}
}
,
"filter": {
"range": {
"price": {
"gte": 2000,
"lte": 5000
}
}
}
}
}
}
```

![image-20210311214303595](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214303595.png)

![image-20210311214311722](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214311722.png)

注意： filter 中还可以再次进行 bool 组合条件过滤。

两次结果筛选到的数据是一样的，但是成绩是不一样的，不使用filter会加重成绩得分

###### 无查询条件，直接过滤

如果一次查询只有过滤，没有查询条件，不希望进行评分，我们可以使用 constant_score 取代只有 filter 语句的 bool 查询。在性能上是完全相同的，但对于提高查询简洁性和清晰度有很大帮助。

```
GET /goods/_search
{
    "query": {
        "constant_score": {
            "filter": {
            	"range": {
            		"price": {
                        "gte": 2000,
                        "lte": 5000
                        }
                    }
                },
            "boost": 1
        }
    }
}
//boost 为权重 决定了当前查询结果能的多少分
```

![image-20210311214400736](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214400736.png)

## 4.5 排序

### 4.5.1 单字段排序

指定排序方式

sort 可以让我们按照不同的字段进行排序，并且通过 order 指定排序的方式

```
GET /goods/_search
{
    "query": {
        "match": {
            "title": "华为手机"
    }
},
    "sort": [
    {
            "price": {
                "order": "desc"
            }
        }
    ]
}
```

![image-20210311214435428](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214435428.png)

## 4.5.2 多字段排序

多个组合成一个字段进行排序 

使用 title分词查询，匹配的结果首先按照评分排序，然后按照价格排序：

```
GET /goods/_search
{
    "query": {
        "match": {
            "title": "华为手机"
    }
},
    "sort": [
        {
        "_score": {
            "order": "desc"
                }
                },
                {
            "price": {"order": "desc"}
        }
    ]
}
```

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214506859.png" alt="image-20210311214506859" style="zoom: 80%;" />

## 5 聚合aggregations

聚合可以让我们极其方便的实现对数据的统计、分析。例如：

- 每个月手机的销量？ 
- 5000价格以上手机的平均价格？ 
- 每种品牌下的手机有几种？

实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果。

### 5.1 基本概念

Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫 桶 ，一个叫 度量 ：

###### 桶

桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个 桶 ，例如我们根据国籍对人 划分，可以得到 中国桶 、 英国桶 ， 日本桶 ……或者我们按照年龄段对人进行划分：

0~10,10~20,20~30,30~40等。

- Elasticsearch中提供的划分桶的方式有很多：
- Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组 
- Histogram Aggregation：根据数值阶梯分组，与日期类似 
- Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组 
- Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组 
- ……

综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中 往往会嵌套另一种聚合：metrics aggregations即度量

###### 度量（metrics）

分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在 ES中称为 度量

比较常用的一些度量聚合方式：

- Avg Aggregation：求平均值 
- Max Aggregation：求最大值 
- Min Aggregation：求最小值 
- Percentiles Aggregation：求百分比 
- Stats Aggregation：同时返回avg、max、min、sum、count等 
- Sum Aggregation：求和 
- Top hits Aggregation：求前几 
- Value Count Aggregation：求总数 
- ……

为了测试聚合，我们先批量导入一些数据

```
PUT /cars
{
"settings": {
"number_of_shards": 1,
"number_of_replicas": 0
},
"mappings": {
"properties": {
"color": {
"type": "keyword"
},
"m
ake": {
"type": "keyword"
}
}
}
}
POST /cars/_doc/_bulk
{ "index": {}}
{ "price" : 800000, "color" : "red", "make" : "大众", "sold" : "2020-10-28" }
{ "index": {}}
{ "price" : 1300000, "color" : "red", "make" : "大众", "sold" : "2020-11-05" }
{ "index": {}}
{ "price" : 300000, "color" : "green", "make" : "奔驰", "sold" : "2020-05-18" }
{ "index": {}}
{ "price" : 150000, "color" : "blue", "make" : "丰田", "sold" : "2020-07-02" }
{ "index": {}}
{ "price" : 120000, "color" : "green", "make" : "大众", "sold" : "2020-08-19" }
{ "index": {}}
{ "price" : 250000, "color" : "red", "make" : "大众", "sold" : "2020-11-05" }
{ "index": {}}
{ "price" : 350000, "color" : "red", "make" : "宝马", "sold" : "2020-01-01" }
{ "index": {}}
{ "price" : 650000, "color" : "blue", "make" : "奔驰", "sold" : "2014-02-12" }
```

## 5.2 聚合为桶

首先，我们按照 汽车的颜色 color来 划分 桶 

等同与sql中group的概念

```
GET /cars/_search
{
    "size": 0,
        "aggs": {
            "gro_color": {
                "terms": {
                    "field": "color",
                    "size": 10
            }
        }
    }
}
```

- size：查询的数据条数，0代表一条也不展示

- aggs：声明这是一个聚合查询，是aggregations的缩写

  gro_color：给这次聚合起一个名字，任意。

  terms：划分桶的方式，这里是根据词条划分

  field：划分桶的字段

  Size:默认取10条数据，现在只有4个颜色，所以说全部取出，也可以删掉

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215058323.png" alt="image-20210311215058323" style="zoom:80%;" />

- hits：查询结果 

- aggregations：聚合的结果

- gro_color：我们定义的聚合分组名称 

- buckets：查找到的桶，每个不同的color字段值都会形成一个桶

  key：这个桶对应的color字段的值 

  doc_count：这个桶中的文档数量

通过聚合的结果我们发现，目前红色数据最多

## 5.3 桶内度量

前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度 量。 例如，每种颜色下车辆的最高价格，

因此，我们需要告诉Elasticsearch 使用哪个字段 ， 使用何种度量方式 进行运算，这些信息要嵌套在 桶 内， 度量 的运算会基于 桶 内的文档进行

现在，我们为刚刚的聚合结果添加 求价格最高值的度量： 

等同于 sql中 聚合函数的概念

```
GET /cars/_search
{
    "size": 0,
        "aggs": {
            "gro_color": {
                "terms": {
                "field": "color"
                    },
                    "aggs": {
                        "max_price": {
                            "max": {
                            "field": "price"
                        }
                }
            }
        }
    }
}
```

- aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见度量也是一个聚合
- max_price：聚合的名称 
- max：度量的类型，这里是求最大值（还有min avg sum 等） f
- ield：度量运算的字段

![image-20210311215518523](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215518523.png)

## 5.4 桶内嵌套桶

刚刚的案例中，我们在桶内嵌套度量运算。事实上桶不仅可以嵌套运算， 还可以再嵌套其它桶。也就是 说在每个分组中，再分更多组。

比如：我们想统计每种颜色的汽车中，分别属于哪个制造商，按照 make 字段再进行分桶

```
GET /cars/_search
{
    "size": 0,
        "aggs": {
            "gro_color": {
                "terms": {
                    "field": "color"
                },
                "aggs": {
                    "max_price": {
                    "max": {
                        "field": "price"
                        }
                },
                "brand":{
                    "terms":{
                        "field":"make"
                    }
                }
            }
        }
    }
}
```

- 原来的color桶和max计算我们不变 
- make：在嵌套的aggs下新添一个桶，叫做brand 
- terms：桶的划分类型依然是词条 
- filed：这里根据make字段进行划分

![image-20210311215742238](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215742238.png)

- 我们可以看到，新的聚合 make 被嵌套在原来每一个 color 的桶中。 

- 每个颜色下面都根据 make 字段进行了分组 

- 我们能读取到的信息：

  红色车共有4辆 

  红色车最贵的车价格是1300000 

  其中3辆是 大众制造，1辆是宝马制造。

## 5.5 划分桶的其它方式

前面讲了，划分桶的方式有很多，例如：

- Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组 
- Histogram Aggregation：根据数值阶梯分组，与日期类似 
- Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组 
- Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组

上方的案例中，我们采用的是Terms Aggregation，词条划分桶。

接下来，我们再学习几个比较实用的：

### 5.5.1 阶梯分桶Histogram

###### 原理：

histogram是把数值类型的字段，按照一定的阶梯大小进行分组。你需要指定一个阶梯值（interval）来 划分阶梯大小。

把汽车价格区间作为分组条件，看下哪个价格区间的汽车数量，或者最高价等

###### 操作一下：

 比如，我们对汽车的价格进行分组，指定间隔interval为100000：

```
GET /cars/_search
    {
        "size": 0,
            "aggs": {
            "price": {
                "histogram": {
                    "field": "price",
                    "interval": 100000,
                    "min_doc_count": 1
            }
        }
    }
}
```

min_doc_count:去除没有记录的结果

![image-20210311215945023](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215945023.png)

### 5.5.2 范围分桶range

范围分桶与阶梯分桶类似，也是把数字按照阶段进行分组，只不过range方式需要你自己指定每一组的 起始和结束大小。

## 6 Spring Data Elasticsearch

Elasticsearch提供的Java客户端有一些不太方便的地方：

- 很多地方需要拼接Json字符串，在java中拼接字符串有多恐怖你应该懂的 
- 需要自己把对象序列化为json存储 
- 查询到结果也需要自己反序列化为对象

因此，我们这里就不讲解原生的Elasticsearch客户端API了。 而是学习Spring提供的套件：Spring Data Elasticsearch6.1 简介

### 6.1 简介

Spring Data Elasticsearch是Spring Data项目下的一个子模块。 

查看 Spring Data的官网：https://spring.io/projects/spring-data

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220037235.png" alt="image-20210311220037235" style="zoom:50%;" /> 

**Spring Data的任务是为数据访问提供一个熟悉且一致的，基于Spring的编程模型，同时仍保留基础数 据存储的特殊特征。**

它使使用数据访问技术，关系和非关系数据库，map-reduce框架以及基于云的数据服务变得容易。这 是一个总括项目，其中包含许多特定于给定数据库的子项目。这些项目是与这些令人兴奋的技术背后的 许多公司和开发人员共同开发的。

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220103704.png" alt="image-20210311220103704" style="zoom:50%;" />

https://pring.io/projects/spring-data-elasticsearch

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220134829.png" alt="image-20210311220134829" style="zoom:50%;" />

用于Elasticsearch的Spring Data是Spring Data项目的一部分，该项目旨在为新数据存储提供熟悉且一 致的基于Spring的编程模型，同时保留特定于存储的功能。

Spring Data Elasticsearch项目提供了与Elasticsearch搜索引擎的集成。Spring Data Elasticsearch的 关键功能区域是以POJO为中心的模型，用于与Elastichsearch文档进行交互并轻松编写存储库样式数据 访问层。

特征 

- Spring配置支持使用基于Java的 @Configuration 类或ES客户端实例的XML名称空间。 
- ElasticsearchTemplate 帮助程序类，可提高执行常规ES操作的效率。包括文档和POJO之间的 集成对象映射。 
- 与Spring的转换服务集成的功能丰富的对象映射 
- 基于注释的映射元数据，但可扩展以支持其他元数据格式 
- Repository 接口的自动实现，包括对自定义查找器方法的支持。 CDI对存储库的支持

## 6.2 ESDemo 

### 6.2.1 新建项目 

### 6.2.2 pom.xml

```java
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.1.RELEASE</version>
</parent>
    
<dependencies>
    
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
</dependency>
    
<dependency>
    <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
    
</dependencies>

```

### 6.2.3 application.yml

```
spring:
    elasticsearch:
        rest:
            uris: ip地址:9200
```

### 6.2.4 启动类

```java
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
    /**
     * @ClassName RunTestEsApplication
     * @Description: TODO
     * @Author shenyaqi
     * @Date 2020/9/3
     * @Version V1.0
     **/
    @SpringBootApplication
    public class RunTestEsApplication {
        public static void main(String[] args) {
            SpringApplication.run(RunTestEsApplication.class);
        }
    }
```

### 6.2.5 entity

```
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldType;
/**
 * @ClassName entity
 * @Description: TODO
 * @Author shenyaqi
 * @Date 2020/9/3
 * @Version V1.0
 **/
//声明当前类是一个文档(indexName="索引名称", shards="索引的分片数",replicas="索引的副本
数")
@Document(indexName = "goods",shards = 1,replicas = 0)
public class GoodsEntity {
    @Id
    private Long id;
    @Field(type = FieldType.Text, analyzer = "ik_max_word")
    private String title; //标题
    @Field(type = FieldType.Keyword)
    private String category;// 分类
    @Field(type = FieldType.Keyword)
    private String brand; // 品牌
    @Field(type = FieldType.Double)
    private Double price; // 价格
    //index = false 不参与索引搜索
/*
* 设置index为false的好处是，当您为文档建立索引时，Elasticsearch将不必为该字段构建反向
索引。结果，索引文档将稍快一些。同样，由于该字段在磁盘上将没有持久化的反向索引，因此您将使用更少
的磁盘空间。*/
    @Field(index = false,type = FieldType.Keyword)
    private String images; // 图片地址
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getTitle() {
        return title;
    }
    public void setTitle(String title) {
        this.title = title;
    }
    public String getCategory() {
        return category;
    }
    public void setCategory(String category) {
        this.category = category;
    }
    public String getBrand() {
        return brand;
    }
    public void setBrand(String brand) {

        this.brand = brand;
    }
    public Double getPrice() {
        return price;
    }
    public void setPrice(Double price) {
        this.price = price;
    }
    public String getImages() {
        return images;
    }
    public void setImages(String images) {
        this.images = images;
    }
    @Override
    public String toString() {
        return "GoodsEntity{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", category='" + category + '\'' +
                ", brand='" + brand + '\'' +
                ", price=" + price +
                ", images='" + images + '\'' +
                '}';
    }
}
```

### 6.2.6 新建测试类

### 6.2.6.1 测试类上的注解

```java
//让测试在Spring容器环境下执行
@RunWith(SpringRunner.class)
//声明启动类,当测试方法运行的时候会帮我们自动启动容器
@SpringBootTest(classes = { RunTestEsApplication.class})
```

### 6.2.7 测试 

### 6.2.7.1 创建索引

```java
import org.springframework.beans.factory.annotation.Autowired;

@Autowired
private ElasticsearchRestTemplate elasticsearchRestTemplate;
/*
创建索引
*/
@Test
public void createGoodsIndex(){
        IndexOperations indexOperations =
        elasticsearchRestTemplate.indexOps(IndexCoordinates.of("indexname"));
        indexOperations.create();//创建索引
//indexOperations.exists() 判断索引是否存在
        System.out.println(indexOperations.exists()?"索引创建成功":"索引创建失败");
        }

```

### 6.2.7.2 创建映射

```java
/*
创建映射
*/
@Test
public void createGoodsMapping(){
//此构造函数会检查有没有索引存在,如果没有则创建该索引,如果有则使用原来的索引
        IndexOperations indexOperations = elasticsearchRestTemplate.indexOps(GoodsEntity.class);
        indexOperations.createMapping();//创建映射,不调用此函数也可以创建映射,这就是高
        版本的强大之处
        System.out.println("映射创建成功");
        }

```

### 6.2.7.3 删除索引

```java
/*
删除索引
*/
@Test
public void deleteGoodsIndex(){
    IndexOperations indexOperations =
    elasticsearchRestTemplate.indexOps(GoodsEntity.class);
    indexOperations.delete();
    System.out.println("索引删除成功");
}
```

### 6.2.7.4 新增文档 

### 6.2.7.4.1 新建GoodsEsRepository

```javass
import com.mr.entity.GoodsEntity;
import
        org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
/**
 * @ClassName GoodsEsRepository
 * @Description: TODO
 * @Author shenyaqi
 * @Date 2020/9/3
 * @Version V1.0
 **/
public interface GoodsEsRepository extends
        ElasticsearchRepository<GoodsEntity,Long> {
}

```

### 6.2.7.4.2 注入repository

```java
@Resource
private GoodsEsRepository goodsEsRepository;
```

### 6.2.7.4.3 新增

```java
/*
新增文档
*/
@Test
public void saveData(){
    GoodsEntity entity = new GoodsEntity();
    entity.setId(1L);
    entity.setBrand("小米");
    entity.setCategory("手机");
    entity.setImages("xiaomi.jpg");
    entity.setPrice(1000D);
    entity.setTitle("小米3");
    goodsEsRepository.save(entity);
    System.out.println("新增成功");
}
```

### 6.2.7.5 批量新增

```java
/*
批量新增文档
*/
@Test
public void saveAllData(){
    GoodsEntity entity=new GoodsEntity();
    entity.setId(2L);
    entity.setBrand("苹果");
    entity.setCategory("手机");
    entity.setImages("pingguo.jpg");
    entity.setPrice(5000D);
}
        /*
批量新增文档
*/
@Test
public void saveAllData(){
    GoodsEntity entity=new GoodsEntity();
    entity.setId(2L);
    entity.setBrand("苹果");
    entity.setCategory("手机");
    entity.setImages("pingguo.jpg");
    entity.setPrice(5000D);
}
```

### 6.2.7.6 更新文档

```java
/*
更新文档
*/
@Test
public void updateData(){
    GoodsEntity entity = new GoodsEntity();
    entity.setId(1L);
    entity.setBrand("小米");
    entity.setCategory("手机");
    entity.setImages("xiaomi.jpg");
    entity.setPrice(1000D);
    entity.setTitle("小米3");
    goodsEsRepository.save(entity);
    System.out.println("修改成功");
}
```

### 6.2.7.7 删除文档

```java
/*
删除文档
*/
@Test
public void delData(){
    GoodsEntity entity = new GoodsEntity();
    entity.setId(1L);
    goodsEsRepository.delete(entity);
    System.out.println("删除成功");
}

```

### 6.2.7.8 查询所有

```java
/*
查询所有
*/
@Test
public void searchAll(){
    //查询总条数
    long count = goodsEsRepository.count();
    System.out.println(count);
    //查询所有数据
    Iterable<GoodsEntity> all = goodsEsRepository.findAll();
    all.forEach(goods -> {
        System.out.println(goods);
    });
}

```

### 6.2.7.9 条件查询 

### 6.2.7.9.1 GoodsEsRepository

```java
List<GoodsEntity> findAllByAndTitle(String title);
List<GoodsEntity> findByAndPriceBetween(Double start,Double end);
```

### 6.2.7.9.2 条件查询

```java
/*
条件查询
*/
@Test
public void searchByParam(){
    List<GoodsEntity> allByAndTitle = goodsEsRepository.findAllByAndTitle("手机");
    System.out.println(allByAndTitle);
    System.out.println("===============================");
    List<GoodsEntity> byAndPriceBetween =
    goodsEsRepository.findByAndPriceBetween(1000D, 3000D);
    System.out.println(byAndPriceBetween);
}
```

### 6.2.7.10 自定义查寻

```java
/*
自定义查询
*/
@Test
public void customizeSearch(){
    NativeSearchQueryBuilder queryBuilder=new NativeSearchQueryBuilder();
    queryBuilder.withQuery(
        QueryBuilders.boolQuery()
        .must(QueryBuilders.matchQuery("title","华为"))
        .must(QueryBuilders.rangeQuery("price").gte(1000).lte(10000))
    );
    //排序
    queryBuilder.withSort(SortBuilders.fieldSort("price").order(SortOrder.DESC));
    //分页
    //当前页 -1
    queryBuilder.withPageable(PageRequest.of(0,10));
    SearchHits<GoodsEntity> search=elasticsearchRestTemplate.search(queryBuilder.build(),GoodsEntity.class);
    search.getSearchHits().stream().forEach(hit->{
        System.out.println(hit.getContent());
    });
}
```

### 6.2.7.11 高亮

```java
/*
高亮
*/
@Test
public void customizeSearchHighLight(){
        NativeSearchQueryBuilder queryBuilder=new NativeSearchQueryBuilder();
//构建高亮查询
        HighlightBuilder highlightBuilder=new HighlightBuilder();
        HighlightBuilder.Field title=new HighlightBuilder.Field("title");
        title.preTags("<span style='color:red'>");
        title.postTags("</span>");
        highlightBuilder.field(title);
        queryBuilder.withHighlightBuilder(highlightBuilder);//设置高亮
        queryBuilder.withQuery(
        QueryBuilders.boolQuery()
            .must(QueryBuilders.matchQuery("title","华为手机"))
            .must(QueryBuilders.rangeQuery("price").gte(1000).lte(10000))
        );
    
        queryBuilder.withSort(SortBuilders.fieldSort("price").order(SortOrder.DESC));
        queryBuilder.withPageable(PageRequest.of(0,2));
        SearchHits<GoodsEntity> search = elasticsearchRestTemplate.search(queryBuilder.build(),GoodsEntity.class);
        List<SearchHit<GoodsEntity>>searchHits=search.getSearchHits();
//重新设置title
        List<SearchHit<GoodsEntity>>result=searchHits.stream().map(hit->{
        Map<String, List<String>>highlightFields=
        hit.getHighlightFields();
        hit.getContent().setTitle(highlightFields.get("title").get(0));
        return hit;
        }).collect(Collectors.toList());
            System.out.println(result);
        }
```

### 6.2.7.12 高亮工具类封装	

```java
import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;
import org.springframework.data.elasticsearch.core.SearchHit;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
 * @ClassName ESHighLightUtil
 * @Description: TODO
 * @Author shenyaqi
 * @Date 2020/9/4
 * @Version V1.0
 **/
public class ESHighLightUtil<T> {
    //构建高亮字段buiilder
    public static HighlightBuilder getHighlightBuilder(String ...highLightField)
    {
        HighlightBuilder highlightBuilder = new HighlightBuilder();
        Arrays.asList(highLightField).forEach(hlf -> {
            HighlightBuilder.Field field = new HighlightBuilder.Field(hlf);
            field.preTags("<span style='color:red'>");
            field.postTags("</span>");
            highlightBuilder.field(field);//这个值不会被覆盖,看源码
        });
        return highlightBuilder;
    }
    //将返回的内容替换成高亮
    public static <T> List<SearchHit<T>> getHighLightHit(List<SearchHit<T>>
                                                                 list){
        return list.stream().map(hit -> {
//得到高亮字段
            Map<String, List<String>> highlightFields =
                    hit.getHighlightFields();
            highlightFields.forEach((key,value) -> {
                try {
                    T content = hit.getContent();//当前文档 T为当前文档类型
//content.getClass()获取当前文档类型,并且得到排序字段的set方法
//注意这种首字母大写的方式效率非常低,大数据环境下绝对不允许,但是可以实现
                    效果
//可以参考ascll表来实现首字母大写
                    Method method = content.getClass().getMethod("set" +
                            String.valueOf(key.charAt(0)).toUpperCase() + key.substring(1),String.class);
//执行set方法并赋值
                    method.invoke(content,value.get(0));
                } catch (NoSuchMethodException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
            });
            return hit;
        }).collect(Collectors.toList());
    }
    //首字母大写,效率最高!
    private static String firstCharUpperCase(String name){
        char[] chars = name.toCharArray();
        chars[0] -= 32;
        return String.valueOf(chars);
    }
}
```

```java
@Test
public void customizeSearchHighLightUtil(){
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
//构建高亮查询
        queryBuilder.withHighlightBuilder(ESHighLightUtil.getHighlightBuilder("title"))
        ;//设置高亮
        queryBuilder.withQuery(
        QueryBuilders.boolQuery()
        .must(QueryBuilders.matchQuery("title","华为手机"))
        .must(QueryBuilders.rangeQuery("price").gte(1000).lte(10000))
        );
        SearchHits<GoodsEntity> search =
        elasticsearchRestTemplate.search(queryBuilder.build(), GoodsEntity.class);
        List<SearchHit<GoodsEntity>> searchHits = search.getSearchHits();
//重新设置title
        List<SearchHit<GoodsEntity>> highLightHit =
        ESHighLightUtil.getHighLightHit(searchHits);
        System.out.println(highLightHit);
        }

```

### 6.2.7.13 聚合 

### 6.2.7.13.1 聚合为桶

桶就是分组，比如这里我们按照品牌brand进行分组：

```java
@Test
public void searchAgg(){
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
        queryBuilder.addAggregation(
        AggregationBuilders.terms("brand_agg").field("brand")
        );
        SearchHits<GoodsEntity> search =
        elasticsearchRestTemplate.search(queryBuilder.build(), GoodsEntity.class);
        Aggregations aggregations = search.getAggregations();
//terms 是Aggregation的子接口
//Aggregation brand_agg = aggregations.get("brand_agg");/
        Terms terms = aggregations.get("brand_agg");
        List<? extends Terms.Bucket> buckets = terms.getBuckets();
        buckets.forEach(bucket -> {
        System.out.println(bucket.getKeyAsString() + ":" +
        bucket.getDocCount());
        });
        System.out.println(search);
}
```

### 6.2.7.13.2 嵌套聚合，聚合函数值

```java
/*
聚合函数
*/

import org.elasticsearch.search.aggregations.bucket.terms.Terms;

@Test
public void searchAggMethod(){
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
        queryBuilder.addAggregation(
        AggregationBuilders.terms("brand_agg")
        .field("brand")
//聚合函数
        .subAggregation(AggregationBuilders.max("max_price").field("price"))
        );
        SearchHits<GoodsEntity> search =
        elasticsearchRestTemplate.search(queryBuilder.build(), GoodsEntity.class);
        Aggregations aggregations = search.getAggregations();
        Terms terms = aggregations.get("brand_agg");
        List<? extends Terms.Bucket> buckets = terms.getBuckets();
        buckets.forEach(bucket -> {
        System.out.println(bucket.getKeyAsString() + ":" +
        bucket.getDocCount());
//获取聚合
        Aggregations aggregations1 = bucket.getAggregations();
//得到map
        Map<String, Aggregation> map = aggregations1.asMap();
        map.forEach((key,value) -> {
//需要强转,为什么?
//通过debug我们知道这个value的值是ParsedMax,ParsedMax是一个类(实现类),
        通过层层关系查找到最后他实现的接口是Aggregation,
//接口类型转实现类需要强转
//上面的Terms是Aggregation的子接口,所以Terms不需要强转
        ParsedMax v = (ParsedMax) value;
        System.out.println("key:" + key + "value:" + v.getValue());
        });
        });
```

# 7-搜索search

### 2 门户网站 

![image-20210311204005542](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204005542.png)

​	

​							![image-20210311204033335](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204033335.png)



![image-20210311204047314](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311204047314.png)

​	

```java
"liveServer.settings.port": 9002
```

#### hosts文件

```java
127.0.0.1 www.mrshop.com
```

#### nginx.conf

```
server {
    listen 80;
    server_name www.mrshop.com;
    location / {
        proxy_pass http://127.0.0.1:9002;
        proxy_connect_timeout 600;
        proxy_read_timeout 600;
    }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
        root html;
    }
}
```

## 后台搭建项目

注意spring-boot版本必须为2.3.1

## 3.1 mingrui-shop-service-api

### 3.1.1 pom.xml

```java
    <!--2.3版本之后web删除了验证插件-->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <!--feign get请求需要使用@SpringQueryMap注解-->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>

```

### 3.1.2 新建项目mingrui-shop-service-api-search

### 3.1.2.1 pom.xml

```java
<dependencies>
    <dependency>
    <groupId>org.springframework.boot</groupId>
    	<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
    </dependency>
</dependencies>
```

### 3.1.2.2 新建包com.baidu.shop.document

### 3.1.2.3 在包下新建类GoodsDoc

```java
import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldType;
import java.util.Date;
import java.util.List;
import java.util.Map;
/**
* @ClassName GoodsDoc
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/16
* @Version V1.0
**/
@Document(indexName = "goods",shards = 1,replicas = 0)
@Data
public class GoodsDoc {
        @Id
        private Long id;
        @Field(type = FieldType.Text, analyzer = "ik_max_word")
        private String title;
        @Field(type = FieldType.Text, analyzer = "ik_max_word")
        private String brandName;
        @Field(type = FieldType.Text, analyzer = "ik_max_word")
        private String categoryName;
        @Field(type = FieldType.Keyword, index = false)
        private String subTitle;
        private Long brandId;
        private Long cid1;
        private Long cid2;
        private Long cid3;
        private Date createTime;
        private List<Long> price;
        @Field(type = FieldType.Keyword, index = false)
        private String skus;
        //规格
        private Map<String, Object> specs;
}

```

### 3.1.2.4 com.baidu.shop下新建包service

### 3.1.2.5 在service包下新建ShopElasticsearchService

```java
import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
/**
* @ClassName ShopElasticsearchServicec
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/5
* @Version V1.0
**/
@Api(tags = "es接口")
public interface ShopElasticsearchService {
    
    @ApiOperation(value = "获取商品信息测试")
    @GetMapping(value = "es/goodsInfo")
    Result<JSONObject> esGoodsInfo();
}
```

### 3.1.2.6 在com.baidu.shop下新建config/MrSwagger2Config

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
/**
* @ClassName MrSwagger2Config
* @Description: TODO
* @Author shenyaqi
* @Date 2020/8/17
* @Version V1.0
**/
@Configuration
@EnableSwagger2
public class MrSwagger2Config {
    @Bean
    public Docket createRestApi(){
    return new Docket(DocumentationType.SWAGGER_2)
            .apiInfo(this.apiInfo())
            .select()
            .apis(RequestHandlerSelectors.basePackage("com.baidu"))
            .paths(PathSelectors.any())
            .build();
    }
    private ApiInfo apiInfo(){
    return new ApiInfoBuilder()
            //标题
            .title("明瑞SWAGGER2标题")
            //条款地址
            .termsOfServiceUrl("http://www.baidu.com")
            //联系方式-->有String参数的方法但是已经过时，所以不推荐使用
            .contact(new
            Contact("shenyaqi","baidu.com","shenyaqiii@163.com"))
            //版本
            .version("v1.0")
            //项目描述
            .description("描述")
            //创建API基本信息
    		.build();
    }
}

```

### 3.2 mingrui-shop-common-core

### 3.2.1 pom.xml

```
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
</dependency>
```

### 3.2.2 utils包下新建ESHighLightUtil

```java
import org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;
import org.springframework.data.elasticsearch.core.SearchHit;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
* @ClassName ESHighLightUtil
* @Description: TODO
* @Author shenyaqi
* @Date 2021/3/1
* @Version V1.0
**/
public class ESHighLightUtil {
    //构建高亮字段buiilder
    public static HighlightBuilder getHighlightBuilder(String ...highLightField){
    
        HighlightBuilder highlightBuilder = new HighlightBuilder();
        Arrays.asList(highLightField).forEach(hlf -> {
        HighlightBuilder.Field field = new HighlightBuilder.Field(hlf);
        field.preTags("<span style='color:red'>");
        field.postTags("</span>");
        highlightBuilder.field(field);//这个值不会被覆盖,看源码
        });
        return highlightBuilder;
    }
    //将返回的内容替换成高亮
    public static <T> List<SearchHit<T>> getHighLightHit(List<SearchHit<T>>list){
        return list.stream().map(hit -> {
        //得到高亮字段
        Map<String, List<String>> highlightFields =
        hit.getHighlightFields();
        highlightFields.forEach((key,value) -> {
        try {
        T content = hit.getContent();//当前文档 T为当前文档类型
        //content.getClass()获取当前文档类型,并且得到排序字段的set方法
        //注意这种首字母大写的方式效率非常低,大数据环境下绝对不允许,但是可以实现
        效果
        //可以参考ascll表来实现首字母大写
        Method method = content.getClass().getMethod("set" +
        String.valueOf(key.charAt(0)).toUpperCase() + key.substring(1),String.class);
        //执行set方法并赋值
            method.invoke(content,value.get(0));
            } catch (NoSuchMethodException e) {
            e.printStackTrace();
            } catch (IllegalAccessException e) {
            e.printStackTrace();
            } catch (InvocationTargetException e) {
            e.printStackTrace();
            }
            });
            return hit;
            }).collect(Collectors.toList());
            }
            //首字母大写,效率最高!
        private static String firstCharUpperCase(String name){
        char[] chars = name.toCharArray();
        chars[0] -= 32;
        return String.valueOf(chars);
    }
}
```

### 3.3 mingrui-shop-service

### 3.3.1 新建项目mingrui-shop-service-search

### 3.3.2 pom.xml

```java
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>
    <dependency>
        <groupId>com.baidu</groupId>
        <artifactId>mingrui-shop-service-api-search</artifactId>
        <version>1.0-SNAPSHOT</version>
    </dependency>
</dependencies>
```

### 3.3.3 application.yml

```
server:
  port: 8300
  
spring:
  elasticsearch:
    rest:
      uris: 119.45.191.248:9200
  application:
    name: search-server
```

### 3.3.4 新建包com.baidu

### 3.3.5 新建启动类RunSearchServerApplication

```
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
/**
* @ClassName RunSearchServerApplication
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/16
* @Version V1.0
**/
//exclude = {DataSourceAutoConfiguration.class} 不加载数据源的配置
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
@EnableEurekaClient
@EnableFeignClients
public class RunSearchServerApplication {

public static void main(String[] args) {
SpringApplication.run(RunSearchServerApplication.class);
  }
}

```

### 3.3.5 新建com.baidu.shop.feign

### 3.3.6 包下新建GoodsFeign

```java
import com.baidu.shop.service.GoodsService;
import org.springframework.cloud.openfeign.FeignClient;
/**
* @ClassName GoodsFeign
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/5
* @Version V1.0
**/
@FeignClient(value = "xxx-server")
public interface GoodsFeign extends GoodsService {
}

```

### 3.3.7 新建com.baidu.shop.service.impl

### 3.3.8 在包下新建ShopElasticsearchServiceImpl

```java
import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.dto.SpuDTO;
import com.baidu.shop.feign.GoodsFeign;
import com.baidu.shop.service.ShopElasticsearchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;
/**
* @ClassName ShopElasticsearchServiceImpl
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/5
* @Version V1.0
**/
@RestController
public class ShopElasticsearchServiceImpl extends BaseApiService implements ShopElasticsearchService {
        @Autowired
        private GoodsFeign goodsFeign;
        @Override
        public Result<JSONObject> esGoodsInfo() {
        SpuDTO spuDTO = new SpuDTO();
        spuDTO.setPage(1);
        spuDTO.setRows(5);
        Result<Map<String, Object>> spuInfo = goodsFeign.getSpuInfo(spuDTO);
        System.out.println(spuInfo);
        return null;
    }
}

```

### 3.4 mingrui-shop-service-xxx

### 3.4.1 GoodsServiceImpl

getSpuInfo需要增加分页信息的判断

```java
if(spuDTO.getPage() != null && spuDTO.getRows() != null)
PageHelper.startPage(spuDTO.getPage(),spuDTO.getRows());
```

## 4 mysql数据迁移到es(数据准备)

### 4.1 spu和sku数据填充

### 4.1.1 GoodsService

```java
@ApiOperation(value = "获取spu详情信息")
@GetMapping(value = "goods/getSpuDetailBydSpu")
public Result<SpuDetailEntity> getSpuDetailBydSpu(@RequestParam Integer
spuId);
@ApiOperation(value = "获取sku信息")
@GetMapping(value = "goods/getSkuBySpuId")
Result<List<SkuDTO>> getSkuBySpuId(@RequestParam Integer spuId);
```

### 4.1.2 ShopElasticsearchServiceImpl

```
    @Override
    public Result<JSONObject> esGoodsInfo() {
            SpuDTO spuDTO = new SpuDTO();
            spuDTO.setPage(1);
            spuDTO.setRows(5);
        Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(spuDTO);
        log.info("goodsFeign.getSpuInfo --> {}",spuInfo);
        if (spuInfo.getCode() == 200) {
        List<GoodsDoc> docList = spuInfo.getData().stream().map(spu -> {
        Integer spuId = spu.getId();
        GoodsDoc goodsDoc = new GoodsDoc();
            //spu信息填充
            goodsDoc.setId(spuId.longValue());
            goodsDoc.setCid1(spu.getCid1().longValue());
            goodsDoc.setCid2(spu.getCid2().longValue());
            goodsDoc.setCid3(spu.getCid3().longValue());
            goodsDoc.setCreateTime(spu.getCreateTime());
            goodsDoc.setSubTitle(spu.getSubTitle());
        //可搜索的数据
        goodsDoc.setTitle(spu.getTitle());
        goodsDoc.setBrandName(spu.getBrandName());
        goodsDoc.setCategoryName(spu.getCategoryName());
        //sku数据填充
        Result<List<SkuDTO>> skuResult =
        goodsFeign.getSkuBySpuId(spuId);
        if(skuResult.getCode() == 200){
             List<SkuDTO> skuList = skuResult.getData();
             List<Long> priceList = new ArrayList<>();
             List<Map<String, Object>> skuListMap =
        skuList.stream().map(sku -> {
        Map<String, Object> map = new HashMap<>();
        map.put("id", sku.getId());
        map.put("title", sku.getTitle());
        map.put("image", sku.getImages());
        map.put("price", sku.getPrice());
        priceList.add(sku.getPrice().longValue());
        return map;
        }).collect(Collectors.toList());
            goodsDoc.setPrice(priceList);
            goodsDoc.setSkus(JSONUtil.toJsonString(skuListMap));
        }
        //规格数据填充
        return goodsDoc;
        }).collect(Collectors.toList());
        log.info("docListInfo --> {}",docList);
        }
        return null;
    }
```

### 4.2 规格数据填充

现在会出现一个问题,那就是feign 重复的问题 多个feign的name相同肯定是不行的,这个问题就相当于有多个相同的@RequestMapping一样 理论上如果大家的电脑内存足够大,然后我们每一个模块就是一个服务,是绝对不会出现这个问题的就比如说category-service,brand-service,....... 但是我们得尊重现实 所以我们需要解决一下这个问题 在@FeignClient注解上增加属性contextId声明一下上下文的id,不管value属性的值是否一样,只要 contextId不一样就没有问题 但是强烈不推荐大家这么做,如果大家在公司搭建springcloud框架的话,一定是将模块服务化

```java
@FeignClient(value = "xxx-server",contextId = "SpecificationService")
public interface SpecificationFeign extends SpecificationService {
}
```

```java
@FeignClient(contextId = "GoodsService", value = "xxx-server")
@FeignClient(contextId = "SpecificationService", value = "xxx-server")
```

### 4.2.1 SpecificationService

```java
@ApiOperation(value = "查询规格参数")
@GetMapping(value = "specparam/getSpecParamInfo")
public Result<List<SpecParamEntity>> getSpecParamInfo(@SpringQueryMap
SpecParamDTO specParamDTO);
```

### 4.2.2 JSONUtil

```java
public static Map<String, String> toMapValueString(String json) {

	Map<String, String> map = gson.fromJson(json, new TypeToken<Map<String,
String>>() {
		}.getType());
		return map;
}

public static Map<String, List<String>> toMapValueStrList(String json) {

		Map<String, List<String>> map = gson.fromJson(json, new
TypeToken<Map<String, List<String>>>() {}.getType());

		return map;
}
```

### 4.3.3 ShopElasticsearchServiceImpl

```java
    @Override
    public Result<JSONObject> esGoodsInfo() {
        SpuDTO spuDTO = new SpuDTO();
        spuDTO.setPage(1);
        spuDTO.setRows(5);
        Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(spuDTO);
        
        log.info("goodsFeign.getSpuInfo --> {}",spuInfo);
        if (spuInfo.getCode() == 200) {
        
            List<GoodsDoc> docList = spuInfo.getData().stream().map(spu -> {
                Integer spuId = spu.getId();
                GoodsDoc goodsDoc = new GoodsDoc();
                //spu信息填充
                goodsDoc.setId(spuId.longValue());
                goodsDoc.setCid1(spu.getCid1().longValue());
                goodsDoc.setCid2(spu.getCid2().longValue());	
                goodsDoc.setCid3(spu.getCid3().longValue());
                goodsDoc.setCreateTime(spu.getCreateTime());
                goodsDoc.setSubTitle(spu.getSubTitle());
                //可搜索的数据
                goodsDoc.setTitle(spu.getTitle());
                goodsDoc.setBrandName(spu.getBrandName());
                goodsDoc.setCategoryName(spu.getCategoryName());
                //sku数据填充
                Result<List<SkuDTO>> skuResult = goodsFeign.getSkuBySpuId(spuId);
                if(skuResult.getCode() == 200){
                List<SkuDTO> skuList = skuResult.getData();
                List<Long> priceList = new ArrayList<>();
                List<Map<String, Object>> skuListMap = skuList.stream().map(sku -> {
                Map<String, Object> map = new HashMap<>();
                map.put("id", sku.getId());
                map.put("title", sku.getTitle());
                map.put("image", sku.getImages());
                map.put("price", sku.getPrice());
                priceList.add(sku.getPrice().longValue());
                return map;
                }).collect(Collectors.toList());
                    goodsDoc.setPrice(priceList);
                    goodsDoc.setSkus(JSONUtil.toJsonString(skuListMap));
                }
                    //规格数据填充
                    //获取规格参数
                    SpecParamDTO specParamDTO = new SpecParamDTO();
                    specParamDTO.setCid(spu.getCid3());
                    specParamDTO.setSearching(1);//只查询是为查询属性的规格参数
                    Result<List<SpecParamEntity>> specParamInfo =
                    specificationFeign.getSpecParamInfo(specParamDTO);
                    if(specParamInfo.getCode() == 200){
                    //获取Spudetail数据
                    Result<SpuDetailEntity> spuDetailBydSpu =
                    goodsFeign.getSpuDetailBydSpu(spuId);
                    if(spuDetailBydSpu.getCode() == 200){
                SpuDetailEntity spuDetail = spuDetailBydSpu.getData();
                //将通用规格转换为Map
                String genericSpec = spuDetail.getGenericSpec();
                Map<String, String> genericSpecMap =
                JSONUtil.toMapValueString(genericSpec);
                //特殊规格转换为map,值为List,因为有可能会有多个例如:颜色
                String specialSpec = spuDetail.getSpecialSpec();
                Map<String, List<String>> specialSpecMap =
                JSONUtil.toMapValueStrList(specialSpec);
                //存放数据的map集合
                Map<String, Object> specs = new HashMap<>();
                specParamInfo.getData().stream().forEach(specParam -> {
                //将对应的规格名称和值放到Map集合中
                if(specParam.getGeneric() == 1){//通用规格
                specs.put(specParam.getName(),genericSpecMap.get(specParam.getId() + ""));
                }else{//特殊规格
                specs.put(specParam.getName(),specialSpecMap.get(specParam.getId() + ""));
               }
               });
                goodsDoc.setSpecs(specs);
               }
              }
                	return goodsDoc;
              }).collect(Collectors.toList());
               	 	log.info("docListInfo --> {}",docList);
            }
               return null;
        }

```

### 4.3 数值范围数据处理

![image-20210311211502482](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211502482.png)

```java
@Override
	public Result<JSONObject> esGoodsInfo() {
        SpuDTO spuDTO = new SpuDTO();
        spuDTO.setPage(1);
        spuDTO.setRows(5);
        
		Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(spuDTO);
		
        log.info("goodsFeign.getSpuInfo --> {}",spuInfo);
        
		if (spuInfo.getCode() == 200) {
		
			List<GoodsDoc> docList = spuInfo.getData().stream().map(spu -> {
			
			Integer spuId = spu.getId();
			
			GoodsDoc goodsDoc = new GoodsDoc();
            //spu信息填充
            goodsDoc.setId(spuId.longValue());
            goodsDoc.setCid1(spu.getCid1().longValue());
            goodsDoc.setCid2(spu.getCid2().longValue());
            goodsDoc.setCid3(spu.getCid3().longValue());
            goodsDoc.setCreateTime(spu.getCreateTime());
            goodsDoc.setSubTitle(spu.getSubTitle());
            //可搜索的数据
            goodsDoc.setTitle(spu.getTitle());
            goodsDoc.setBrandName(spu.getBrandName());
            goodsDoc.setCategoryName(spu.getCategoryName());
            //sku数据填充
            Result<List<SkuDTO>> skuResult = goodsFeign.getSkuBySpuId(spuId);
            if(skuResult.getCode() == 200){
            List<SkuDTO> skuList = skuResult.getData();
            List<Long> priceList = new ArrayList<>();
            
            List<Map<String, Object>> skuListMap = skuList.stream().map(sku -> {
            Map<String, Object> map = new HashMap<>();
            map.put("id", sku.getId());
            map.put("title", sku.getTitle());
            map.put("image", sku.getImages());
            map.put("price", sku.getPrice());
            priceList.add(sku.getPrice().longValue());
            
            	return map;
            	
            }).collect(Collectors.toList());
            goodsDoc.setPrice(priceList);
            goodsDoc.setSkus(JSONUtil.toJsonString(skuListMap));
            }
            //规格数据填充
            //获取规格参数
            SpecParamDTO specParamDTO = new SpecParamDTO();
            specParamDTO.setCid(spu.getCid3());
            specParamDTO.setSearching(1);
            Result<List<SpecParamEntity>> specParamInfo =
            specificationFeign.getSpecParamInfo(specParamDTO);
            if(specParamInfo.getCode() == 200){
            
            //获取Spudetail数据
            Result<SpuDetailEntity> spuDetailBydSpu =
            goodsFeign.getSpuDetailBydSpu(spuId);
            if(spuDetailBydSpu.getCode() == 200){
            SpuDetailEntity spuDetail = spuDetailBydSpu.getData();
            
            //将通用规格转换为Map
            String genericSpec = spuDetail.getGenericSpec();
            Map<String, String> genericSpecMap =
            JSONUtil.toMapValueString(genericSpec);
            
            //特殊规格转换为map,值为List,因为有可能会有多个例如:颜色
            String specialSpec = spuDetail.getSpecialSpec();
            Map<String, List<String>> specialSpecMap =
            JSONUtil.toMapValueStrList(specialSpec);
            
            //遍历map数据
            Map<String, Object> specs = new HashMap<>();
            specParamInfo.getData().stream().forEach(specParam -> {
            
            //将对应的规格名称和值放到Map集合中
            if(specParam.getGeneric() == 1){//通用规格
            String value =
            genericSpecMap.get(specParam.getId() + "");
            
            //将具体的值变为区间对应页面的范围
            if(specParam.getNumeric() == 1){
            if(!StringUtils.isEmpty(specParam.getSegments())){
            value =
  this.chooseSegment(value,specParam.getSegments(),specParam.getUnit() ==null?"":specParam.getUnit());
            }
            }
            	specs.put(specParam.getName(),value);
            }else{//特殊规格
            	specs.put(specParam.getName(),specialSpecMap.get(specParam.getId() + ""));
            }
            });
            	goodsDoc.setSpecs(specs);
            }
            }
           		 return goodsDoc;
            }).collect(Collectors.toList());
            	log.info("docListInfo --> {}",docList);
            }
            		return null;
            }
				private String chooseSegment(String value, String segments, String unit) {
            double val = NumberUtils.toDouble(value);
            String result = "其它";
            // 保存数值段
            for (String segment : segments.split(",")) {
            String[] segs = segment.split("-");
            // 获取数值范围
            double begin = NumberUtils.toDouble(segs[0]);
            double end = Double.MAX_VALUE;
            if(segs.length == 2){
            end = NumberUtils.toDouble(segs[1]);
            }
            // 判断是否在范围内
            if(val >= begin && val < end){
            if(segs.length == 1){
            result = segs[0] + unit + "以上";
            }else if(begin == 0){
            result = segs[1] + unit + "以下";
            }else{
            result = segment + unit;
            }
            break;
            }
            }
            return result;
            }
```

### 4.4 查询函数拆分

拆函数的时候尽量倒着拆

```java
import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.document.GoodsDoc;
import com.baidu.shop.dto.SkuDTO;
import com.baidu.shop.dto.SpecParamDTO;
import com.baidu.shop.dto.SpuDTO;
import com.baidu.shop.entity.SpecParamEntity;
import com.baidu.shop.entity.SpuDetailEntity;
import com.baidu.shop.feign.GoodsFeign;
import com.baidu.shop.feign.SpecificationFeign;
import com.baidu.shop.service.ShopElasticsearchService;
import com.baidu.shop.utils.JSONUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RestController;
import java.util.*;
import java.util.stream.Collectors;

/**
* @ClassName ShopElasticsearchServiceImpl
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/5
* @Version V1.0
**/
@RestController
@Slf4j
public class ShopElasticsearchServiceImpl extends BaseApiService implements
ShopElasticsearchService {
    @Autowired
    private GoodsFeign goodsFeign;
    
    @Autowired
    private SpecificationFeign specificationFeign;
    
    @Override
    public Result<JSONObject> esGoodsInfo() {//此函数只是单纯的获取数据商品数据,对用户是不可见的
	//分页的信息肯定不能写死,所以让调用方传递过来数据即可
    SpuDTO spuDTO = new SpuDTO();
    spuDTO.setPage(1);
    spuDTO.setRows(5);
    Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(spuDTO);
    
    log.info("goodsFeign.getSpuInfo --> {}",spuInfo);
    
    if (spuInfo.getCode() == 200) {
    List<GoodsDoc> docList = spuInfo.getData().stream().map(spu -> {
	
	Integer spuId = spu.getId();
    GoodsDoc goodsDoc = new GoodsDoc();
    //spu信息填充
    goodsDoc.setId(spuId.longValue());
    goodsDoc.setCid1(spu.getCid1().longValue());
    goodsDoc.setCid2(spu.getCid2().longValue());
    goodsDoc.setCid3(spu.getCid3().longValue());
    goodsDoc.setCreateTime(spu.getCreateTime());
    goodsDoc.setSubTitle(spu.getSubTitle());
    //可搜索的数据
    goodsDoc.setTitle(spu.getTitle());
    goodsDoc.setBrandName(spu.getBrandName());
    goodsDoc.setCategoryName(spu.getCategoryName());
    
    //sku数据填充
	List<Map<String, Object>> skuList = this.skus(spu.getId());
	
	//价格在skuList里面
    //理论上不应该这么做,性能受影响
    //但是这个理论上用户不会操作的
    goodsDoc.setPrice(this.getPrices(skuList));
    goodsDoc.setSkus(JSONUtil.toJsonString(skuList));
    //规格数据填充
    //获取规格参数
    Map<String, Object> specs = this.getSpecs(spu);
	goodsDoc.setSpecs(specs);
	return goodsDoc;
}).collect(Collectors.toList());

	log.info("docListInfo --> {}",docList);
}
	return null;
}
	private List<Long> getPrices(List<Map<String, Object>> skus){
    return skus.stream().map(sku -> {
    Integer price = (Integer) sku.get("price");
    return price.longValue();
    }).collect(Collectors.toList());
    }
    
    //获取Spec数据
        private Map<String, Object> getSpecs(SpuDTO spuDTO){
        SpecParamDTO specParamDTO = new SpecParamDTO();
        specParamDTO.setCid(spuDTO.getCid3());
        specParamDTO.setSearching(1);
        Result<List<SpecParamEntity>> specParamInfo =
        specificationFeign.getSpecParamInfo(specParamDTO);
        if(specParamInfo.getCode() == 200){
        //获取Spudetail数据
        Result<SpuDetailEntity> spuDetailBydSpu =
        goodsFeign.getSpuDetailBydSpu(spuDTO.getId());
        if(spuDetailBydSpu.getCode() == 200){
        Map<String, Object> specs = this.getSpecs(spuDetailBydSpu,
        specParamInfo);
        return specs;
        }
        }
        return null;
        }
        //方法重载
        private Map<String, Object> getSpecs(Result<SpuDetailEntity> spuDetailBydSpu
        , Result<List<SpecParamEntity>> specParamInfo){
        SpuDetailEntity spuDetail = spuDetailBydSpu.getData();
        //将通用规格转换为Map
        String genericSpec = spuDetail.getGenericSpec();
        Map<String, String> genericSpecMap =
        JSONUtil.toMapValueString(genericSpec);
        //特殊规格转换为map,值为List,因为有可能会有多个例如:颜色
        String specialSpec = spuDetail.getSpecialSpec();
        Map<String, List<String>> specialSpecMap =
        JSONUtil.toMapValueStrList(specialSpec);
        //遍历map数据
        Map<String, Object> specs = new HashMap<>();
        specParamInfo.getData().stream().forEach(specParam -> {
        //将对应的规格名称和值放到Map集合中
        if(specParam.getGeneric() == 1){//通用规格
		String value = genericSpecMap.get(specParam.getId() + "");
        //将具体的值变为区间对应页面的范围
        if(specParam.getNumeric() == 1){
        if(!StringUtils.isEmpty(specParam.getSegments())){
        //将值变成区间 //
        防止单位为null的情况
        value =
        this.chooseSegment(value,specParam.getSegments(),specParam.getUnit() ==
        null?"":specParam.getUnit());
        	}
        		}
        specs.put(specParam.getName(),value);
        }else{//特殊规格
        specs.put(specParam.getName(),specialSpecMap.get(specParam.getId() + ""));
        	}
        });
        return specs;
        	}
        private String chooseSegment(String value, String segments, String unit) {
        double val = NumberUtils.toDouble(value);
        String result = "其它";
        // 保存数值段
        for (String segment : segments.split(",")) {
        String[] segs = segment.split("-");
        // 获取数值范围
        double begin = NumberUtils.toDouble(segs[0]);
        double end = Double.MAX_VALUE;
        if(segs.length == 2){
        end = NumberUtils.toDouble(segs[1]);
       	 }
        // 判断是否在范围内
       	 if(val >= begin && val < end){
        if(segs.length == 1){
        	result = segs[0] + unit + "以上";
        }else if(begin == 0){
        result = segs[1] + unit + "以下";
        }else{
        result = segment + unit;
        }
        break;
      	  }
        }
       	 return result;
        }
      	  }
```

### 5 mysql数据迁移到es(入库)

### 5.1 提供操作ESApi

### 5.1.1 ShopElasticsearchService

将查询数据的接口删除掉 

实现类中查询数据的@Override删除掉 

查询数据的返回值为List,注意函数需要返回数据(return)

```java
//ES数据初始化-->索引创建,映射创建,mysql数据同步
@ApiOperation(value = "ES商品数据初始化-->索引创建,映射创建,mysql数据同步")
@GetMapping(value = "es/initGoodsEsData")
Result<JSONObject> initGoodsEsData();

@ApiOperation(value = "清空ES中的商品数据")
@GetMapping(value = "es/clearGoodsEsData")
Result<JSONObject> clearGoodsEsData();
```

### 5.1.2 新建repository包

### 5.1.3 新建GoodsRepository

```java
import com.baidu.shop.document.GoodsDoc;
import
org.springframework.data.elasticsearch.repository.ElasticsearchRepository;
/**
* @ClassName GoodsRepository
* @Description: TODO
* @Author shenyaqi
* @Date 2020/9/6
* @Version V1.0
**/
public interface GoodsRepository extends ElasticsearchRepository<GoodsDoc,Long>{
    
}
```

### 5.1.4 ShopElasticsearchServiceImpl

```java
        @Resource
        private ElasticsearchRestTemplate elasticsearchRestTemplate;
        
        @Resource
        private GoodsRepository goodsRepository;
        
        @Override
        public Result<JSONObject> clearGoodsEsData() {
       
		 IndexOperations index = elasticsearchRestTemplate.indexOps(GoodsDoc.class);
                if(index.exists()){
                index.delete();
        	}
       		 return this.setResultSuccess();
        }
        @Override
		public Result<JSONObject> initGoodsEsData() {
		//创建索引和映射
        IndexOperations index =
        elasticsearchRestTemplate.indexOps(GoodsDoc.class);
        if(!index.exists()){
        index.create();
        index.createMapping();
        }
        
        //查询数据
        List<GoodsDoc> goodsDocs = this.esGoodsInfo();
        //将得到的结果入库
        goodsRepository.saveAll(goodsDocs);
        //elasticsearchRestTemplate.save(goodsDocs);
        return this.setResultSuccess();
        }
```

### 5.2 mysql数据库全部迁移

上述入库操作也只是将部分数据入库了而已,在真实的环境中我们需要考虑实际情况来进行数据迁移 查询全部mysql数据肯定是不合适的(数据库压力太大) 一次查询五条数据????(这样会增加数据库和es服务的io) 所以得考虑硬件条件 以及 mysql 和 es的性能 当前我们是学习阶段,数据量不是很大,所以可以直接将mysql的数据全部查询出来,然后全部入库

### 5.2.1 initGoodsEsData方法

```java
    @Override
    public Result<JSONObject> initGoodsEsData() {
    
    //创建索引和映射
    IndexOperations index = elasticsearchRestTemplate.indexOps(GoodsDoc.class);
    	if(!index.exists()){
    	index.createMapping();
    }
    List<GoodsDoc> goodsDocs = this.esGoodsInfo();
    
    	//将得到的结果入库
        if(!goodsDocs.isEmpty()){
        goodsRepository.saveAll(goodsDocs);
    	}
   		 return this.setResultSuccess();
    }
```

### 5.2.2 esGoodsInfo方法

将分页注释掉

### 5.2.3 重置es数据

swagger-ui调用clearGoodsEsData接口清空掉es数据 swagger-ui调用initGoodsEsData重新初始化数据

### 6 搜索

### 6.1 top.js

top.html并没有什么用(在top.html写完代码后直接将这个html代码复制到了top.js的template中)

![image-20210311213251367](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213251367.png)

![image-20210311213300880](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213300880.png)

![image-20210311213307719](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213307719.png)

我们将template属性的值改一下:将top.html中的html代码复制到template的值中,需要注意的是: 不要忘记加  标签

### 6.2 search.html

![image-20210311213339850](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213339850.png)

![image-20210311213347618](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213347618.png)

### 6.2 ShopElasticsearchService

```java
@ApiOperation(value = "搜索")
@GetMapping(value = "es/search")
Result<List<GoodsDoc>> search(@RequestParam String search);
```

### 6.3 ShopElasticsearchServiceImpl

1 : 需要根据标题,分类名称,品牌名称进行查询 

2 : 需要设置高亮字段

```
@Override
public Result<List<GoodsDoc>> search(String search) {
NativeSearchQueryBuilder nativeSearchQueryBuilder = new
NativeSearchQueryBuilder();
if(StringUtils.isEmpty(search)) return this.setResultError("搜索内容不能为空");
//多字段同时查询
nativeSearchQueryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName","categoryName"));
//设置高亮字段
nativeSearchQueryBuilder.withHighlightBuilder(ESHighLightUtil.getHighlightBuilder("title"));
SearchHits<GoodsDoc> searchHits = elasticsearchRestTemplate.search(nativeSearchQueryBuilder.build(),
GoodsDoc.class);
List<SearchHit<GoodsDoc>> highLightHit = ESHighLightUtil.getHighLightHit(searchHits.getSearchHits());
List<GoodsDoc> goodsDocs = highLightHit.stream().map(hit -> hit.getContent()).collect(Collectors.toList());

return this.setResultSuccess(goodsDocs);
}

```

### 6.4 mingrui-shop-basic-zuul-serer/application.yml

将search项目加入到zuul路由中

```java
server:
  port: 8088
  
spring:
  application:
    name: eureka-zuul
zuul:
  # 声明路由
  routes:
    # 路由名称
    api-xxx:
      # 声明将所有以/api-ribbon/的请求都转发到eureka-ribbon的服务中
      path: /api-xxx/**
      serviceId: xxx-service
    # 搜索路由
    api-search:
      path: /api-search/**
      serviceId: search-server
  # 启用重试
  retryable: true
  # 包含此路径的不进行路由
  ignored-patterns: /upload/**
  # 忽略上传服务
  ignored-services:
  -upload-server
#配置负载
ribbon:
  ConnectTimeout: 250 # 连接超时时间(ms)
  ReadTimeout: 2000 # 通信超时时间(ms)
  OkToRetryOnAllOperations: true # 是否对所有操作重试
  MaxAutoRetriesNextServer: 2 # 同一服务不同实例的重试次数
  MaxAutoRetries: 1 # 同一实例的重试次数
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000 # 熔断超时时长：6000ms
eureka:
  client:

  service-url:
    defaultZone: http://localhost:8761/eureka/

```

### 6.5 一点小小的问题

![image-20210311213856490](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213856490.png)

后台返回了好多没有用的数据,为了降低网络io的压力,所以我们处理一下

```java
//设置查询出来的内容,页面上做多只需要id,title,skus
queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]
{"id","title","skus"}, null));

```

![image-20210311213927944](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213927944.png)

```java
spring:
  jackson:
    default-property-inclusion: non_null #空值不返回
```

![image-20210311213952239](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213952239.png)

### 7 搜索分页

### 7.1 search.html

![image-20210311214009696](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214009696.png)

![image-20210311214019993](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214019993.png)

![image-20210311214030940](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214030940.png)

### 7.2 ShopElasticsearchService

```
@ApiOperation(value = "搜索")
@GetMapping(value = "es/search")
Result<List<GoodsDoc>> search(@RequestParam String search,@RequestParam Integer page);
```

### 7.3 ShopElasticsearchServiceImpl

```java
@Override
public Result<List<GoodsDoc>> search(String search, Integer page) {
    NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
    if (!StringUtils.isEmpty(search)) {
    //多字段同时查询
    queryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName"
    ,"categoryName"));
    }
    queryBuilder.withPageable(PageRequest.of(page-1,10));
    //设置查询出来的内容,页面上做多只需要id,title,skus
    queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]
    {"id","title","skus"}, null));
    //设置高亮字段
    queryBuilder.withHighlightBuilder(ESHighLightUtil.getHighlightBuilder("title"))
    ;
    SearchHits<GoodsDoc> hits =
    elasticsearchRestTemplate.search(queryBuilder.build(), GoodsDoc.class);
    List<SearchHit<GoodsDoc>> highLightHit =
    ESHighLightUtil.getHighLightHit(hits.getSearchHits());
    List<GoodsDoc> goodsDocs = highLightHit.stream().map(searchHit ->
    searchHit.getContent()).collect(Collectors.toList());
    // long total = hits.getTotalHits();//总条数 47
    // Double totalD = Long.valueOf(total).doubleValue();//doule类型的总条数
    // double totalPageD = Math.ceil(totalD ;//如果有小数直接想上取整
    // int totalPage = Double.valueOf(totalPageD).intValue();//将double类型的值
    转为int类型
    Map<String, Integer> map = new HashMap<>();
    map.put("total",Long.valueOf(hits.getTotalHits()).intValue());
    map.put("totalPage",Double.valueOf(Math.ceil(Long.valueOf(hits.getTotalHits()).
    doubleValue()/ 10)).intValue());
    String message = JSONUtil.toJsonString(map);
    	return this.setResult(HTTPStatus.OK,message,goodsDocs);
}
```

# 8-搜索过滤

## 1.学习目标

- 了解过滤功能的基本思路
- 独立实现分类和品牌展示 
- 了解规格参数展示 
- 实现过滤条件筛选 
- 实现已选过滤项回显 
- 实现取消选择过滤项

## 2.过滤功能分析

![image-20210311212226040](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212226040.png)

### 整个过滤部分有3块

#### 	顶部的导航，已经选择的过滤条件展示

​			商品分类面包屑，根据用户选择的商品分类变化

​			其它已选择过滤参数

#### 	过滤条件展示，又包含3部分

​			商品分类展示 

​			品牌展示 

​			其它规格参数

#### 	展开或收起的过滤条件的按钮

## 3.实现

### 后台

#### 	brandService和categoryService分别提供通过ids查询数据 的接口

```java
	@ApiOperation(value = "通过Id集合查询品牌信息")
    @GetMapping(value = "/brand/getBrandByIdList")
    Result<List<BrandeEntity>> getBrandByIdList(@RequestParam String ids);
```

```java
 	@ApiOperation("通过Id集合查询分类")
    @GetMapping(value = "/category/getCategoryByIdList")
    Result<List<CategoryEntity>> getCategoryByIdList(@RequestParam String ids);
```

**BrandServiceImpl**   

```java
	@Override
    public Result<List<BrandeEntity>> getBrandByIdList(String ids) {
        List<Integer> idList = Arrays.asList(ids.split(",")).stream().map(idStr -> Integer.valueOf(idStr)).collect(Collectors.toList());
        List<BrandeEntity> brandeEntities = brandMapper.selectByIdList(idList);
        return this.setResultSuccess(brandeEntities);
    }
```

**CategoryServiceImpl**

```java
	@Override
    public Result<List<CategoryEntity>> getCategoryByIdList(String ids) {
        List<Integer> idList = Arrays.asList(ids.split(",")).stream().map(idStr -> Integer.valueOf(idStr)).collect(Collectors.toList());
        List<CategoryEntity> categoryEntities = categoryMapper.selectByIdList(idList);
        return this.setResultSuccess(categoryEntities);
    }
```

#### **mingrui-shop-service-api-search/pom.xml**

```html
		<dependency>
            <groupId>com.baidu</groupId>
            <artifactId>mingrui-shopservice-api-xxx</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
```

####   **api-search** **新建** **response** **包并新建** **GoodsResponse** 

```java
package com.baidu.shop.response;

import com.baidu.shop.base.Result;
import com.baidu.shop.document.GoodsDoc;
import com.baidu.shop.entity.BrandeEntity;
import com.baidu.shop.entity.CategoryEntity;
import com.baidu.shop.status.HTTPStatus;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Map;

@Data
@NoArgsConstructor
public class GoodsResponse extends Result<List<GoodsDoc>> {
    private Long total;

    private Long totalPage;

    private List<CategoryEntity> categoryList;

    private List<BrandeEntity>  brandList;

    private Map<String,List<String>> specMap;

    public GoodsResponse (Long total,Long totalPage,List<CategoryEntity> categoryList,List<BrandeEntity>  brandList,List<GoodsDoc> goodsDoc,Map<String,List<String>> specMap){
        super(HTTPStatus.OK, "",goodsDoc);
        this.total = total;
        this.totalPage = totalPage;
        this.categoryList = categoryList;
        this.brandList = brandList;
        this.specMap = specMap;
    }
}

```

####  **service-search** **项目新建** **BrandFeign** **和** **CategoryFeign**

```java
package com.baidu.shop.feign;

import com.baidu.shop.service.BrandService;
import org.springframework.cloud.openfeign.FeignClient;


@FeignClient(value = "xxx-server",contextId = "brandFeign")
public interface BrandFeign extends BrandService {
}

```

```java
package com.baidu.shop.feign;

import com.baidu.shop.service.CategoryService;
import org.springframework.cloud.openfeign.FeignClient;


@FeignClient(value = "xxx-server",contextId = "categoryFeign")
public interface CategoryFeign extends CategoryService {
}

```

#### **ShopElasticsearchServiceImpl**

```java
@Override
    public GoodsResponse search(String search, Integer page) {
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
        if (!StringUtils.isEmpty(search)) {
        //多字段同时查询
            queryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName"
                    ,"categoryName"));
        }
        queryBuilder.withPageable(PageRequest.of(page-1,10));
        //设置查询出来的内容,页面上做多只需要id,title,skus
        queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]
                {"id","title","skus"}, null));
        //设置高亮字段
        queryBuilder.withHighlightBuilder(ESHighLightUtil.getHighlightBuilder("title"))
        ;
        //聚合
        queryBuilder.addAggregation(AggregationBuilders.terms("cate_agg").field("cid3")
        );
        queryBuilder.addAggregation(AggregationBuilders.terms("brand_agg").field("brand
                Id"));
                SearchHits<GoodsDoc> hits = elasticsearchRestTemplate.search(queryBuilder.build(), GoodsDoc.class);
        List<SearchHit<GoodsDoc>> highLightHit =
                ESHighLightUtil.getHighLightHit(hits.getSearchHits());
        List<GoodsDoc> goodsDocs = highLightHit.stream().map(searchHit ->
                searchHit.getContent()).collect(Collectors.toList());
        // long total = hits.getTotalHits();//总条数 47
        // Double totalD = Long.valueOf(total).doubleValue();//doule类型的总条数
        // double totalPageD = Math.ceil(totalD ;//如果有小数直接想上取整
        // int totalPage = Double.valueOf(totalPageD).intValue();//将double类型的值转为int类型
        //获取聚合数据
        Aggregations aggregations = hits.getAggregations();
        Terms brand_agg = aggregations.get("brand_agg");
        Terms cate_agg = aggregations.get("cate_agg");
        List<? extends Terms.Bucket> brandBuckets = brand_agg.getBuckets();
        List<String> brandIdList = brandBuckets.stream().map(brandbuckt -> {
            Number keyAsNumber = brandbuckt.getKeyAsNumber();
            Integer brandId = Integer.valueOf(keyAsNumber.intValue());
            return brandId + "";//得到品牌id,并且且转为String类型,方便接下来的操作
        }).collect(Collectors.toList());
        List<? extends Terms.Bucket> cateBuckets = cate_agg.getBuckets();
        List<String> cateIdList = cateBuckets.stream().map(cateBucket -> {
            Number keyAsNumber = cateBucket.getKeyAsNumber();
            Integer cateId = Integer.valueOf(keyAsNumber.intValue());
            return cateId + "";
        }).collect(Collectors.toList());
        //通过brandid获取brand详细数据
        //String.join(分隔符,List<String>),将list集合转为,分隔的字符串
        Result<List<BrandEntity>> brandResult =
                brandFeign.getBrandByIds(String.join(",",brandIdList));
        //通过分类id获取分类详细数据
        Result<List<CategoryEntity>> cateResult =
                categoryFeign.getCateByIds(String.join(",",cateIdList));
        /*Map<String, Integer> map = new HashMap<>();
        map.put("total",Long.valueOf(hits.getTotalHits()).intValue());
        map.put("totalPage",Double.valueOf(Math.ceil(Long.valueOf(hits.getTotalHits()).
        doubleValue()/ 10)).intValue());
        String message = JSONUtil.toJsonString(map);*/
        GoodsResponse goodsResponse = new
                GoodsResponse(Long.valueOf(hits.getTotalHits()).intValue()
                ,
                Double.valueOf(Math.ceil(Long.valueOf(hits.getTotalHits()).doubleValue() /
                        10)).intValue()
                , brandResult.getData(), cateResult.getData(), goodsDocs);
        return goodsResponse;
    }
```

#### 拆方法

search这个方法代码太多了......

```java
@Override
    public GoodsResponse search(String search, Integer page) {
        NativeSearchQueryBuilder queryBuilder = this.getQueryBuilder(search,page);

        SearchHits<GoodsDoc> hits =
                elasticsearchRestTemplate.search(queryBuilder.build(), GoodsDoc.class);List<SearchHit<GoodsDoc>> highLightHit =
                ESHighLightUtil.getHighLightHit(hits.getSearchHits());
        List<GoodsDoc> goodsDocs = highLightHit.stream().map(searchHit ->
        List<GoodsDoc> goodsDocs = highLightHit.stream().map(searchHit ->
                searchHit.getContent()).collect(Collectors.toList());
        //通过品牌id获取品牌详细数据
        List<BrandEntity> brandResult =
                getBrandEntityList(hits.getAggregations());
        //通过分类id获取分类详细数据
        List<CategoryEntity> cateResult =
                getCategoryEntityList(hits.getAggregations());
        GoodsResponse goodsResponse = new
                GoodsResponse(Long.valueOf(hits.getTotalHits()).intValue()
                ,
                Double.valueOf(Math.ceil(Long.valueOf(hits.getTotalHits()).doubleValue() /
                        10)).intValue()
                , brandResult, cateResult, goodsDocs);
        return goodsResponse;
    }
    private NativeSearchQueryBuilder getQueryBuilder(String search, Integer page){
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
        if (!StringUtils.isEmpty(search)) {
        //多字段同时查询
            queryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName"
                    ,"categoryName"));
        }
        queryBuilder.withPageable(PageRequest.of(page-1,10));
        //设置查询出来的内容,页面上做多只需要id,title,skus
        queryBuilder.withSourceFilter(new FetchSourceFilter(new String[]
                {"id","title","skus"}, null));
        //设置高亮字段
        queryBuilder.withHighlightBuilder(ESHighLightUtil.getHighlightBuilder("title"))
        ;
        //聚合
        queryBuilder.addAggregation(AggregationBuilders.terms("cate_agg").field("cid3")
        );
        queryBuilder.addAggregation(AggregationBuilders.terms("brand_agg").field("brandId"));
        return queryBuilder;
    }
     private List<BrandEntity> getBrandEntityList(Aggregations aggregations){
        Terms brand_agg = aggregations.get("brand_agg");
        List<? extends Terms.Bucket> brandBuckets = brand_agg.getBuckets();
        List<String> brandIdList = brandBuckets.stream().map(brandbuckt -> {
            Number keyAsNumber = brandbuckt.getKeyAsNumber();
            Integer brandId = Integer.valueOf(keyAsNumber.intValue());
            return brandId + "";//得到品牌id,并且且转为String类型,方便接下来的操作
        }).collect(Collectors.toList());
        Result<List<BrandEntity>> brandResult =brandFeign.getBrandByIds(String.join(",",brandIdList));
        return brandResult.getData();
    }
    private List<CategoryEntity> getCategoryEntityList(Aggregations aggregations){
        Terms cate_agg = aggregations.get("cate_agg");
        List<? extends Terms.Bucket> cateBuckets = cate_agg.getBuckets();
        List<String> cateIdList = cateBuckets.stream().map(cateBucket -> {
            Number keyAsNumber = cateBucket.getKeyAsNumber();
            Integer cateId = Integer.valueOf(keyAsNumber.intValue());
            return cateId + "";
        }).collect(Collectors.toList());
        Result<List<CategoryEntity>> cateResult = categoryFeign.getCateByIds(String.join(",",cateIdList));
        return cateResult.getData();
    }

```

#### 修改获取分类信息的方法获取热度最高的分类

```java
private Map<Integer,List<CategoryEntity>> getCategoryList(Aggregations aggregations){
        Terms agg_category = aggregations.get("agg_category");

        List<? extends Terms.Bucket> categoryBuckets = agg_category.getBuckets();

        List<Long> docCount  = Arrays.asList(0L);
        List<Integer> hotCid = Arrays.asList(0);

        List<String> categoryIdList = categoryBuckets.stream().map(categoryBucket -> {
            docCount.set(0, categoryBucket.getDocCount());
            hotCid.set(0, categoryBucket.getKeyAsNumber().intValue());

            return categoryBucket.getKeyAsNumber().longValue() + "";
        }).collect(Collectors.toList());

        Result<List<CategoryEntity>> categoryResult = categoryFeign.getCategoryByIdList(String.join(",",categoryIdList));

        List<CategoryEntity> categoryList = null;
        if (categoryResult.isSuccess()){
            categoryList = categoryResult.getData();
        }

        Map<Integer,List<CategoryEntity>> map = new HashMap<>();
        map.put(hotCid.get(0),categoryList);
        return map;
    }
```

#### response中新增规格参数属性

```java
package com.baidu.shop.response;

import com.baidu.shop.base.Result;
import com.baidu.shop.document.GoodsDoc;
import com.baidu.shop.entity.BrandeEntity;
import com.baidu.shop.entity.CategoryEntity;
import com.baidu.shop.status.HTTPStatus;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Map;


@Data
@NoArgsConstructor
public class GoodsResponse extends Result<List<GoodsDoc>> {
    private Long total;

    private Long totalPage;

    private List<CategoryEntity> categoryList;

    private List<BrandeEntity>  brandList;

    private Map<String,List<String>> specMap;

    public GoodsResponse (Long total,Long totalPage,List<CategoryEntity> categoryList,List<BrandeEntity>  brandList,List<GoodsDoc> goodsDoc,Map<String,List<String>> specMap){
        super(HTTPStatus.OK, "",goodsDoc);
        this.total = total;
        this.totalPage = totalPage;
        this.categoryList = categoryList;
        this.brandList = brandList;
        this.specMap = specMap;
    }
}

```

#### search方法

```java
	@Override
    public GoodsResponse search(String search, Integer page) {
        NativeSearchQueryBuilder queryBuilder = this.getQueryBuilder(search,
                page);
        SearchHits<GoodsDoc> hits = elasticsearchRestTemplate.search(queryBuilder.build(), GoodsDoc.class);
        List<SearchHit<GoodsDoc>> highLightHit = ESHighLightUtil.getHighLightHit(hits.getSearchHits());
        List<GoodsDoc> goodsDocs = highLightHit.stream().map(searchHit ->searchHit.getContent()).collect(Collectors.toList());
        //通过品牌id获取品牌详细数据
        List<BrandEntity> brandResult =getBrandEntityList(hits.getAggregations());
        //通过分类id获取分类详细数据
        Map<Integer, List<CategoryEntity>> cateMap = this.getCategoryEntityList(hits.getAggregations());
        List<CategoryEntity> cateResult = null;
        Integer hotCid = null;
        //注意此处不能使用lambda表达式....
        for(Map.Entry<Integer,List<CategoryEntity>> entry : cateMap.entrySet()){
            hotCid = entry.getKey();
            cateResult = entry.getValue();
        }
        //通过cid获取规格参数
        Map<String, Object> specAggInfo = this.getSpecAggInfo(hotCid, search);
        GoodsResponse goodsResponse = new GoodsResponse(Long.valueOf(hits.getTotalHits()).intValue()
                ,
                Double.valueOf(Math.ceil(Long.valueOf(hits.getTotalHits()).doubleValue() /
                        10)).intValue()
                , brandResult, cateResult, goodsDocs,specAggInfo);
        return goodsResponse;
    }
```

#### 抽取出来的获取规格参数方法

```java
	private Map<String, Object> getSpecAggInfo(Integer cid,String search){
        SpecParamDTO specParamDTO = new SpecParamDTO();
        specParamDTO.setCid(cid);
        specParamDTO.setSearching(1);//只查询用于搜索的
        Result<List<SpecParamEntity>> specParamInfo = specificationFeign.getSpecParamInfo(specParamDTO);
        List<SpecParamEntity> paramList = specParamInfo.getData();
        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();
        queryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName","categoryName"));
        paramList.stream().forEach(params -> {4.5 search.html
            queryBuilder.addAggregation(AggregationBuilders.terms(params.getName()).field(" specs." + params.getName() + ".keyword"));
        });
        queryBuilder.withPageable(PageRequest.of(0,1));
        SearchHits<GoodsDoc> hits = elasticsearchRestTemplate.search(queryBuilder.build(), GoodsDoc.class);
        Aggregations aggregations = hits.getAggregations();
        Map<String, Object> map = new HashMap<>();
        paramList.stream().forEach(param -> {
            Terms terms = aggregations.get(param.getName());
            List<? extends Terms.Bucket> buckets = terms.getBuckets();
            List<String> value = buckets.stream().map(bucket ->
                    bucket.getKeyAsString()).collect(Collectors.toList());
            map.put(terms.getName(),value);
        });
        return map;
    }
```



### 前台

#### search.html

#### ![image-20210311215813857](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215813857.png)

![image-20210311215933862](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215933862.png)

![image-20210311220049750](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220049750.png)

```js
				search(){
                    const search = mrshop.parse(location.search.substring(1))
                    mrshop.http.get('/search/es/search', {
                        params: {
                            search:search.key,
                            page:this.page,
                            filter:JSON.stringify(this.filter)
                        }
                    }).then(resp => {
                        const goodsList = resp.data.data || [];
                        goodsList.forEach(goods => {
                            goods.skus = JSON.parse(goods.skus);
                            goods.selected = goods.skus[0];
                        })
                        this.goodsList = goodsList;
                        this.total = resp.data.total;
                        this.totalPage = resp.data.totalPage;
                        this.categoryList = resp.data.categoryList;
                        this.brandList = resp.data.brandList;
                        this.specMap = resp.data.specMap;
                        // console.log(resp.data)
                        // const msgObj = JSON.parse(resp.data.message)
                        // console.log(msgObj)
                        // this.total = msgObj.total  
                        // this.totalPage = msgObj.totalPage
                        
                    }).catch(error => console.log(error))
                }
```

```html
					<div class="clearfix selector">
                    <div class="type-wrap">
                        <div class="fl key">分类</div>
                        <div class="fl value">
                            <ul class="type-list">
                                <li v-for="(category,index) in categoryList" :key="index"@click="addFilter('cid3',category.id)">
                                    <a>{{ category.name }}</a>
                                </li>
                            </ul>
                        </div>
                        <div class="fl ext"></div>
                    </div>
                    <div class="type-wrap logo">
                        <div class="fl key brand">品牌</div>
                        <div class="value logos">
                            <ul class="logo-list">
                                <li v-for="(brand,index) in brandList" :key="index" v-if="brand.image" @click="addFilter('brandId',brand.id)">
                                    <img :src="brand.image" />
                                </li>
                                <li style="text-galin: center" v-else >
                                    <a style="line-height: 30px; font-size: 12px" href="#" >{{ brand.name }}</a>
                                </li>
                            </ul>
                        </div>
                        <div class="fl ext">
                            <a href="javascript:void(0);" class="sui-btn">多选</a>
                        </div>
                    </div>
```

#### search.html

![image-20210311222120505](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222120505.png)

```js
<script type="text/javascript">
        var vm = new Vue({
            el: "#searchApp",
            data: {
                goodsList:[],
                mrshop,
                page:1,
                total:0,
                totalPage:0,
                categoryList:[],
                brandList:[],
                specMap:{},
                showMore:false,
                filter:{}
            },
            components: {
                b2cTop: () => import("./js/pages/top.js")
            },
            watch:{
                page(){
                    this.search();
                }
            },
            methods: {
                defaultEvent(){},
                deleteFilter(key){
                    delete this.filter[key];
                    this.search();
                },
                getFilterValue(key,value){
                    if (key == "brandId") {
                        this.brandList.forEach(brand =>{
                            if(brand.id == value) {
                                value = brand.name;
                            }
                        })
                        return value;
                    } else if(key == "cid3"){
                        this.categoryList.forEach(category =>{
                            if(category.id == value) {
                                value = category.name;
                            }
                        })
                        return value;
                    }
                    return value;
                },
                addFilter(key,value){
                    this.filter[key] = value;
                    this.search();
                },
                search(){
                    const search = mrshop.parse(location.search.substring(1))
                    mrshop.http.get('/search/es/search', {
                        params: {
                            search:search.key,
                            page:this.page,
                            filter:JSON.stringify(this.filter)
                        }
                    }).then(resp => {
                        const goodsList = resp.data.data || [];
                        goodsList.forEach(goods => {
                            goods.skus = JSON.parse(goods.skus);
                            goods.selected = goods.skus[0];
                        })
                        this.goodsList = goodsList;
                        this.total = resp.data.total;
                        this.totalPage = resp.data.totalPage;
                        this.categoryList = resp.data.categoryList;
                        this.brandList = resp.data.brandList;
                        this.specMap = resp.data.specMap;
                        // console.log(resp.data)
                        // const msgObj = JSON.parse(resp.data.message)
                        // console.log(msgObj)
                        // this.total = msgObj.total  
                        // this.totalPage = msgObj.totalPage
                        
                    }).catch(error => console.log(error))
                }
            },
            created() {
               this.search();
            }
        });
    </script>
```

```html
 					<div class="type-wrap" v-for="(value,key,index) in specMap" :key="index" v-show="index < 5 || showMore">
                        <div class="fl key">{{key}}</div>
                        <div class="fl value">
                            <ul class="type-list">
                                <li v-for="(v,index) in value"  @click="addFilter(key,v)">
                                    <a>{{v}}</a>
                                </li>
                            </ul>
                        </div>
                        <div class="fl ext"></div>
                    </div>
```

#### 更多 收起 功能实现

![image-20210311222451610](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222451610.png)

![image-20210311222521257](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222521257.png)

![image-20210311222533751](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222533751.png)

![image-20210311222542353](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222542353.png)

#### 优化代码

![image-20210311222607408](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222607408.png)

还有一些赋值操作

![image-20210311222617781](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222617781.png)

这些其实都是过滤条件数据 所以我们将这些数据合并成一个对象

![image-20210311222735535](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222735535.png)

![image-20210311222755608](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222755608.png)

#### 那现在模板就必须得改了

![image-20210311222820563](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222820563.png)

![image-20210311222837085](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222837085.png)

![image-20210311222845740](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222845740.png)

#### 搜索过滤

##### 5.1 search.html

![image-20210311222937676](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222937676.png)

![image-20210311222950144](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222950144.png)

![image-20210311223011928](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311223011928.png)

![image-20210311223027982](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311223027982.png)

![image-20210311223037662](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311223037662.png)

##### ShopElasticsearchService

```
@ApiOperation(value = "搜索")
@GetMapping(value = "es/search")
GoodsResponse search(@RequestParam String search, @RequestParam Integer page
, @RequestParam String filter);
```

##### ShopElasticsearchServiceImpl

```java
private NativeSearchQueryBuilder getNativeSearchQueryBuilder(String search,Integer page,String filter){

        //System.out.println(filter);

        NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();
        //多字段查询
        nativeSearchQueryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName","categoryName"));

        //搜索过滤
        if (!StringUtils.isEmpty(filter) && filter.length() > 2){
            BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
            Map<String, String> filterMap = JSONUtil.toMapValueString(filter);
            filterMap.forEach((key,value) ->{
                MatchQueryBuilder matchQueryBuilder = null;
                if (key.equals("cid3") || key.equals("brandId")){
                     matchQueryBuilder = QueryBuilders.matchQuery(key, value);
                }else {
                     matchQueryBuilder = QueryBuilders.matchQuery("specs." + key + ".keyword", value);
                }
                boolQueryBuilder.must(matchQueryBuilder);
            });
            nativeSearchQueryBuilder.withFilter(boolQueryBuilder);
        }

        //设置分页
        nativeSearchQueryBuilder.withPageable(PageRequest.of(page-1,10));
        //过滤掉无用的数据
        nativeSearchQueryBuilder.withSourceFilter(new FetchSourceFilter(new String[]{"id","title","skus"},null));
        //设置高亮
        nativeSearchQueryBuilder.withHighlightBuilder(HighlightUtil.getHighlightBuilder("title"));
        //聚合
        nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_category").field("cid3"));
        nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_brand").field("brandId"));

        return nativeSearchQueryBuilder;
    }
```

```
private NativeSearchQueryBuilder getNativeSearchQueryBuilder(String search,Integer page,String filter){

    //System.out.println(filter);

    NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();
    //多字段查询
    nativeSearchQueryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName","categoryName"));

    //搜索过滤
    if (!StringUtils.isEmpty(filter) && filter.length() > 2){
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        Map<String, String> filterMap = JSONUtil.toMapValueString(filter);
        filterMap.forEach((key,value) ->{
            MatchQueryBuilder matchQueryBuilder = null;
            if (key.equals("cid3") || key.equals("brandId")){
                 matchQueryBuilder = QueryBuilders.matchQuery(key, value);
            }else {
                 matchQueryBuilder = QueryBuilders.matchQuery("specs." + key + ".keyword", value);
            }
            boolQueryBuilder.must(matchQueryBuilder);
        });
        nativeSearchQueryBuilder.withFilter(boolQueryBuilder);
    }

    //设置分页
    nativeSearchQueryBuilder.withPageable(PageRequest.of(page-1,10));
    //过滤掉无用的数据
    nativeSearchQueryBuilder.withSourceFilter(new FetchSourceFilter(new String[]{"id","title","skus"},null));
    //设置高亮
    nativeSearchQueryBuilder.withHighlightBuilder(HighlightUtil.getHighlightBuilder("title"));
    //聚合
    nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_category").field("cid3"));
    nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_brand").field("brandId"));

    return nativeSearchQueryBuilder;
}
```

```
private NativeSearchQueryBuilder getNativeSearchQueryBuilder(String search,Integer page,String filter){

    //System.out.println(filter);

    NativeSearchQueryBuilder nativeSearchQueryBuilder = new NativeSearchQueryBuilder();
    //多字段查询
    nativeSearchQueryBuilder.withQuery(QueryBuilders.multiMatchQuery(search,"title","brandName","categoryName"));

    //搜索过滤
    if (!StringUtils.isEmpty(filter) && filter.length() > 2){
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        Map<String, String> filterMap = JSONUtil.toMapValueString(filter);
        filterMap.forEach((key,value) ->{
            MatchQueryBuilder matchQueryBuilder = null;
            if (key.equals("cid3") || key.equals("brandId")){
                 matchQueryBuilder = QueryBuilders.matchQuery(key, value);
            }else {
                 matchQueryBuilder = QueryBuilders.matchQuery("specs." + key + ".keyword", value);
            }
            boolQueryBuilder.must(matchQueryBuilder);
        });
        nativeSearchQueryBuilder.withFilter(boolQueryBuilder);
    }

    //设置分页
    nativeSearchQueryBuilder.withPageable(PageRequest.of(page-1,10));
    //过滤掉无用的数据
    nativeSearchQueryBuilder.withSourceFilter(new FetchSourceFilter(new String[]{"id","title","skus"},null));
    //设置高亮
    nativeSearchQueryBuilder.withHighlightBuilder(HighlightUtil.getHighlightBuilder("title"));
    //聚合
    nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_category").field("cid3"));
    nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms("agg_brand").field("brandId"));

    return nativeSearchQueryBuilder;
}
```

### 面包屑

#### 面包屑展示

![image-20210311223612642](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311223612642.png)

![image-20210311223635101](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311223635101.png)

#### 点击×号取消过滤

```html
					<ul class="tags-choose">
                        <li class="tag" v-for="(value,key,index) in filter" :key="index">
                            {{key == 'brandId'?'品牌':key=='cid3'?'分类':key}}:<span style="color: red">{{ getFilterValue(key,value) }}</span>
                            <i class="sui-icon icon-tb-close" @click="deleteFilter(key)"></i>
                        </li>
                    </ul>

```

```java
removeFilterItem(key){
    delete this.filter[key];
    this.searchEsData();
}
```

# 9-商品详情-页面静态化

## 1 学习目标

了解Thymeleaf的基本使用 

实现商品详情页的渲染

 知道页面静态化的作用 

实现页面静态化功能

## 2 商品详情

当用户搜索到商品，肯定会点击查看，就会进入商品详情页，接下来我们完成商品详情页的展示，

### 2.1 thymeleaf

Thymeleaf是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎， 它主要有以下几个特点：



1. Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果， 也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属 性，所以thymeleaf的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替 换掉静态内容，使页面动态显示。
2. Thymeleaf开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改jstl、改标签的困扰。同时开发人员也可以扩展和创建自 定义的方言 
3. Thymeleaf提供spring标准方言和一个与SpringMVC完美集成的可选模块，可以快速的实现表单绑 定、属性编辑器、国际化等功能。
4. Thymeleaf官网：http://www.thymeleaf.org

### 2.2 模板项目搭建

商品详情浏览量比较大，并发高 一般都是要开启一个独立的微服务去做。

### 2.2.1 在mingrui-shop-service项目下新建mingrui-shop-servicetemplate

### 2.2.2 pom.xml

```
<dependencies>
    <!--模板引擎-->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
</dependencies>
```

### 2.2.3 application.yml

```
server:
	port: 8400
spring:
	application:
	name: template-server
	thymeleaf:
        # 配置前缀-->模板文件存储路径
        prefix: classpath:/templates/
        # 是否检查本地模板
        check-template-location: true
        # 配置模板文件后缀
        suffix: .html
        # 编码格式
        encoding: UTF-8
        servlet:
        # 模板类型
        content-type: text/html
        #模板模式
        mode: HTML5
        # 是否启用缓存
        cache: false
        # eureka配置
eureka:
    client:
        service-url:
        	defaultZone: http://localhost:8761/eureka/
```

### 2.2.4 启动类

```
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
@EnableFeignClients
@EnableEurekaClient
public class RunTemplateServerApplication {
    public static void main(String[] args) {
    	SpringApplication.run(RunTemplateServerApplication.class);
    }
}
```

### 2.2.5 在resource目录下新建templates文件夹

### 2.2.6 新建123.htm

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
    明瑞教育,世界第一
</body>
</html>
```

### 2.2.7 新建PageController

```
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
@Controller
public class PageController {
    @GetMapping(value = "123.html")
    public String test(){
    	return "123";
    }
}
```

### 2.2.8 浏览器输入ip:port/123.html能正常访问到页面即可

![image-20210311211036322](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211036322.png)

先来看一下问题: 大家这个请求的地址是其实是127.0.0.1:80对吧 但是我们想让他请求我们template项目的地址 所以我们得先处理一下nginx

![image-20210311211052980](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211052980.png)

```
#如果请求路径带item我们就让nginx帮我们把请求转发到8400端口
location /item {
    proxy_pass http://127.0.0.1:8400;
    proxy_connect_timeout 600;
    proxy_read_timeout 600;
}
```

既然这样改了,那我们就应该让图片的地址带上item

![image-20210311211123171](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211123171.png)

```
<!--大图片 设置成当前选中的图片-->
<a :href="'/item/' +goods.id + '.html'" target="_blank"><img
:src="goods.selected.image" height="200" /></a>
```

### 2.3.1 PageController

```
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
@Controller
@RequestMapping(value = "item")
public class PageController {
    @GetMapping(value = "{spuId}.html")
    public String test(@PathVariable(value = "spuId") Integer spuId){
        //
        return "item";
    }
}
```

### 2.3.2 复制item.html到templates下

重启项目

点击图片能正常访问页面即可

![image-20210311211246357](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211246357.png)

重启项目报错的话就自己新建item.html,然后复制代码即可

### 2.4 后台数据准备



![image-20210311211312119](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211312119.png)

![image-20210311211332269](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211332269.png)![](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211409308.png)

```
@Override
public Map<String, Object> getGoodsInfo(Integer spuId) {
    Map<String, Object> map = new HashMap<>();
    //spu信息
    SpuDTO spuDTO = new SpuDTO();spuDTO.setId(spuId);
    Result<List<SpuDTO>> spuResult = goodsFeign.getSpuInfo(spuDTO);
    if(spuResult.getCode() == 200){
    	SpuDTO spuInfo = spuResult.getData().get(0);
	map.put("spuInfo",spuInfo);
    //spudetail信息
    Result<SpuDetailEntity> spuDetailResult = goodsFeign.getSpuDetailBydSpu(spuId);
    if(spuDetailResult.getCode() == 200){
        SpuDetailEntity spuDetailInfo = spuDetailResult.getData();
        map.put("spuDetailInfo",spuDetailInfo);
    }
	//查询分类信息
    Result<List<CategoryEntity>> cateResult =
        categoryFeign.getCateByIds(
            String.join(
            ","
            , Arrays.asList(
            spuInfo.getCid1() + ""
            , spuInfo.getCid2() + ""
            , spuInfo.getCid3() + "")
        )
    );
    if(cateResult.getCode() == 200){
    	map.put("cateList",cateResult.getData());
    }
    BrandDTO brandDTO = new BrandDTO();
    brandDTO.setId(spuInfo.getBrandId());
    Result<PageInfo<BrandEntity>> brandResult = brandFeign.getBrandInfo(brandDTO);
    if (sepcGroupResult.getCode() == 200) {
    List<SpecGroupEntity> specGroupInfo = sepcGroupResult.getData();
    //规格组和规格参数
    List<SpecGroupDTO> groupsInParams =
    specGroupInfo.stream().map(specGroup -> {
        SpecGroupDTO sgd = BaiduBeanUtil.copyProperties(specGroup,
        SpecGroupDTO.class);
        //规格参数-通用参数
        SpecParamDTO specParamDTO = new SpecParamDTO();
        specParamDTO.setGroupId(specGroup.getId());
        specParamDTO.setGeneric(1);
        Result<List<SpecParamEntity>> specParamResult =
        specificationFeign.getSpecParamInfo(specParamDTO);
        if (specParamResult.getCode() == 200) {
            sgd.setSpecParams(specParamResult.getData());
        }
        return sgd;
    }).collect(Collectors.toList());
    	map.put("groupsInParams",groupsInParams);
	}
	//特有规格参数
    SpecParamDTO specParamDTO = new SpecParamDTO();
    specParamDTO.setCid(spuInfo.getCid3());
    specParamDTO.setGeneric(0);
    Result<List<SpecParamEntity>> specParamResult =
    specificationFeign.getSpecParamInfo(specParamDTO);
	if(specParamResult.getCode() == 200) {
        //需要将数据转换为map方便页面操作!!!!!!!!!
        Map<Integer, String> specMap = new HashMap<>();
        specParamResult.getData().stream().forEach(spec ->
        specMap.put(spec.getId(),spec.getName()));
        map.put("specParamMap",specMap);
    }
        //sku
        Result<List<SkuDTO>> skuResult = goodsFeign.getSkuBySpuId(spuId);
            if(skuResult.getCode() == 200){
            List<SkuDTO> skuList = skuResult.getData();
            map.put("skuList",skuList);
        }
    return map;
	}
}
```

### 2.5 展示分类/品牌/标题

![image-20210311211805113](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211805113.png)

![image-20210311211813716](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211813716.png)

### 2.6 展示子标题

![image-20210311211900648](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211900648.png)

![image-20210311211911875](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311211911875.png)

```
<!--子标题展示-->
<div class="news"><span th:utext="${ spuInfo.subTitle }">
</span></div>
```

### 2.7 sku信息展示

```
const specParamMap = /*[[ ${specParamMap} ]]*/[];//得到 1:屏幕尺寸 
const specialSpec = JSON.parse(/*[[ ${ spuDetailInfo.specialSpec } ]]*/); //得到 1:5.7 
const skus = /*[[ ${ skuList } ]]*/[];
```

![image-20210311212111417](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212111417.png)

```
<script th:inline="javascript">
    const specParamMap = /*[[ ${specParamMap} ]]*/[];
    const specialSpec = JSON.parse(/*[[ ${ spuDetailInfo.specialSpec } ]]*/);
    const skus = /*[[ ${ skuList } ]]*/[];
</script>
<script>
    var itemVm = new Vue({
        el:"#itemApp",
        data:{
            mrshop,
            specParamMap,
            specialSpec,
            skus,
            indexs
        },
        components:{
        	b2cTop: () => import('/js/pages/top.js')
        }
    });
</script>
```

html代码

```
<!--特有规格展示-->
<dl v-for="(value,key) in specialSpec">
    <dt>
        <div class="fl title">
            <!--通过id得到特有规格的名称-->
            <i>选择{{specParamMap[key]}}</i>
        </div>
    </dt>
	<dd v-for="(o,index) in value" >
        <a href="javascript:;" class="selected">
            {{ o }}<span title="点击取消选择">&nbsp;
            </span>
        </a>
    </dd>
</dl>
```

![image-20210311212312601](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212312601.png)

解决特有规格全部被选中的问题

![image-20210311212330546](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212330546.png)

```
const indexs = {}; 
//得到所有特有属性的id所有的key对应的值设置为0 
Object.keys(specialSpec).forEach(k => {
	indexs[k] = 0;
})
```

```
<!--点击某一项规格的时候讲将当前下标设置为被选中的下标--
>
<dd v-for="(o,index) in value"
@click="indexs[key] = index">
<!--如果当前下标==设置的下标
那么此项规格被选中
剩下的则不选中-->
    <a href="javascript:;" :class="{selected:
    index == indexs[key]}">
        {{ o }}<span title="点击取消选择">&nbsp;
        </span>
    </a>
</dd>
```

```
computed:{ 
//计算属性得到当前被选中的sku信息
	sku(){
        //获取到indexs中所有的值并且用_拼接起来
        const index = Object.values(indexs).join("_");
        //数组.find方法-->通过条件查找数组中的元素
        return this.skus.find(sku => sku.indexes == index); 
    }, 
    //处理图片 
	images(){ return this.sku.images ? this.sku.images.split(",") : []; } 
}
```

```
<!--sku标题-->
<div class="sku-name">
	<h4>{{ sku.title }}</h4>
</div>
```

```
<!--sku价格-->
<div class="fl price">
    <i>¥</i><em>{{ mrshop.formatPrice(sku.price) }}
    </em><span>降价通知</span>
</div>
```

![image-20210311212547815](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212547815.png)

```
<div class="fl preview-wrap">
    <!--放大镜效果-->
    <div class="zoom">
        <!--默认第一个预览-->
        <div id="preview" class="spec-preview">
        <span class="jqzoom">
        <img :jqimg="images[0]" :src="images[0]"
        width="400px" height="400px"/>
        </span>
        </div>
        <!--下方的缩略图-->
        <div class="spec-scroll">
        <a class="prev">&lt;</a>
        <!--左右按钮-->
            <div class="items">
                <ul>
                    <li v-for="(image, index) in images">
                    <img :src="image" :bimg="image"
                    onmousemove="preview(this)" />
                    </li>
                </ul>
            </div>
        	<a class="next">&gt;</a>
        </div>
    </div>
</div>

```

### 2.8 商品介绍

```
<!--商品详情-->
<div class="intro-detail" th:utext="${
spuDetailInfo.description }">
</div>
```

### 2.9 规格与包装

#### 2.9.1 规格

![image-20210311212707058](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212707058.png)

![image-20210311212716834](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212716834.png)

```
const spuDetailInfo = /*[[ ${spuDetailInfo} ]]*/{}; //detail一并拿过来,后面有可能会用
const genericSpec = JSON.parse(/*[[ ${ spuDetailInfo.genericSpec } ]]*/);//通过规格参数
const specGroupAndParam = /*[[ ${specGroupAndParam} ]]*/[];//规格组合规格参数数据
```

```
<!--
规格组 规格参数展示
v-if="group.specParams.length > 0" 如果当前规格组下没有规格参数则不展示
-->
<div class="Ptable-item"
v-for="(group,index) in specGroupAndParam"
:key="index">
<h3>{{ group.name }}</h3>
    <dl v-for="(param,index) in group.specParams" :key="index">
        <dt >{{ param.name }}</dt>
        <dd>{{ genericSpec[param.id] || '无' }}</dd>
    </dl>
</div>
```

#### 2.9.2 包装

```
<div class="package-list">
<h3>包装清单</h3>
<p th:text="${ spuDetailInfo.packingList }">
</p>
</div>
```

2.10 售后保障

![image-20210311212814750](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212814750.png)

```
<div id="three" class="tab-pane">
	<p th:text="${ spuDetailInfo.afterService }"></p>
</div>
```

#### 2.11 商品标题/价格/图片展示

![image-20210311212852332](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212852332.png)

![image-20210311212903179](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212903179.png)

![image-20210311212908512](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212908512.png)

```
computed:{
	sku () {
        /*
        将:
        {
        颜色 : 0,
        内存 : 1,
        机身存储 : 0
        }
        这样数据转换成0_1_0
        Object.values获取json对象的所有value值得到数据
        */
        const indexStr = Object.values(this.indexes).join('_');
        //数组的find函数: 通过条件查找数组内某一个函数
        //我们需要查询sku.indexes == indexStr的元素
        return this.skusInfo.find(sku => sku.indexes == indexStr);
        },
        images () {
        //先判断一下当前选中sku的images是否有内容
        //然后再通过,分割字符串.因为有可能一个sku有多个图片
        return this.sku.images ? this.sku.images.split(',') : [];
    }
}
```

## 3 页面静态化

### 3.1 问题分析

现在，我们的页面是通过Thymeleaf模板引擎渲染后返回到客户端 返回页面之前需要在后端查询数据，进行多次与mysql的交互. 而且每次请求数据就会与mysql交互,性能非常的差,如果并发量比较高的话 mysql和后台服务有可能会扛不住,后台服务我们可以做负载均衡,但是数据库没有办法做负载 即使做负载,成本也会非常的高,所以们使用页面静态化技术来解决这个问题

### 3.2 静态化

静态化是指把动态生成的HTML页面变为静态内容保存，以后用户的请求商品详情，直接访问静态页 面，不再经过tomcat controler 的渲染。 computed:{ sku () { /* 将: { 颜色 : 0, 内存 : 1, 机身存储 : 0 } 这样数据转换成0_1_0 Object.values获取json对象的所有value值得到数据 */ const indexStr = Object.values(this.indexes).join('_'); //数组的find函数: 通过条件查找数组内某一个函数 //我们需要查询sku.indexes == indexStr的元素 return this.skusInfo.find(sku => sku.indexes == indexStr); }, images () { //先判断一下当前选中sku的images是否有内容 //然后再通过,分割字符串.因为有可能一个sku有多个图片 return this.sku.images ? this.sku.images.split(',') : []; } }, 而静态的HTML页面可以部署在nginx中，从而提高并发能力，减小tomcat压力。无需占用tomact并发 数

### 3.3 如何实现页面静态化

目前，静态化页面都是通过模板引擎来生成，而后保存到nginx服务器来部署。常用的模板引擎比如： Freemarker Velocity Thymeleaf 我们之前就使用的Thymeleaf，来渲染html返回给用户。 Thymeleaf除了可以把渲染结果写入Response，也可以写到本地文件，从而实现静态化。

### 3.4 Thymeleaf实现静态化3

先说下Thymeleaf中的几个概念：

 **Context**：运行上下文 TemplateResolver：模板解析器 

**TemplateEngine**：模板引擎 processEngine-->JBPM(hibernate) , activity(mybatis) //请假 --> 请 假申请 --> 组长审批 --> 经理审批 --> 人事审批 --> 财务审批 --> 老板审批 Context 上下文： 用来保存模型数据，当模板引擎渲染时，可以从Context上下文中获取数据用于渲染。 当与SpringBoot结合使用时，我们放入Model的数据就会被处理到Context，作为模板渲染的数据使 用。

 **TemplateResolver** 模板解析器：用来读取模板相关的配置，例如：模板存放的位置信息，模板文件名称，模板文件的类型 等等。 当与SpringBoot结合时，TemplateResolver已经由其创建完成，并且各种配置也都有默认值，比如模 板存放位置，其默认值就是：templates。比如模板文件类型，其默认值就是html。 

**TemplateEngine** 模板引擎：用来解析模板的引擎，需要使用到上下文、模板解析器。分别从两者中获取模板中需要的数 据，模板文件。然后利用内置的语法规则解析，从而输出解析后的文件。来看下模板引起进行处理的函 数：

```
templateEngine.process("模板名", context, writer);
```

三个参数： 

​	模板的名称

​	上下文里面包含模型数据 

​	writer：输出目的地的流

在输出时，我们可以指定输出的目的地，如果目的地是Response的流，那就是网络响应。如果目的地 是本地文件，那就实现静态化了。

 而在SpringBoot中已经自动配置了模板引擎，因此我们不需要关心这个。现在我们做静态化，就是把输 出的目的地改成本地文件即可

### 3.5 实现

#### 3.5.1 mingrui-shop-service-api

##### 3.5.1.1 新建项目mingrui-shop-service-api-template

##### 3.5.1.2 新建包com.baidu.shop

##### 3.5.1.3 包下新建service和config包

##### 3.5.1.4 service包下新建TemplateService

```
@GetMapping(value = "template/createStaticHTMLTemplate")
Result<JSONObject> createStaticHTMLTemplate(Integer spuId);

@GetMapping(value = "template/initStaticHTMLTemplate")
Result<JSONObject> initStaticHTMLTemplate();

@GetMapping(value = "template/clearStaticHTMLTemplate")
Result<JSONObject> clearStaticHTMLTemplate();

@GetMapping(value = "template/deleteStaticHTMLTemplate")
Result<JSONObject> deleteStaticHTMLTemplate(Integer spuId);
```

##### 3.5.1.5 config包下新建MrSwagger2Config

```
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
@Configuration
@EnableSwagger2
public class MrSwagger2Config {
    @Bean
    public Docket createRestApi(){
   		return new Docket(DocumentationType.SWAGGER_2)
            .apiInfo(this.apiInfo())
            .select()
            .apis(RequestHandlerSelectors.basePackage("com.baidu"))
            .paths(PathSelectors.any())
            .build();
	}
	private ApiInfo apiInfo(){
		return new ApiInfoBuilder()
            //标题
            .title("明瑞SWAGGER2标题")
            //条款地址
            .termsOfServiceUrl("http://www.baidu.com")
            //联系方式-->有String参数的方法但是已经过时，所以不推荐使用
            .contact(new
            Contact("shenyaqi","baidu.com","shenyaqiii@163.com"))
            //版本
            .version("v1.0")
            //项目描述
            .description("描述")
            //创建API基本信息
            .build();
    }
}
```

#### 3.5.2 mingrui-shop-service-template

##### 3.5.2.1 注释掉或者直接删掉controller和service下的所有注解

**我们不用原来的那种方式实现，所以留着他们也没有什么用**

![image-20210311213654744](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213654744.png)

![image-20210311213705141](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213705141.png)

![image-20210311213713506](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213713506.png)

##### 3.5.2.2 application.yml

```
mrshop:
 static:
  html:
   path: E:\static-html\item #生成的html文件存储的路径,注意这个目录需要提前建好
```

##### 3.5.2.3 impl包下新建TemplateServiceImpl

![image-20210311213811917](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213811917.png)

![image-20210311213834964](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213834964.png)

```
import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.entity.*;
import com.baidu.shop.feign.BrandFeign;
import com.baidu.shop.feign.CategoryFeign;
import com.baidu.shop.feign.GoodsFeign;
import com.baidu.shop.feign.SpecificationFeign;
import com.baidu.shop.response.*;
import com.baidu.shop.service.TemplateService;
import com.baidu.shop.utils.BaiduBeanUtil;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RestController;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
public class TemplateServiceImpl extends BaseApiService implements TemplateService {
	@Autowired
    private GoodsFeign goodsFeign;
    
    @Autowired
    private CategoryFeign categoryFeign;
    
    @Autowired
    private SpecificationFeign specificationFeign;
    
    @Autowired
    private BrandFeign brandFeign;	
    
    //注入静态化模版
    @Autowired
    private TemplateEngine templateEngine
    
    //静态文件生成的路径
    @Value(value = "${mrshop.static.html.path}")
    private String staticHTMLPath
    @Override
	public Result<JSONObject> createStaticHTMLTemplate(Integer spuId) {
		Map<String, Object> map = new HashMap<>();
		//spu信息
        SpuDTO spuDTO = new SpuDTO();
        spuDTO.setId(spuId);
        Result<List<SpuDTO>> spuResult = goodsFeign.getSpuInfo(spuDTO);
        if(spuResult.getCode() == 200){
            SpuDTO spuInfo = spuResult.getData().get(0);
            map.put("spuInfo",spuInfo);
			//spudetail信息
            Result<SpuDetailEntity> spuDetailResult = goodsFeign.getSpuDetailBydSpu(spuId);
			if(spuDetailResult.getCode() == 200){
                SpuDetailEntity spuDetailInfo = spuDetailResult.getData();
                map.put("spuDetailInfo",spuDetailInfo);
            }
            //查询分类信息
			Result<List<CategoryEntity>> cateResult =categoryFeign.getCateByIds(
                    String.join(
                        ","
                        , Arrays.asList(
                            spuInfo.getCid1() + ""
                            , spuInfo.getCid2() + ""
                            , spuInfo.getCid3() + "")
                        )
            );
            if(cateResult.getCode() == 200){
            	map.put("cateList",cateResult.getData());
            }
            //查询品牌信息
            BrandDTO brandDTO = new BrandDTO();
            brandDTO.setId(spuInfo.getBrandId());
            Result<PageInfo<BrandEntity>> brandResult = brandFeign.getBrandInfo(brandDTO);
			if(brandResult.getCode() == 200){
            	map.put("brandInfo",brandResult.getData().getList().get(0));
            }
            //规格组和规格参数
            SpecGroupDTO specGroupDTO = new SpecGroupDTO();
            specGroupDTO.setCid(spuInfo.getCid3());
            Result<List<SpecGroupEntity>> sepcGroupResult = specificationFeign.getSepcGroupInfo(specGroupDTO);
			if (sepcGroupResult.getCode() == 200) {
                List<SpecGroupEntity> specGroupInfo = sepcGroupResult.getData();
                //规格组和规格参数
                List<SpecGroupDTO> groupsInParams =
                specGroupInfo.stream().map(specGroup -> {
                    SpecGroupDTO sgd = BaiduBeanUtil.copyProperties(specGroup,
                    SpecGroupDTO.class);
                    //规格参数-通用参数
                    SpecParamDTO specParamDTO = new SpecParamDTO();
                    specParamDTO.setGroupId(specGroup.getId());
                    specParamDTO.setGeneric(1);
                    Result<List<SpecParamEntity>> specParamResult =
                    specificationFeign.getSpecParamInfo(specParamDTO);
                    if (specParamResult.getCode() == 200) {
                    sgd.setSpecParams(specParamResult.getData());
                    }
                    return sgd;
                }).collect(Collectors.toList());
                map.put("groupsInParams",groupsInParams);
            }
        }
        
        //特有规格参数
        SpecParamDTO specParamDTO = new SpecParamDTO();
        specParamDTO.setCid(spuInfo.getCid3());
        specParamDTO.setGeneric(0);
        Result<List<SpecParamEntity>> specParamResult =
        specificationFeign.getSpecParamInfo(specParamDTO);


		if(specParamResult.getCode() == 200) {
            //需要将数据转换为map方便页面操作!!!!!!!!!
            Map<Integer, String> specMap = new HashMap<>();
            specParamResult.getData().stream().forEach(spec ->
            specMap.put(spec.getId(),spec.getName()));
            map.put("specParamMap",specMap);
        }
        
        //sku
        Result<List<SkuDTO>> skuResult = goodsFeign.getSkuBySpuId(spuId);
        if(skuResult.getCode() == 200){
        List<SkuDTO> skuList = skuResult.getData();
       		map.put("skuList",skuList);
        }
        //根据模板生成静态文件
        //param1:模板名称 params2:模板上下文[上下文中包含了需要填充的数据],文件输出流
        templateEngine.process("item",context,writer);
        return this.setResultSuccess();

	}
	@Override
    public Result<JSONObject> initStaticHTMLTemplate() {
        //获取所有的spu信息,注意:应该写一个只获取id集合的接口,我只是为了省事
        Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(new SpuDTO());
        if(spuInfo.getCode() == 200){
            List<SpuDTO> spuList = spuInfo.getData();
                spuList.stream().forEach(spu -> {
                this.createStaticHTMLTemplate(spu.getId());
            });
        }
        return this.setResultSuccess();
    }
	@Override
    public Result<JSONObject> clearStaticHTMLTemplate() {
    Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(new SpuDTO());
        if(spuInfo.isSuccess()){
            spuInfo.getData().stream().forEach(spu -> {
                this.deleteStaticHTMLTemplate(spu.getId());
            });
        }
    	return this.setResultSuccess();
	}
	@Override
    public Result<JSONObject> deleteStaticHTMLTemplate(Integer spuId) {
    File file = new File(staticHTMLPath + File.separator + spuId + "html");
        if(!file.delete()){
        	return this.setResultError("文件删除失败");
        }
   		return this.setResultSuccess();
    }
}
```

![image-20210311214923446](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214923446.png)

![image-20210311214932975](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214932975.png)

```
location /item {
	root 自己的盘符:\static-html;
}
```

打开浏览器进行测试,展示详情页的时候几乎是秒开,大大加快了查询效率

至此,页面静态化完成,但是service中的方法太大了,所以我们还是需要拆一下方法的...

```
import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.entity.*;
import com.baidu.shop.feign.BrandFeign;
import com.baidu.shop.feign.CategoryFeign;
import com.baidu.shop.feign.GoodsFeign;
import com.baidu.shop.feign.SpecificationFeign;
import com.baidu.shop.response.*;
import com.baidu.shop.service.TemplateService;
import com.baidu.shop.utils.BaiduBeanUtil;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RestController;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
@RestController
public class TemplateServiceImpl extends BaseApiService implements TemplateService {

    private final Integer CREATE_STATIC_HTML = 1;
    private final Integer DELETE_STATIC_HTML = 2;

    @Autowired
    private GoodsFeign goodsFeign;

    @Autowired
    private SpecificationFeign specificationFeign;

    @Autowired
    private ElasticsearchRestTemplate elasticsearchRestTemplate;

    @Autowired
    private BrandFeign brandFeign;

    @Autowired
    private CategoryFeign categoryFeign;

    @Autowired
    private TemplateEngine templateEngine;

    @Value(value = "${mrshop.static.html.path}")
    private String htmlPath;



    @Override
    public Result<JSONObject> createStaticHTMLTemplate(Integer spuId){
        Map<String, Object> goodsInfo = this.getGoodsInfo(spuId);

        Context context = new Context();
        context.setVariables(goodsInfo);

        File file = new File(htmlPath, spuId + ".html");
        if (!file.exists()){
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        PrintWriter writer = null;
        try {
            writer = new PrintWriter(file, "UTF-8");
            templateEngine.process("item",context,writer);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } finally {
          if (ObjectUtil.isNotNull(writer)){
              writer.close();
          }
        }

        return this.setResultSuccess();
    }

    private Map<String,Object> getGoodsInfo(Integer spuId){
        HashMap<String, Object> goodsInfoMap = new HashMap<>();
        //spu
        SpuDTO spuResultData  = this.getSpuInfo(spuId);
        goodsInfoMap.put("spuInfo",spuResultData);
        //spuDetail
        goodsInfoMap.put("spuDetail",this.getSpuDetail(spuId));
        //分类信息
        goodsInfoMap.put("categoryInfo", this.getCategoryInfo(
                spuResultData.getCid1()+"",
                spuResultData.getCid2()+"",
                spuResultData.getCid3()+""));
        //品牌信息
        goodsInfoMap.put("brandInfo",this.getBrandInfo(spuResultData.getBrandId()));
        //sku
        goodsInfoMap.put("skus",this.getSkus(spuId));
        //规格组,规格参数(通用)
        goodsInfoMap.put("specGroupAndParam",this.getSpecGroupAndParam(spuResultData.getCid3()));
        //特殊规格
        goodsInfoMap.put("specParamMap",this.getSpecParamMap(spuResultData.getCid3()));

        return goodsInfoMap;
    }

    private SpuDTO getSpuInfo(Integer spuId){
        SpuDTO spuDTO = new SpuDTO();
        spuDTO.setId(spuId);
        Result<List<SpuDTO>> spuResult = goodsFeign.getSpuInfo(spuDTO);
        SpuDTO spuResultData = null;
        if (spuResult.isSuccess()){
            spuResultData = spuResult.getData().get(0);
        }
        return spuResultData;
    }

    private  SpuDetailEntity getSpuDetail(Integer spuId){

        SpuDetailEntity spuDetailEntity = null;

        Result<SpuDetailEntity> spuDetailResult  = goodsFeign.getSpuDetailBySpuId(spuId);
        if (spuDetailResult.isSuccess()){
            spuDetailEntity  = spuDetailResult.getData();
        }

        return spuDetailEntity;
    }

    private List<CategoryEntity> getCategoryInfo(String cid1,String cid2,String cid3){
        List<CategoryEntity> categoryEntityList = null;
        Result<List<CategoryEntity>> categoryResult = categoryFeign.getCategoryByIdList(
                String.join(
                        ",",
                        Arrays.asList(cid1, cid2, cid3)
                )
        );
        if (categoryResult.isSuccess()){
            categoryEntityList = categoryResult.getData();
        }
        return categoryEntityList;
    }

    private BrandEntity getBrandInfo(Integer brandId){
        BrandEntity brandEntity = null;
        BrandDTO brandDTO = new BrandDTO();
        brandDTO.setId(brandId);
        Result<PageInfo<BrandEntity>> brandResult = brandFeign.getBrandInfo(brandDTO);
        if (brandResult.isSuccess()) {
            brandEntity = brandResult.getData().getList().get(0);
        }

        return brandEntity;
    }

    private List<SkuDTO> getSkus(Integer spuId){
        List<SkuDTO> skuList = null;

        Result<List<SkuDTO>> skusResult = goodsFeign.getSkusBySpuId(spuId);
        if (skusResult.isSuccess()){
            skuList = skusResult.getData();
        }
        return skuList;
    }

    private List<SpecGroupDTO> getSpecGroupAndParam(Integer cid3){

        List<SpecGroupDTO> specGroupAndParam = null;

        SpecGroupDTO specGroupDTO = new SpecGroupDTO();
        specGroupDTO.setCid(cid3);

        Result<List<SpecGroupEntity>> specGroupResult = specificationFeign.getSpecGroupInfo(specGroupDTO);
        if (specGroupResult.isSuccess()){
            List<SpecGroupEntity> specGroupList = specGroupResult.getData();
            specGroupAndParam  = specGroupList.stream().map(specGroup -> {
                SpecGroupDTO specGroupDTO1 = BaiduBeanUtil.copyProperties(specGroup, SpecGroupDTO.class);
                SpecParamDTO specParamDTO = new SpecParamDTO();
                specParamDTO.setGeneric(true);
                Result<List<SpecParamEntity>> specParamResult = specificationFeign.getSpecParamInfo(specParamDTO);
                if (specParamResult.isSuccess()) {
                    specGroupDTO1.setSpecList(specParamResult.getData());
                }
                return specGroupDTO1;
            }).collect(Collectors.toList());
        }


        return specGroupAndParam;
    }

    private Map<Integer, String> getSpecParamMap(Integer cid3){

        HashMap<Integer, String> specParamMap  = new HashMap<>();

        SpecParamDTO specParamDTO = new SpecParamDTO();
        specParamDTO.setCid(cid3);
        specParamDTO.setGeneric(true);

        Result<List<SpecParamEntity>> specParamResult = specificationFeign.getSpecParamInfo(specParamDTO);
        if (specParamResult.isSuccess()) {
            List<SpecParamEntity> specParamEntityList  = specParamResult.getData();
            specParamEntityList.stream().forEach(specParam->specParamMap.put(specParam.getId(),specParam.getName()));
        }
        return specParamMap;

    }


    @Override
    public Result<JSONObject> initStaticHTMLTemplate() {
        this.operationStaticHTML(CREATE_STATIC_HTML);
        return this.setResultSuccess();
    }

    @Override
    public Result<JSONObject> clearStaticHTMLTemplate() {
        this.operationStaticHTML(DELETE_STATIC_HTML);
        return this.setResultSuccess();
    }

    private Boolean operationStaticHTML(Integer operation){
        try {
            Result<List<SpuDTO>> spuInfo = goodsFeign.getSpuInfo(new SpuDTO());
            if (spuInfo.isSuccess()){
                spuInfo.getData().stream().forEach(spuDTO -> {
                    if (operation == 1){
                        this.createStaticHTMLTemplate(spuDTO.getId());
                    }else{
                        this.deleteStaticHTMLTemplate(spuDTO.getId());
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public Result<JSONObject> deleteStaticHTMLTemplate(Integer spuId) {
        File file = new File(htmlPath, spuId + ".html");

        if (file.exists()){
            file.delete();
        }

        return this.setResultSuccess();
    }
}
```

# 10-RabbitMQ

#### 搜索与商品服务的问题

目前我们已经完成了商品详情和搜索系统的开发

> 商品的原始数据保存在数据库中，CRUD都在xxx项目中完成 

> 搜索服务数据来源是es索引库，由search项目维护 

> 商品详情做了页面静态化，静态页面由template项目生成维护

如果我们在后台新增了商品。或者修改，删除商品，那么默认操作的是数据库，而es和template不会默 认更新索引库和静态页面



这里有两种解决方案：

> 方案1：每当后台对商品做增删改操作，同时要修改索引库数据及静态页面 

> 方案2：搜索服务和商品页面服务对外提供操作接口，后台在商品增删改后，调用feign接口

以上两种方式都有同一个严重问题：就是代码耦合，后台服务中需要嵌入搜索和商品页面服务，违背了 微服务的 <font style="color:red"> 独立</font>原则。

所以，我们会通过另外一种方式来解决这个问题：消息队列

### 消息队列（MQ）

#### 什么是消息队列

> 消息队列，即MQ，Message Queue。

![image-20210311212626027](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311212626027.png)

##### 介绍

> <font style="color:red">MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去处理。消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。</font>

##### 作用

消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。

解耦：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。

异步：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。

削峰：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。



<font style="color:red">消息队列是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中 获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入， 这样就实现了生产者和消费者的解耦。</font>

结合前面所说的问题：

> 商品服务对商品增删改以后，无需去操作索引库(es)或静态页面(template)，只是发送一条消息， 也不关心消息被谁接收

> 搜索服务和静态页面服务接收消息，分别去处理索引库的更新和静态页面的创建覆盖。

如果以后有其它服务也依赖xxx商品的数据，同样监听消息即可，商品服务无需任何代码修改。

#### AMQP和JMS

MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。

![image-20210311213240667](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213240667.png)

![image-20210311213325957](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213325957.png)

###### 两者间的区别和联系：

> JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式

> JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。

> JMS规定了两种消息模型；而AMQP的消息模型更加丰富



####  常见MQ产品

ActiveMQ：基于JMS

 RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好

 RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会 

Kafka：分布式消息系统，高吞吐量 

ZeroMQ，IBM WebSphere

####  RabbitMQ

RabbitMQ是基于AMQP的一款消息管理系统

官网： http://www.rabbitmq.com/ 

官方教程：http://www.rabbitmq.com/getstarted.html

![image-20210311213558058](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213558058.png)



![image-20210311213635378](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213635378.png)

![image-20210311213648416](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213648416.png)

RabbitMQ基于Erlang语言开发：

![image-20210311213739477](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213739477.png)



####  下载和安装

#### 七种消息模型

https://www.rabbitmq.com/getstarted.html

RabbitMQ提供了7种消息模型

​	 1、2是队列 模型 

​	3、4、5是订阅，交换机模型 

​	6、是rpc回调模型 

​	7、是确认模型

![image-20210311213912528](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213912528.png)

![image-20210311213932044](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213932044.png)

![image-20210311213955392](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311213955392.png)





#### 新建demo项目

##### pom.xml

```pom
 	<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.1.RELEASE</version>
    </parent>
    
    <properties>
        <java.version>1.8</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
    </dependencies>

```

##### 新建包com.mr.rabbitmq.utils 

###### 在utils包下新建RabbitmqConnectionUtil

```java
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;


public class RabbitmqConnectionUtil {
    public static Connection getConnection() throws Exception {
        //定义rabbitmq连接工厂
        ConnectionFactory factory = new ConnectionFactory();
        //设置超时时间
        factory.setConnectionTimeout(60000);
        //设置服务ip
        factory.setHost("127.0.0.1");
        //设置端口5672
        factory.setPort(5672);
        //设置，用户名、密码、虚拟主机
        factory.setUsername("guest");
        factory.setPassword("guest");
        // 创建连接，根据工厂
        Connection connection = factory.newConnection();
        return connection;
    }
}
```

#####  基本消息模型

在com.mr.rabbitmq下新建simple包   新建SendMessage类

```java
package com.baidu.rabbitmq.simple;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;

public class SendMessage {
    // 队列名称
    private final static String QUEUE_NAME = "simple_queue";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        /*
        param1:队列名称
        param2: 是否持久化
        param3: 是否排外
        param4: 是否自动删除
        param5: 其他参数
        */
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        // 发送的消息内容
        String message = "good  good   study";

        /*
        param1: 交换机名称
        param2: routingKey
        param3: 一些配置信息
        param4: 发送的消息
        */
        //发送消息
        channel.basicPublish("",QUEUE_NAME,null,message.getBytes());

        System.out.println((" 消息发送 '" + message + "' 到队列 success 成功"));
        // 先关闭 通道  再关闭连接
        channel.close();
        connection.close();
    }
}
```

channel.queueDeclare(QUEUE_NAME, false, false, false, null);

###### param1: 队列名字

###### param2: durable 

> 是否持久化 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之 后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会 读取该数据库

###### param3: exclusive

是否排外

> 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除； 二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队 列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如 果强制访问会报异常：com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method(reply-code=405, replytext=RESOURCE_LOCKED - cannot obtain exclusive access to locked queue 'queue_name' in vhost '/', class-id=50, method-id=20) 一般等于true的话用于一个 队列只能有一个消费者来消费的场景

###### param4 : autoDelete

> 是否自动删除队列，当最后一个消费者断开连接之后队列是否自动被删除，可以通过 RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动 删除

###### param5: 相关参数

运行main函数

![image-20210311214740731](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214740731.png)

浏览器打开ip:15672

可以看到消息队列中已经有消息了

![image-20210311214808638](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214808638.png)

###### 在simple包下新建Receive

```java
package com.baidu.rabbitmq.simple;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;

public class Receive {
    // 队列名称
    private final static String QUEUE_NAME = "simple_queue";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {

            // 监听队列中的消息 ， 如果有消息 ，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                // body： 消息中参数信息
                String msg = new String(body);
                System.out.println((" 收到消息，执行结果为：" + msg + "!"));
            }
        };
        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);
    }
}

```

执行main函数

![image-20210311214934228](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214934228.png)

![image-20210311214955114](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311214955114.png)

可以看到消息队列中的数据已经被消费完了

> 消费者的消息确认机制(Acknowlage)

通过刚才的案例可以看出，消息一旦被消费者接收，队列中的消息就会被删除。

 那么问题来了：RabbitMQ怎么知道消息被接收了呢？

 这就要通过消息确认机制（Acknowlege）来实现了。当消费者获取消息后，会向RabbitMQ发送回执 ACK，告知消息已经被接收。不过这种回执ACK分两种情况：

自动ACK：消息一旦被接收，消费者自动发送ACK 

手动ACK：消息接收后，不会发送ACK，需要手动调用

这需要看消息的重要性：

> 如果消息不太重要，丢失也没有影响，那么自动ACK会比较方便 
>
> 如果消息非常重要，不允许丢失。那么最好在消费完成后手动ACK，否则接收消息后就自动ACK， RabbitMQ就会把消息从队列中删除。如果此时消费者宕机，那么消息就丢失了。

我们之前的测试都是自动ACK的，如果要手动ACK，需要改动我们的代码：

```
package com.baidu.rabbitmq.simple;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;

public class ReceiveAck {
    // 队列名称
    private final static String QUEUE_NAME = "simple_queue";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {

            // 监听队列中的消息 ， 如果有消息 ，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

              //  System.out.println(1/0);
                // body： 消息中参数信息
                String msg = new String(body);
                System.out.println((" 收到消息，执行结果为：" + msg + "!"));
                /*
                param1 : （唯一标识 ID）
                param2 : 是否进行批处理
                */
                channel.basicAck(envelope.getDeliveryTag(),false);
            }
        };
        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接
    }
}

```

#####  work 消息模型

在刚才的基本模型中，一个生产者，一个消费者，生产的消息直接被消费者消费。比较简单。 Work queues，也被称为（Task queues），任务模型。 

当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆 积越来越多，无法及时处理。此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队 列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。

![image-20210311215332563](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311215332563.png)

###### 角色：

> P：生产者：任务的发布者 

> C1：消费者，领取任务并且完成任务，假设完成速度较慢

> C2：消费者2：领取任务并完成任务，假设完成速度快

##### 生产者

在com.mr.rabbitmq下新建包work  新建SendMessage类

```java
package com.baidu.rabbitmq.work;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;

public class SendMessage {
    private final static String QUEUE_NAME = "test_work_queue";

    public static void main(String[] args) throws Exception {
        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();
        // 获取通道
        Channel channel = connection.createChannel();
        /* 声明队列
        param1:队列名称
        param2: 是否持久化
        param3: 是否排外
        param4: 是否自动删除
        param5: 其他参数
        */
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        // 循环发送
        for (int i = 0; i < 100; i++) {
            // 消息参数内容
            String message = "good  good saudy" + i;

           /*
            param1: 交换机名称
            param2: routingKey
            param3: 一些配置信息
            param4: 发送的消息
            */
          channel.basicPublish("",QUEUE_NAME,null,message.getBytes());

            System.out.println((" send '" + message + " ' success"));
        }
        // 关闭通道和连接
        channel.close();
        connection.close();

        //消费者需要时时监听消息，不用关闭通道与连接
    }
}
```

##### 消费者1

###### 在work包下新建ReceiveOne

```java
package com.baidu.rabbitmq.work;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;

public class ReceiveOne {
    // 队列名称
    private final static String QUEUE_NAME = "test_work_queue";
    public static void main(String[] args) throws Exception {
        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息 ， 如果有消息 ，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                // body： 消息中参数信息
                String msg = new String(body);
                System.out.println(" [消费者-1] 收到消息 : " + msg );
                /*
                param1 : （唯一标识 ID）
                param2 : 是否进行批处理
                */
                channel.basicAck(envelope.getDeliveryTag(), false);
            }
        };
        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
       channel.basicConsume(QUEUE_NAME,false,consumer);
    }
}
```

#####  消费者2

###### 在work包下新建ReceiveTwo

```java
package com.baidu.rabbitmq.work;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;
public class ReceiveTwo {

    // 队列名称
    private final static String QUEUE_NAME = "test_work_queue";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);


        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息 ， 如果有消息 ，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                // body： 消息中参数信息
                String msg = new String(body);
                System.out.println(" [消费者-2] 收到消息 : " + msg );

                try {
                    //增加消费者2消费消息的时间
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                /*
                param1 : （唯一标识 ID）
                param2 : 是否进行批处理
                */
                channel.basicAck(envelope.getDeliveryTag(), false);

            }
        };
        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,false,consumer);
    }
}
```



![image-20210311220207872](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220207872.png)



![image-20210311220224367](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220224367.png)



可以发现，两个消费者各自消费了50条消息，而且各不相同，这就实现了任务的分发。 增加消费者2的耗时时间，也是如此平衡的分配消息

##### 能者多劳

刚才的实现有问题吗？

 消费者2比消费者1的效率要低，一次任务的耗时较长

 然而两人最终消费的消息数量是一样的 

消费者1大量时间处于空闲状态，消费者2一直忙碌 

现在的状态属于是把任务平均分配，正确的做法应该是消费越快的人，消费的越多。 怎么实现呢？

我们可以修改设置，让消费者同一时间只接收一条消息，这样处理完成之前，就不会接收更多消息，就 可以让处理快的人，接收更多消息 ： 消费者增加代码，设置获取一条消息，执行完在执行下一次

```
//通道设置 一个消费者获取一条消息，执行完毕，再获取下一条 
channel.basicQos(1);
```

![image-20210311220405419](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220405419.png)

![image-20210311220512541](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220512541.png)



![image-20210311220527131](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220527131.png)





#####  订阅模型

订阅模型示意图：

![image-20210311220548078](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220548078.png)



前面2个案例中，只有3个角色： 

​	P：生产者，也就是要发送消息的程序 

​	C：消费者：消息的接受者，会一直等待消息到来。

 	queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费 者从其中取	出消息。 

而在订阅模型中，多了一个exchange角色，而且过程略有变化：

​	 P：生产者，也就是要发送消息的程序，消息不再发送到队列中，而是发给X（交换机）

​	 C：消费者，消息的接受者，会一直等待消息到来。

​	 Queue：消息队列，接收消息、缓存消息。

 Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消 息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于 Exchange的类型。Exchange有以下3种类型：

​	 Fanout（扇型交换机）：广播，将消息交给所有绑定到交换机的队列 

​	Direct（直连交换机）：定向，把消息交给符合指定routing key 的队列 

​	Topic（主题交换机）：通配符，把消息交给符合routing pattern（路由模式） 的队列

 //router 

##### Exchange（交换机）只负责转发消息，不具备存储消息的能力，因此如果没有任何队列与Exchange绑 定，或者没有符合路由规则的队列，那么消息会丢失！

##### 阅模型-Fanout

Fanout，也称为广播。

流程图：

![image-20210311220759711](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220759711.png)



在广播模式下，消息发送流程是这样的： 

1） 可以有多个消费者 

2） 每个消费者有自己的queue（队列） 

3） 每个队列都要绑定到Exchange（交换机） 

4） 生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决 定。 

5） 交换机把消息发送给绑定过的所有队列 

6） 队列的消费者都能拿到消息。实现一条消息被多个消费者消费

#####  生产者

![image-20210311220915865](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311220915865.png)



```
package com.baidu.rabbitmq.fanout;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;

public class SendMessage {

    //交换机名称
    private final static String EXCHANGE_NAME = "fanout_exchange_test";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        /*
        param1: 交换机名称
        param2: 交换机类型
        */
        channel.exchangeDeclare(EXCHANGE_NAME,"fanout");

        //发送的消息内容
        String message = "good good  study";

        /*发送消息
        param1: 交换机名称
        param2: routingKey
        param3: 一些配置信息
        param4: 发送的消息
        */
        channel.basicPublish(EXCHANGE_NAME,"",null,message.getBytes());

        System.out.println(" 消息发送 '" + message + "' 到交换机 success");

        // 关闭通道和连接
        channel.close();
        connection.close();

    }

}
```



##### 消费者1

```
package com.baidu.rabbitmq.fanout;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;

public class ReceiveOne {

    //交换机名称
    private final static String EXCHANGE_NAME = "fanout_exchange_test";

    // 队列名称
    private final static String QUEUE_NAME="fanout_exchange_queue_1";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);



        /*消息队列绑定到交换机
        param1: 队列名称
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"");

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                // body： 消息中参数信息
                String s = new String(body);
                System.out.println((" [消费者-1] 收到消息 : " + s));

            }
        };

        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接
    }

}
```

##### 消费者2

```
package com.baidu.rabbitmq.fanout;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;

public class ReceiveTwo {
    //交换机名称
    private final static String EXCHANGE_NAME = "fanout_exchange_test";

    // 队列名称
    private final static String QUEUE_NAME="fanout_exchange_queue_2";

    public static void main(String[] args) throws Exception {

        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);

        /*消息队列绑定到交换机
        param1: 队列名称
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,"");

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                // body： 消息中参数信息
                String s = new String(body);
                System.out.println((" [消费者-2] 收到消息 : " + s));

            }
        };

        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接
    }


}
```

![image-20210311221207354](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311221207354.png)



![image-20210311221217375](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311221217375.png)

![image-20210311221225911](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311221225911.png)

##### 订阅模型-Direct

在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息 被不同的队列消费。这时就要用到Direct类型的Exchange。

在Direct模型下：

> 队列与交换机的绑定，不能是任意绑定了，而是要指定一个 RoutingKey （路由key） 

> 消息的发送方在 向 Exchange发送消息时，也必须指定消息的 RoutingKey 。 

> Exchange不再把消息交给每一个绑定的队列，而是根据消息的 Routing Key 进行判断，只有队列 的 Routingkey 与消息的 Routing key 完全一致，才会接收到消息



![image-20210311221319697](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311221319697.png)



图解：

 P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。

 X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列 

C1：消费者，其所在队列指定了需要routing key 为 orange的消息

 C2：消费者，其所在队列指定了需要routing key 为 black、green 的消息

##### 生产者

```
package com.baidu.rabbitmq.direct;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import java.util.Date;

public class SendMessage {
    //交换机名称
    private final static String EXCHANGE_NAME = "direct_exchange_test";

    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();

        /*
        param1: 交换机名称
        param2: 交换机类型
        */
        channel.exchangeDeclare(EXCHANGE_NAME,"direct");

        // 发送的消息内容
        String message = "商品新增成功 id ： 153";
       
        /*
        param1: 交换机名称
        param2: routingKey
        param3: 一些配置信息
        param4: 发送的消息
        */
        //发送消息
        channel.basicPublish(EXCHANGE_NAME,"delete",null,message.getBytes());


        System.out.println(" [周杰伦官方] 发送消息routingKey ：delete '" + message );

        // 关闭通道   连接

        channel.close();
        connection.close();
    }
}
```

###### 消费者1

```
package com.baidu.rabbitmq.direct;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;
public class ReceiveOne {

    //交换机名称
    private final static String EXCHANGE_NAME = "direct_exchange_test";

    //队列名称
    private final static String QUEUE_NAME = "direct_exchange_queue_1";


    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();


        //  声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);


        /*  消息队列绑定到交换机
        param1: 序列名
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "save");
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "update");
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "delete");


        DefaultConsumer consumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {


                // body： 消息中参数信息
                String msg= new String(body);

                System.out.println(" [粉丝1模拟es服务] 接收到消息 : " + msg );
            }
        };

        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接


    }

}
```

##### 消费者2

```
package com.baidu.rabbitmq.direct;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;

public class ReceiveTwo {

    //交换机名称
    private final static String EXCHANGE_NAME = "direct_exchange_test";

    //队列名称
    private final static String QUEUE_NAME = "direct_exchange_queue_2";


    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();

        //  声明队列
        channel.queueDeclare(QUEUE_NAME,false,false,false,null);


        /*  消息队列绑定到交换机
        param1: 序列名
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "save");
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "update");
       //  channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "delete");

        /// 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {


                // body： 消息中参数信息
                String msg= new String(body);

                System.out.println(" [粉丝1模拟es服务] 接收到消息 : " + msg );
            }
        };

        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接

    }

}
```

执行完这三种routingKey后会发现消费者1能接受到三条消息,消费者2只能接收到两条消息



#### 订阅模型-Topic

Topic 类型的 Exchange 与 Direct 相比，都是可以根据 RoutingKey 把消息路由到不同的队列。只不 过 Topic 类型 Exchange 可以让队列在绑定 Routing key 的时候使用通配符！

 Routingkey 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： item.save

通配符规则：

​	 # ：匹配一个或多个词

​	* ：匹配不多不少恰好1个词

举例： 

​	audit.# ：能够匹配 audit.irs.corporate 或者 audit.irs  

​	audit.* ：只能匹配 audit.irs

![image-20210311221804483](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311221804483.png)

解释：

   Queue1：绑定的是 *.orange.* 例如:aa.orange.bb 类似于这种数据都可以以被匹配到 

  Queue2：绑定的是 *.*.rabbit 和 lazy.# ，例如:aa.bb.rabbit和lazy.aa.bb都可以被匹配到

##### 生产者

使用topic类型的Exchange，发送消息的routing key有1种： goods.delete

```
package com.baidu.rabbitmq.topic;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import java.util.Date;

public class SendMessage {
    //交换机名称
    private final static String EXCHANGE_NAME = "topic_exchange_test";


    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();

        /*
        param1: 交换机名称
        param2: 交换机类型
        */
        channel.exchangeDeclare(EXCHANGE_NAME,"topic");


        // 发送的消息内容
        String message = "商品删除成功 id ： 153";


        /*
        param1: 交换机名称
        param2: routingKey
        param3: 一些配置信息
        param4: 发送的消息
        */
        //发送消息
        channel.basicPublish(EXCHANGE_NAME, "goods.delete", null, message.getBytes());
        channel.basicPublish(EXCHANGE_NAME, "goods.update", null, message.getBytes());
        channel.basicPublish(EXCHANGE_NAME, "delete", null, message.getBytes());


        System.out.println(" [商品服务] 发送消息routingKey ：delete '" + message);

        // 关闭通道和连接
        channel.close();
        connection.close();

    }

}
```

##### 消费者1

```
package com.baidu.rabbitmq.topic;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;

import java.io.IOException;
public class ReceiveOne {
    //交换机名称
    private final static String EXCHANGE_NAME = "topic_exchange_test";
    //队列名称
    private final static String QUEUE_NAME = "topic_exchange_queue_1";
    public static void main(String[] args) throws Exception {
        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);

        /* 消息队列绑定到交换机
        param1: 序列名
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "goods.*");

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {


                // body： 消息中参数信息
                String msg= new String(body);

                System.out.println(" [消费者1模拟es服务] 接收到消息 : " + msg );
            }
        };
        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接
    }
}
```

##### 消费者2

```
package com.baidu.rabbitmq.topic;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;

public class ReceiveTwo {

    //交换机名称
    private final static String EXCHANGE_NAME = "topic_exchange_test";
    //队列名称
    private final static String QUEUE_NAME = "topic_exchange_queue_2";

    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        Channel channel = connection.createChannel();

        // 声明队列
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);

        /* 消息队列绑定到交换机
        param1: 序列名
        param2: 交换机名
        param3: routingKey
        */
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "goods.update");
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "goods.save");

        // 定义队列 接收端==》消费者
        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {


                // body： 消息中参数信息
                String msg= new String(body);

                System.out.println(" [消费者2模拟es服务] 接收到消息 : " + msg );
            }
        };

        /*
        param1 : 队列名称
        param2 : 是否自动确认消息
        param3 : 消费者
        */
        channel.basicConsume(QUEUE_NAME,true,consumer);

        //消费者需要时时监听消息，不用关闭通道与连接

    }
}
```

####  RPC模型

> RPC：Remote Procedure Call 远程过程调用

以上五种模型，解决的都是单向传输问题。就是说，发送端发出消息后，不关心谁执行了消息，执行结 果怎么样，这种行为是异步的，消费端接收到消息，执行后，通过ack机制，可以将执行结果发送给队 列，而没有发送给发送端。大多数需求都是这样的 

但如果需求比较特殊，就是 发送端，需要知道消息执行的结果，那么如何处理的，ack只能默认通知到 队列，而不能通知到发送端，如果你有此类需求，那么 rcp模型是你最好的选择

![image-20210311222133217](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222133217.png)



![image-20210311222209927](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222209927.png)

######  生产者

```
package com.baidu.rabbitmq.rpc;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;
public class RpcSendMessage {
    //交换机名称
    private final static String EXCHANGE_NAME = "exchange_rpc";

    //队列名称
    private final static String QUEUE_NAME = "queue_rpc";


    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        final Channel channel = connection.createChannel();

        //创建交换机--先删除后增加
        channel.exchangeDelete(EXCHANGE_NAME);
        channel.exchangeDeclare(EXCHANGE_NAME, "direct", false, false, null);

        //创建队列
        channel.queueDelete(QUEUE_NAME);
        channel.queueDeclare(QUEUE_NAME, false, false, false, null);

        //绑定队列交换机
        channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, "rpc");

        //此处注意：我们声明了要回复的队列。队列名称由RabbitMQ自动创建。
        //这样做的好处是：每个客户端有属于自己的唯一回复队列，生命周期同客户端
        String replyQueue = channel.queueDeclare().getQueue();

        final String corrID = "9527";

        //消息 指定回复队列和ID
        AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties.Builder();
        // 指定回复队列和回复correlateId
        builder.replyTo(replyQueue).correlationId(corrID);
        AMQP.BasicProperties properties = builder.build();

        // 消息参数内容
        String message = "good good study ";
        System.out.println("rpc模型消息发送 "+message);
        channel.basicPublish(EXCHANGE_NAME, "rpc", properties, message.getBytes());


        DefaultConsumer consumer = new DefaultConsumer(channel) {
            // 监听队列中的消息，如果有消息，进行处理
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope,
                                       AMQP.BasicProperties properties,
                                       byte[] body) throws IOException {

                if (corrID.equals(properties.getCorrelationId())) {
                    System.out.println("9527 ID对应上的消息：" + new String(body));
                } else {
                    System.out.println("9527 ID未对应上的消息：" + new String(body));
                }

            }
        };
        channel.basicConsume(replyQueue, true, consumer);

    }
}
```

#####  消费者

```
package com.baidu.rabbitmq.rpc;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.*;
import java.io.IOException;

public class RpcReceive {

    //队列名称
    private final static String QUEUE_NAME = "queue_rpc";

    public static void main(String[] args) throws Exception {

        // 获取连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 创建通道
        final Channel channel = connection.createChannel();


        DefaultConsumer consumer = new DefaultConsumer(channel) {
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope
                    , AMQP.BasicProperties properties, byte[] body) throws IOException {

                System.out.println("收到消息 执行中："+new String(body));

                AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties.Builder();
                //我们在将要回复的消息属性中，放入从客户端传递过来的correlateId 关系id
                builder.correlationId(properties.getCorrelationId());
                AMQP.BasicProperties prop = builder.build();

                //发送给回复队列的消息，exchange=""，routingKey=回复队列名称
                //因为RabbitMQ对于队列，始终存在一个默认exchange=""，routingKey=队列名称的绑定关系
                String message= new String(body) + "-收到 over 一定 study";
                channel.basicPublish("", properties.getReplyTo(), prop,message.getBytes());

            }
        };
        channel.basicConsume(QUEUE_NAME, true, consumer);

    }
}
```



#### 确认模型

> 确认模型：使用发布者确认来确保已发布的消息已安全到达代理。

整个消息队列环境中都有三个角色 生产者 ,队列和 消费者 mq常见的面试题中有这样一个问题

##### 生产者

```
package com.baidu.rabbitmq.confirm;

import com.baidu.rabbitmq.utils.RabbitmqConnectionUtil;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.MessageProperties;

public class SendMessage {
    //交换机名称
    private final static String EXCHANGE_NAME = "exchange_pub";


    public static void main(String[] args) throws Exception {
        // 获取到连接
        Connection connection = RabbitmqConnectionUtil.getConnection();

        // 获取通道
        Channel channel = connection.createChannel();

        //是当前的channel处于确认模式
        channel.confirmSelect();

        // 声明创建交换机exchange，指定类型为fanout
        channel.exchangeDeclare(EXCHANGE_NAME, "fanout");

        //消息内容
        String message="生命不止，热爱至上";

        channel.basicPublish(EXCHANGE_NAME,"save",
                MessageProperties.PERSISTENT_BASIC,message.getBytes());

        if (channel.waitForConfirms()){
            System.out.println("发送成功");
        }else {
            System.out.println("发送失败");
        }

        channel.close();
        connection.close();

    }
}
```



#### 持久化

如何避免消息丢失？ 

1） 消费者的ACK机制。可以防止消费者丢失消息。

 2） 但是，如果在消费者消费之前，MQ就宕机了，消息就没了。

###### 是否可以将消息进行持久化呢？ 

​	要将消息持久化，前提是：队列、Exchange都持久化

######  交换机持久化

![image-20210311222739373](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222739373.png)

######  交换机持久化

![image-20210311222730548](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222730548.png)

######  消息持久化

![image-20210311222755690](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311222755690.png)



3）：发送者也要保证发送成功，也有确认机制  

4）：可以用第三方记录，例如，es myql mongo 备份消息，

##  Spring AMQP

https://spring.io/projects/spring-amqp#learn

### 依赖和配置

##### pom.xml

```
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-amqp</artifactId>
	</dependency>
```

#####  application.yml

```
spring:
  rabbitmq:
	host: 127.0.0.1
	username: guest
	password: guest
	port: 5672

```

#### 启动类

```
package com.baidu.rabbitmq;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RunTestRabbitMqApplication {

	public static void main(String[] args) {
		SpringApplication.run(RunTestRabbitMqApplication.class);
	}

}

```

#### 消费者

##### 在com.mr.rabbitmq包下新建spring 包下新建MqListener

```
package com.baidu.rabbitmq.spring;

import org.springframework.amqp.core.ExchangeTypes;
import org.springframework.amqp.rabbit.annotation.Exchange;
import org.springframework.amqp.rabbit.annotation.Queue;
import org.springframework.amqp.rabbit.annotation.QueueBinding;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Component;

@Component
public class MqListener {

    @RabbitListener(
            bindings = @QueueBinding(
                    value = @Queue(
                            value = "topic_exchange_queue_1",
                            durable = "true"
                    ),
                    exchange = @Exchange(
                            value = "topic_exchange_test",
                            ignoreDeclarationExceptions = "true",
                            type = ExchangeTypes.TOPIC
                    ),
                    key = {"#.#"}
            )
    )
    public void listen(String msg){
        System.out.println("消费者接受到消息" + msg);
    }


}
```

####  生产者

##### 在测试包下新建com.mr.test.SendMsg

```
package com.mr.test;

import com.baidu.rabbitmq.RunTestRabbitMqApplication;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = RunTestRabbitMqApplication.class)
public class SendMsg {
    @Autowired
    private AmqpTemplate amqpTemplate;

    @Test
    public void sendMessage() throws InterruptedException {
        String message = " good good study ";
        //amqpTemplate 发送一个消息 指定：交换机名称， routingkey 参数

        amqpTemplate.convertAndSend("topic_exchange_test","x.x",message);
        System.out.println("发送成功：ok");
        // 等待10秒为了可以看到 消费者接收到消息执行

      //  Thread.sleep(10000);

    }

}
```

## 项目整合AMQP(rabbitmq)

##### mingrui-shop-service/pom.xml

```
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-amqp</artifactId>
</dependency>

```

###  mingrui-shop-service-xxx

##### application.yml

```
spring:
 rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest
  # 是否确认回调
  publisher-confirm-type: correlated
  # 是否返回回调
  publisher-returns: true
  virtual-host: /
  # 手动确认
  listener:
    simple:
      acknowledge-mode: manual

```



##### common-core项目新建com.baidu.shop.constant包下新建MqMessageConstant

```
package com.baidu.shop.constant;

public class MqMessageConstant {
    //spu交换机，routingkey
    public static final String SPU_ROUT_KEY_SAVE="spu.save";
    public static final String SPU_ROUT_KEY_UPDATE="spu.update";
    public static final String SPU_ROUT_KEY_DELETE="spu.delete";

    //spu-es的队列
    public static final String SPU_QUEUE_SEARCH_SAVE="spu_queue_es_save";
    public static final String SPU_QUEUE_SEARCH_UPDATE="spu_queue_es_update";
    public static final String SPU_QUEUE_SEARCH_DELETE="spu_queue_es_delete";

    //spu-page的队列
    public static final String SPU_QUEUE_PAGE_SAVE="spu_queue_page_save";
    public static final String SPU_QUEUE_PAGE_UPDATE="spu_queue_page_update";
    public static final String SPU_QUEUE_PAGE_DELETE="spu_queue_page_delete";
    public static final String ALTERNATE_EXCHANGE = "exchange.ae";
    public static final String EXCHANGE = "exchange.mr";

    //Dead Letter Exchanges
    public static final String EXCHANGE_DLX = "exchange.dlx";
    public static final String EXCHANGE_DLRK = "dlx.rk";
    public static final Integer MESSAGE_TIME_OUT = 5000;
    public static final String QUEUE = "queue.mr";
    public static final String QUEUE_AE = "queue.ae";
    public static final String QUEUE_DLX = "queue.dlx";
    public static final String ROUTING_KEY = "mrkey";


}
```

#####  在com.baidu.shop下新建component包 在包下新建MrRabbitMQ

```
import com.baidu.shop.constant.MqMessageConstant;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.UUID;

@Component
@Slf4j
public class MrRabbitMQ implements RabbitTemplate.ConfirmCallback,
        RabbitTemplate.ReturnCallback {
    private RabbitTemplate rabbitTemplate;

    //构造方法注入
    @Autowired
    public MrRabbitMQ(RabbitTemplate rabbitTemplate) {
        this.rabbitTemplate = rabbitTemplate;
//这是是设置回调能收到发送到响应
        rabbitTemplate.setConfirmCallback(this);
//如果设置备份队列则不起作用
        rabbitTemplate.setMandatory(true);
        rabbitTemplate.setReturnCallback(this);
    }

    public void send(String sendMsg, String routingKey) {
        CorrelationData correlationId = new
                CorrelationData(UUID.randomUUID().toString());
//convertAndSend(exchange:交换机名称,routingKey:路由关键字,object:发送的消息
        内容, correlationData:消息ID)
        rabbitTemplate.convertAndSend(MqMessageConstant.EXCHANGE, routingKey,
                sendMsg, correlationId);
    }

    @Override
    public void confirm(CorrelationData correlationData, boolean b, String s) {
        if (b) {
            log.info("消息发送成
                    功:correlationData({}), ack({}), cause({}) ",correlationData,b,s);
        } else {
            log.error("消息发送失
                    败:correlationData({}), ack({}), cause({}) ",correlationData,b,s);
        }
    }

    @Override
    public void returnedMessage(Message message, int i, String s, String s1,
                                String s2) {
        log.warn("消息丢
                失:exchange({}), route({}), replyCode({}), replyText({}), message:
        {
        }
        ",s1,s2,i,s,message);
    }
}

```

##### GoodsServiceImpl

```
  @Transactional
    @Override
    public Result<JSONObject> saveGoods(SpuDTO spuDTO) {
		//新增spu
        SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO,
                SpuEntity.class);
        spuEntity.setSaleable(1);
        spuEntity.setValid(1);
        final Date date = new Date();//保持两个时间一致
        spuEntity.setCreateTime(date);
        spuEntity.setLastUpdateTime(date);
        spuMapper.insertSelective(spuEntity);
		//新增spuDetail
        SpuDetailEntity spuDetailEntity =
                BaiduBeanUtil.copyProperties(spuDTO.getSpuDetail(), SpuDetailEntity.class);
        spuDetailEntity.setSpuId(spuEntity.getId());
        spuDetailMapper.insertSelective(spuDetailEntity);
        this.saveSkusAndStocks(spuDTO.getSkus(), spuEntity.getId(), date);
        mrRabbitMQ.send(spuEntity.getId() + "",
                MqMessageConstant.SPU_ROUT_KEY_SAVE);
        return this.setResultSuccess();
    }
```

#### mingrui-shop-service-search

#####  application.yml

```
spring:
 rabbitmq:
   host: 127.0.0.1
   port: 5672
  username: guest
  password: guest
  # 是否确认回调
  publisher-confirm-type: correlated
  # 是否返回回调
  publisher-returns: true
  virtual-host: /
  # 手动确认
  listener:
    simple:
      acknowledge-mode: manual

```

#### ShopElasticsearchService

```
@ApiOperation(value = "新增数据到es")
@PostMapping(value = "es/saveData")
Result<JSONObject> saveData(Integer spuId);

@ApiOperation(value = "通过id删除es数据")
@DeleteMapping(value = "es/saveData")
Result<JSONObject> delData(Integer spuId);

```

##### ShopElasticsearchServiceImpl

```
@Override
public Result<JSONObject> saveData(Integer spuId) {
	SpuDTO spuDTO = new SpuDTO();
	spuDTO.setId(spuId);
	List<GoodsDoc> goodsDocs = this.esGoodsInfo(spuDTO);
	GoodsDoc goodsDoc = goodsDocs.get(0);
	elasticsearchRestTemplate.save(goodsDoc);
	
	return this.setResultSuccess();
}
```

```
@Override
public Result<JSONObject> delData(Integer spuId) {
	GoodsDoc goodsDoc = new GoodsDoc();
	goodsDoc.setId(spuId.longValue());
	elasticsearchRestTemplate.delete(goodsDoc);
	
	return this.setResultSuccess();
}

```

##### com.baidu.shop下新建包listener 包下新建GoodsListener

```
package com.baidu.shop.listener;

import com.baidu.shop.constant.MqMessageConstant;
import com.baidu.shop.service.ShopElasticsearchService;
import com.rabbitmq.client.Channel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.ExchangeTypes;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.Exchange;
import org.springframework.amqp.rabbit.annotation.Queue;
import org.springframework.amqp.rabbit.annotation.QueueBinding;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.io.IOException;

@Component
@Slf4j
public class GoodsListener {

    @Autowired
    private ShopElasticsearchService shopElasticsearchService;

    @RabbitListener(
            bindings = @QueueBinding(
                    value = @Queue(
                            value = MqMessageConstant.SPU_QUEUE_SEARCH_SAVE,
                            durable = "true"
                    ),
                    exchange = @Exchange(
                            value = MqMessageConstant.EXCHANGE,
                            ignoreDeclarationExceptions = "true",
                            type = ExchangeTypes.TOPIC
                    ),
                    key = {MqMessageConstant.SPU_ROUT_KEY_SAVE,MqMessageConstant.SPU_ROUT_KEY_UPDATE}
            )
    )
    public void save(Message message, Channel channel) throws IOException {

        log.info("es服务接受到需要保存数据的消息: " + new String(message.getBody()));
        shopElasticsearchService.saveData(Integer.valueOf(new String(message.getBody())));
        channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
    }

    @RabbitListener(
            bindings = @QueueBinding(
                    value = @Queue(
                            value = MqMessageConstant.SPU_QUEUE_SEARCH_DELETE,
                            durable = "true"
                    ),
                    exchange = @Exchange(
                            value = MqMessageConstant.EXCHANGE,
                            ignoreDeclarationExceptions = "true",
                            type = ExchangeTypes.TOPIC
                    ),
                    key = MqMessageConstant.SPU_ROUT_KEY_DELETE
            )
    )
    public void delete(Message message, Channel channel) throws IOException {

        log.info("es服务接受到需要删除数据的消息: " + new String(message.getBody()));
        shopElasticsearchService.delData(Integer.valueOf(new String(message.getBody())));

        channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
    }

}
```

####  mingrui-shop-service-template

##### application.yml

```
spring:
  rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest
  # 是否确认回调
  publisher-confirm-type: correlated
  # 是否返回回调
  publisher-returns: true
  virtual-host: /
  # 手动确认
  listener:
    simple:
      acknowledge-mode: manual

```

#### TemplateService

```
@DeleteMapping(value = "template/delHTMLBySpuId")
Result<JSONObject> delHTMLBySpuId(Integer spuId);
```

##### TemplateServiceImpl

```
@Override
public Result<JSONObject> delHTMLBySpuId(Integer spuId) {
    File file = new File(staticHTMLPath + File.separator + spuId + ".html");
	if(!file.delete()){
		return this.setResultError("文件删除失败");
	}
	return this.setResultSuccess();
}

```

#### com.baidu.shop包下新建listener包下新建TemplateListener

```
package com.baidu.shop.listener;

import com.baidu.shop.constant.MqMessageConstant;
import com.baidu.shop.service.TemplateService;
import com.rabbitmq.client.Channel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.ExchangeTypes;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.Exchange;
import org.springframework.amqp.rabbit.annotation.Queue;
import org.springframework.amqp.rabbit.annotation.QueueBinding;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.io.IOException;

@Component
@Slf4j
public class TemplateListener {
    @Autowired
    private TemplateService templateService;
    @RabbitListener(
            bindings = @QueueBinding(
                    value = @Queue(
                            value = MqMessageConstant.SPU_QUEUE_PAGE_SAVE,
                            durable = "true"
                    ),
                    exchange = @Exchange(
                            value = MqMessageConstant.EXCHANGE,
                            ignoreDeclarationExceptions = "true",
                            type = ExchangeTypes.TOPIC
                    ),
                    key =
                            {MqMessageConstant.SPU_ROUT_KEY_SAVE,MqMessageConstant.SPU_ROUT_KEY_UPDATE}
            )
    )
    public void save(Message message, Channel channel) throws IOException {

        log.info("template服务接受到需要保存数据的消息: " + new String(message.getBody()));
            //根据spuId生成页面
        templateService.createStaticHTMLTemplate(Integer.valueOf(new
                String(message.getBody())));
        channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
    }

    @RabbitListener(
            bindings = @QueueBinding(
                    value = @Queue(
                            value = MqMessageConstant.SPU_QUEUE_PAGE_DELETE,
                            durable = "true"
                    ),
                    exchange = @Exchange(
                            value = MqMessageConstant.EXCHANGE,
                            ignoreDeclarationExceptions = "true",
                            type = ExchangeTypes.TOPIC
                    ),
                    key = MqMessageConstant.SPU_ROUT_KEY_DELETE
            )
    )
    public void delete(Message message, Channel channel) throws IOException {
        log.info("template服务接受到需要删除数据的消息: " + new String(message.getBody()));
        //根据spuid删除页面
        templateService.deleteStaticHTMLTemplate(Integer.valueOf(new
                String(message.getBody())));
        channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
    }


}
```

### 第一次测试

#### 环境准备

依次启动eureka-server,xxx,search,template,upload,zuul,两个前端项目manage和portal

![image-20210311224706552](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311224706552.png)



<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311224721547.png" alt="image-20210311224721547" style="zoom:150%;" />

##### 测试流程

1. 浏览器访问manage.mrshop.com 
2. 将xxx,template,search项目的控制台先清空一下,方便查看日志 
3. 新增商品

![image-20210311225038628](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311225038628.png)

有很多问题  需要拆方法

```
 @Override
// @Transactional
 public Result<JsonObject> saveGoods(SpuDTO spuDTO) {

     Integer spuId = this.saveTransactional(spuDTO);

     mrRabbitMQ.send(spuId + "", MqMessageConstant.SPU_ROUT_KEY_SAVE);

     return this.setResultSuccess();
 }


 @Transactional
 public Integer saveTransactional(SpuDTO spuDTO){
   //  System.out.println(spuDTO);
     final Date date = new Date();
     //新增spu
     SpuEntity spuEntity = BaiduBeanUtil.copyProperties(spuDTO, SpuEntity.class);
     spuEntity.setSaleable(1);
     spuEntity.setValid(1);
     spuEntity.setCreateTime(date);
     spuEntity.setLastUpdateTime(date);
     spuMapper.insertSelective(spuEntity);

     //新增大字段
     SpuDetailDTO spuDetail = spuDTO.getSpuDetail();
     SpuDetailEntity spuDetailEntity = BaiduBeanUtil.copyProperties(spuDetail, SpuDetailEntity.class);
     spuDetailEntity.setSpuId(spuEntity.getId());
     spuDetailMapper.insertSelective(spuDetailEntity);

     //新增sku,sku可能时多条数据
     this.insertSkuAndStock(spuDTO,spuEntity.getId(),date);

     return spuEntity.getId();
 }
```

#####  测试删除

浏览器打开http://manage.mrshop.com/删除商品

![image-20210311225529325](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311225529325.png)

我们可以看到 静态文件竟然删除失败了!!!!!!!!!!!!,而且也没有报错,只是告诉我们失败了

```
@Override   // 删除html 文件
public Result<JSONObject> deleteStaticHTMLTemplate(Integer spuId) {

    File file = new File(htmlPath, spuId + ".html");
    if (file.exists()){ 
        file.delete();
    }
    return this.setResultSuccess();
}
```



### 网关现在存在的问题

##### zuul/application.yml

```
zuul:
  prefix: /api
  routes:
    xxx-server: /manage/**
    search-server: /search/**
    user-server: /user-center/**
```

##### 修改mrshop-manage-web项目src目录下config文件

![image-20210311225945470](C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311225945470.png)

line : 17 

```
  api: `${baseUrl}/api/manage`,
  theme:{
    primary: "#2196F3",
    secondary: "#455A64",
    accent: "#9c27b0",
    error: "#f44336",
    warning: "#FFC107",
    info: "#64B5F6",
    success: "#4caf50"
  },

```

修改search.html的查询方法url

<img src="C:\Users\hxs\AppData\Roaming\Typora\typora-user-images\image-20210311230107509.png" alt="image-20210311230107509" style="zoom:200%;" />



```
axios.defaults.baseURL = "http://api.mrshop.com/api";
axios.defaults.timeout = 5000;
axios.defaults.withCredentials = true

```

# 11-用户注册

## 项目搭建

###  service-api 

#### 1新建mingrui-shop-service-api-user 

#### 2新建包com.baidu.shop.entity 

#### 3包下新建UserEntity

```java
package com.baidu.shop.entity;

import lombok.Data;

import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

/**
 * 2 * @ClassName UserEntity
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
@Table(name="tb_user")
@Data
public class UserEntity {

    @Id
    private Integer id;

    private String username;

    private String password;

    private String phone;

    private Date created;

    private String salt;
}
```

#### 4 新建包com.baidu.shop.dto

#### 5 包下新建UserDTO



```java
package com.baidu.shop.dto;

import com.baidu.shop.validate.group.MingruiOperation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotNull;
import java.util.Date;

/**
 * 2 * @ClassName UserDTO
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
@Data
@ApiModel(value = "用户DTO")
public class UserDTO {
    @ApiModelProperty(value = "用户主键",example = "1")
    @NotNull(message = "主键不能为空", groups = {MingruiOperation.Update.class})
    private Integer id;

    @ApiModelProperty(value = "账户")
    @NotNull(message = "账户不能为空", groups = {MingruiOperation.Add.class})
    private String username;

    @ApiModelProperty(value = "密码")
    @NotNull(message = "密码不能为空", groups = {MingruiOperation.Add.class})
    private String password;

    @ApiModelProperty(value = "手机号")
    @NotNull(message = "手机号不能为空", groups = {MingruiOperation.Add.class})
    private String phone;

    private Date created;

    private String salt;

}
```

#### 6 新建包com.baidu.shop.config

#### 7 新建MrSwagger2Config

```java
package com.baidu.shop.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class MrSwagger2Config {
    @Bean
    public Docket createRestApi(){
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(this.apiInfo())
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.baidu"))
                .paths(PathSelectors.any())
                .build();
    }
    private ApiInfo apiInfo(){
        return new ApiInfoBuilder()
                //标题
                .title("明瑞SWAGGER2标题")
                //条款地址
                .termsOfServiceUrl("http://www.baidu.com")
                //联系方式-->有String参数的方法但是已经过时，所以不推荐使用
                .contact(new
                        Contact("jiahang","baidu.com","jia435262644@163.com"))
                //版本
                .version("v1.0")
                //项目描述
                .description("描述")
                //创建API基本信息
                .build();
    }

}
```

#### 8 新建包com.baidu.shop.service

#### 9 新建UserService

```java
package com.baidu.shop.service;

import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.Result;
import com.baidu.shop.dto.UserDTO;
import com.baidu.shop.entity.UserEntity;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;

/**
 * 2 * @ClassName UserService
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
@Api(tags = "用户接口")
public interface UserService {

    @ApiOperation(value = "用户注册")
    @PostMapping(value = "user/register")
    Result<JSONObject> register(@RequestBody UserDTO userDTO);

}
```



###  common-core

#### 1 utils包下新建BCryptUtil

```java
package com.baidu.shop.utils;

import java.io.UnsupportedEncodingException;
import java.security.SecureRandom;


/**
 * @ClassName BCryptUtil
 * @Description: TODO
 * @Author jiahang
 * @Date 2021/3/10
 * @Version V1.0
 **/
public class BCryptUtil {
    // BCrypt parameters
    private static final int GENSALT_DEFAULT_LOG2_ROUNDS = 10;
    private static final int BCRYPT_SALT_LEN = 16;

    // Blowfish parameters
    private static final int BLOWFISH_NUM_ROUNDS = 16;
    // Initial contents of key schedule
    private static final int P_orig[] = {
            0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
            0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
            0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
            0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
            0x9216d5d9, 0x8979fb1b
    };
    private static final int S_orig[] = {
            0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7,
            0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
            0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
            0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
            0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee,
            0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
            0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef,
            0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
            0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
            0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
            0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce,
            0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
            0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e,
            0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
            0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
            0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
            0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88,
            0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
            0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e,
            0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
            0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
            0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
            0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88,
            0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
            0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6,
            0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
            0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
            0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
            0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba,
            0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
            0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f,
            0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
            0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
            0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
            0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279,
            0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
            0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab,
            0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
            0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
            0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
            0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0,
            0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
            0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790,
            0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
            0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
            0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
            0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7,
            0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
            0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad,
            0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
            0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
            0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
            0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477,
            0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
            0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49,
            0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
            0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
            0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
            0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41,
            0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
            0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400,
            0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
            0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
            0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a,
            0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623,
            0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
            0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
            0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
            0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,
            0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
            0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e,
            0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
            0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
            0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
            0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,
            0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
            0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701,
            0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
            0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
            0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
            0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,
            0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
            0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e,
            0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
            0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
            0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
            0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,
            0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
            0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b,
            0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
            0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
            0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
            0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,
            0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
            0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4,
            0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
            0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
            0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
            0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,
            0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
            0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510,
            0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
            0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
            0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
            0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,
            0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
            0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8,
            0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
            0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
            0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
            0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,
            0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
            0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0,
            0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
            0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
            0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
            0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,
            0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
            0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00,
            0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
            0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
            0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
            0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,
            0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
            0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9,
            0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
            0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
            0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7,
            0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,
            0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
            0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
            0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
            0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45,
            0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
            0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,
            0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,
            0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
            0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
            0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42,
            0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
            0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,
            0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,
            0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
            0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
            0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33,
            0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
            0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,
            0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,
            0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
            0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
            0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b,
            0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
            0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,
            0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
            0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
            0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
            0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37,
            0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
            0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,
            0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
            0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
            0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
            0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d,
            0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
            0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,
            0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,
            0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
            0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
            0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d,
            0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
            0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,
            0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,
            0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
            0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
            0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2,
            0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
            0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,
            0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,
            0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
            0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
            0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52,
            0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
            0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,
            0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,
            0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
            0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
            0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24,
            0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
            0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,
            0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
            0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
            0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,
            0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b,
            0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,
            0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
            0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,
            0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8,
            0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
            0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304,
            0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
            0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
            0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,
            0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9,
            0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
            0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593,
            0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,
            0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
            0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
            0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b,
            0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
            0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c,
            0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,
            0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
            0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,
            0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb,
            0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
            0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991,
            0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
            0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
            0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
            0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae,
            0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
            0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5,
            0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,
            0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
            0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,
            0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84,
            0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
            0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8,
            0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
            0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
            0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
            0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38,
            0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
            0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c,
            0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,
            0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
            0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,
            0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964,
            0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
            0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8,
            0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,
            0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
            0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,
            0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02,
            0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
            0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614,
            0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,
            0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
            0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
            0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0,
            0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
            0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e,
            0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,
            0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
            0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
    };

    // bcrypt IV: "OrpheanBeholderScryDoubt". The C implementation calls
    // this "ciphertext", but it is really plaintext or an IV. We keep
    // the name to make code comparison easier.
    static private final int bf_crypt_ciphertext[] = {
            0x4f727068, 0x65616e42, 0x65686f6c,
            0x64657253, 0x63727944, 0x6f756274
    };

    // Table for Base64 encoding
    static private final char base64_code[] = {
            '.', '/', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
            'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
            'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5',
            '6', '7', '8', '9'
    };

    // Table for Base64 decoding
    static private final byte index_64[] = {
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0, 1, 54, 55,
            56, 57, 58, 59, 60, 61, 62, 63, -1, -1,
            -1, -1, -1, -1, -1, 2, 3, 4, 5, 6,
            7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
            -1, -1, -1, -1, -1, -1, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
            41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
            51, 52, 53, -1, -1, -1, -1, -1
    };

    // Expanded Blowfish key
    private int P[];
    private int S[];
    /**
     * Encode a byte array using bcrypt's slightly-modified base64
     * encoding scheme. Note that this is *not* compatible with
     * the standard MIME-base64 encoding.
     *
     * @param d the byte array to encode
     * @param len the number of bytes to encode
     * @return base64-encoded string
     * @exception IllegalArgumentException if the length is invalid
     */
    private static String encode_base64(byte d[], int len)
            throws IllegalArgumentException {
        int off = 0;
        StringBuffer rs = new StringBuffer();
        int c1, c2;
        if (len <= 0 || len > d.length) {
            throw new IllegalArgumentException("Invalid len");
        }
        while (off < len) {
            c1 = d[off++] & 0xff;
            rs.append(base64_code[(c1 >> 2) & 0x3f]);
            c1 = (c1 & 0x03) << 4;
            if (off >= len) {
                rs.append(base64_code[c1 & 0x3f]);
                break;
            }
            c2 = d[off++] & 0xff;
            c1 |= (c2 >> 4) & 0x0f;
            rs.append(base64_code[c1 & 0x3f]);
            c1 = (c2 & 0x0f) << 2;
            if (off >= len) {
                rs.append(base64_code[c1 & 0x3f]);
                break;
            }
            c2 = d[off++] & 0xff;
            c1 |= (c2 >> 6) & 0x03;
            rs.append(base64_code[c1 & 0x3f]);
            rs.append(base64_code[c2 & 0x3f]);
        }
        return rs.toString();
    }
    /**
     * Look up the 3 bits base64-encoded by the specified character,
     * range-checking againt conversion table
     * @param x the base64-encoded value
     * @return the decoded value of x
     */
    private static byte char64(char x) {
        if ((int)x < 0 || (int)x > index_64.length) {
            return -1;
        }
        return index_64[(int)x];
    }
    /**
     * Decode a string encoded using bcrypt's base64 scheme to a
     * byte array. Note that this is *not* compatible with
     * the standard MIME-base64 encoding.
     * @param s the string to decode
     * @param maxolen the maximum number of bytes to decode
     * @return an array containing the decoded bytes
     * @throws IllegalArgumentException if maxolen is invalid
     */
    private static byte[] decode_base64(String s, int maxolen)
            throws IllegalArgumentException {
        StringBuffer rs = new StringBuffer();
        int off = 0, slen = s.length(), olen = 0;
        byte ret[];
        byte c1, c2, c3, c4, o;
        if (maxolen <= 0) {
            throw new IllegalArgumentException("Invalid maxolen");
        }
        while (off < slen - 1 && olen < maxolen) {
            c1 = char64(s.charAt(off++));
            c2 = char64(s.charAt(off++));
            if (c1 == -1 || c2 == -1) {
                break;
            }
            o = (byte)(c1 << 2);
            o |= (c2 & 0x30) >> 4;
            rs.append((char)o);
            if (++olen >= maxolen || off >= slen) {
                break;
            }
            c3 = char64(s.charAt(off++));
            if (c3 == -1) {
                break;
            }
            o = (byte)((c2 & 0x0f) << 4);
            o |= (c3 & 0x3c) >> 2;
            rs.append((char)o);
            if (++olen >= maxolen || off >= slen) {
                break;
            }
            c4 = char64(s.charAt(off++));
            o = (byte)((c3 & 0x03) << 6);
            o |= c4;
            rs.append((char)o);
            ++olen;
        }
        ret = new byte[olen];
        for (off = 0; off < olen; off++) {
            ret[off] = (byte) rs.charAt(off);
        }
        return ret;
    }
    /**
     * Blowfish encipher a single 64-bit block encoded as
     * two 32-bit halves
     * @param lr an array containing the two 32-bit half blocks
     * @param off the position in the array of the blocks
     */
    private final void encipher(int lr[], int off) {
        int i, n, l = lr[off], r = lr[off + 1];
        l ^= P[0];
        for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {
            // Feistel substitution on left word
            n = S[(l >> 24) & 0xff];
            n += S[0x100 | ((l >> 16) & 0xff)];
            n ^= S[0x200 | ((l >> 8) & 0xff)];
            n += S[0x300 | (l & 0xff)];
            r ^= n ^ P[++i];
            // Feistel substitution on right word
            n = S[(r >> 24) & 0xff];
            n += S[0x100 | ((r >> 16) & 0xff)];
            n ^= S[0x200 | ((r >> 8) & 0xff)];
            n += S[0x300 | (r & 0xff)];
            l ^= n ^ P[++i];
        }
        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
        lr[off + 1] = l;
    }
    /**
     * Cycically extract a word of key material
     * @param data the string to extract the data from
     * @param offp a "pointer" (as a one-entry array) to the
     * current offset into data
     * @return the next word of material from data
     */
    private static int streamtoword(byte data[], int offp[]) {
        int i;
        int word = 0;
        int off = offp[0];
        for (i = 0; i < 4; i++) {
            word = (word << 8) | (data[off] & 0xff);
            off = (off + 1) % data.length;
        }
        offp[0] = off;
        return word;
    }
    /**
     * Initialise the Blowfish key schedule
     */
    private void init_key() {
        P = (int[])P_orig.clone();
        S = (int[])S_orig.clone();
    }
    /**
     * Key the Blowfish cipher
     * @param key an array containing the key
     */
    private void key(byte key[]) {
        int i;
        int koffp[] = { 0 };
        int lr[] = { 0, 0 };
        int plen = P.length, slen = S.length;
        for (i = 0; i < plen; i++) {
            P[i] = P[i] ^ streamtoword(key, koffp);
        }
        for (i = 0; i < plen; i += 2) {
            encipher(lr, 0);
            P[i] = lr[0];
            P[i + 1] = lr[1];
        }
        for (i = 0; i < slen; i += 2) {
            encipher(lr, 0);
            S[i] = lr[0];
            S[i + 1] = lr[1];
        }
    }
    /**
     * Perform the "enhanced key schedule" step described by
     * Provos and Mazieres in "A Future-Adaptable Password Scheme"
     * http://www.openbsd.org/papers/bcrypt-paper.ps
     * @param data salt information
     * @param key password information
     */
    private void ekskey(byte data[], byte key[]) {
        int i;
        int koffp[] = { 0 }, doffp[] = { 0 };
        int lr[] = { 0, 0 };
        int plen = P.length, slen = S.length;
        for (i = 0; i < plen; i++) {
            P[i] = P[i] ^ streamtoword(key, koffp);
        }
        for (i = 0; i < plen; i += 2) {
            lr[0] ^= streamtoword(data, doffp);
            lr[1] ^= streamtoword(data, doffp);
            encipher(lr, 0);
            P[i] = lr[0];
            P[i + 1] = lr[1];
        }
        for (i = 0; i < slen; i += 2) {
            lr[0] ^= streamtoword(data, doffp);
            lr[1] ^= streamtoword(data, doffp);
            encipher(lr, 0);
            S[i] = lr[0];
            S[i + 1] = lr[1];
        }
    }
    /**
     * Perform the central password hashing step in the
     * bcrypt scheme
     * @param password the password to hash
     * @param salt the binary salt to hash with the password
     * @param log_rounds the binary logarithm of the number
     * of rounds of hashing to apply
     * @param cdata the plaintext to encrypt
     * @return an array containing the binary hashed password
     */
    public byte[] crypt_raw(byte password[], byte salt[], int log_rounds,
                            int cdata[]) {
        int rounds, i, j;
        int clen = cdata.length;
        byte ret[];
        if (log_rounds < 4 || log_rounds > 30) {
            throw new IllegalArgumentException("Bad number of rounds");
        }
        rounds = 1 << log_rounds;
        if (salt.length != BCRYPT_SALT_LEN) {
            throw new IllegalArgumentException("Bad salt length");
        }
        init_key();
        ekskey(salt, password);
        for (i = 0; i != rounds; i++) {
            key(password);
            key(salt);
        }
        for (i = 0; i < 64; i++) {
            for (j = 0; j < (clen >> 1); j++) {
                encipher(cdata, j << 1);
            }
        }
        ret = new byte[clen * 4];
        for (i = 0, j = 0; i < clen; i++) {
            ret[j++] = (byte)((cdata[i] >> 24) & 0xff);
            ret[j++] = (byte)((cdata[i] >> 16) & 0xff);
            ret[j++] = (byte)((cdata[i] >> 8) & 0xff);
            ret[j++] = (byte)(cdata[i] & 0xff);
        }
        return ret;
    }
    /**
     * Hash a password using the OpenBSD bcrypt scheme
     * @param password the password to hash
     * @param salt the salt to hash with (perhaps generated
     * using BCrypt.gensalt)
     * @return the hashed password
     * salt盐
     */
    public static String hashpw(String password, String salt) {
        BCryptUtil B;
        String real_salt;
        byte passwordb[], saltb[], hashed[];
        char minor = (char)0;
        int rounds, off = 0;
        StringBuffer rs = new StringBuffer();
        if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {
            throw new IllegalArgumentException("Invalid salt version");
        }
        if (salt.charAt(2) == '$') {
            off = 3;
        } else {
            minor = salt.charAt(2);
            if (minor != 'a' || salt.charAt(3) != '$') {
                throw new IllegalArgumentException("Invalid salt revision");
            }
            off = 4;
        }
// Extract number of rounds
        if (salt.charAt(off + 2) > '$') {
            throw new IllegalArgumentException("Missing salt rounds");
        }
        rounds = Integer.parseInt(salt.substring(off, off + 2));
        real_salt = salt.substring(off + 3, off + 25);
        try {
            passwordb = (password + (minor >= 'a' ? "\000" : "")).getBytes("UTF8");
        } catch (UnsupportedEncodingException uee) {
            throw new AssertionError("UTF-8 is not supported");
        }
        saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);
        B = new BCryptUtil();
        hashed = B.crypt_raw(passwordb, saltb, rounds,
                (int[])bf_crypt_ciphertext.clone());
        rs.append("$2");
        if (minor >= 'a') {
            rs.append(minor);
        }
        rs.append("$");
        if (rounds < 10) {
            rs.append("0");
        }
        if (rounds > 30) {
            throw new IllegalArgumentException(
                    "rounds exceeds maximum (30)");
        }
        rs.append(Integer.toString(rounds));
        rs.append("$");
        rs.append(encode_base64(saltb, saltb.length));
        rs.append(encode_base64(hashed,
                bf_crypt_ciphertext.length * 4 - 1));
        return rs.toString();
    }
    /**
     * Generate a salt for use with the BCrypt.hashpw() method
     * @param log_rounds the log2 of the number of rounds of
     * hashing to apply - the work factor therefore increases as
     * 2**log_rounds.
     * @param random an instance of SecureRandom to use
     * @return an encoded salt value
     */
    public static String gensalt(int log_rounds, SecureRandom random) {
        StringBuffer rs = new StringBuffer();
        byte rnd[] = new byte[BCRYPT_SALT_LEN];
        random.nextBytes(rnd);
        rs.append("$2a$");
        if (log_rounds < 10) {
            rs.append("0");
        }
        if (log_rounds > 30) {
            throw new IllegalArgumentException(
                    "log_rounds exceeds maximum (30)");
        }
        rs.append(Integer.toString(log_rounds));
        rs.append("$");
        rs.append(encode_base64(rnd, rnd.length));
        return rs.toString();
    }
    /**
     * Generate a salt for use with the BCrypt.hashpw() method
     * @param log_rounds the log2 of the number of rounds of
     * hashing to apply - the work factor therefore increases as
     * 2**log_rounds.
     * @return an encoded salt value
     */
    public static String gensalt(int log_rounds) {
        return gensalt(log_rounds, new SecureRandom());
    }
    /**
     * Generate a salt for use with the BCrypt.hashpw() method,
     * selecting a reasonable default for the number of hashing
     * rounds to apply
     * @return an encoded salt value
     */
    public static String gensalt() {
        return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);
    }
    /**
     * Check that a plaintext password matches a previously hashed
     * one
     * @param plaintext the plaintext password to verify
     * @param hashed the previously-hashed password
     * @return true if the passwords match, false otherwise
     */
    public static boolean checkpw(String plaintext, String hashed) {
        byte hashed_bytes[];
        byte try_bytes[];
        try {
            String try_pw = hashpw(plaintext, hashed);
            hashed_bytes = hashed.getBytes("UTF-8");
            try_bytes = try_pw.getBytes("UTF-8");
        } catch (UnsupportedEncodingException uee) {
            return false;
        }
        if (hashed_bytes.length != try_bytes.length) {
            return false;
        }
        byte ret = 0;
        for (int i = 0; i < try_bytes.length; i++) {
            ret |= hashed_bytes[i] ^ try_bytes[i];
        }
        return ret == 0;
    }
    public static void main(String[] args) {
        String password = "123456";
        String mingruijiaoyu = hashpw(password, gensalt());//加密
        System.out.println(mingruijiaoyu);
//            String pwd = "$2a$10$nA2g16Zq1xS.CinETDlKfuxqLbZWMgIVSCGsE7G2G27PicxqoKsL.";
//            boolean checkpw = checkpw("1234556", pwd);//明文密码和密文密码比较
//            System.out.println(checkpw);
    }
}
```

#### 2 或者用MD5Util，BCryptUtil二选一

```java
package com.baidu.shop.utils;

import java.security.MessageDigest;

/**
 * 2 * @ClassName MD5Util
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/11
 * 6 * @Version V1.0
 * 7
 **/
/*
MD5的作用
   ①一致性检验
   ②数字签名。只是把md5看成了一个指纹，按了个手印说明独一无二了。
   ③安全访问认证
   在用户注册时，会将密码进行md5加密，存到数据库中。这样可以防止那些可以看到数据库数据的人，恶意操作了。

md5不能破解吗？
   md5是不可逆的，也就是没有对应的算法，从生产的md5值逆向得到原始数据。
   但是如果使用暴力破解，那就另说了。

*/
public class MD5Util {
    public final static String md5(String s) {
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            byte[] strTemp = s.getBytes();
            // 使用MD5创建MessageDigest对象
            MessageDigest mdTemp = MessageDigest.getInstance("MD5");
            mdTemp.update(strTemp);
            byte[] md = mdTemp.digest();
            int j = md.length;
            char str[] = new char[j * 2];
            int k = 0;
            for (int i = 0; i < j; i++) {
                byte b = md[i];
                // 将没个数(int)b进行双字节加密
                str[k++] = hexDigits[b >> 4 & 0xf];
                str[k++] = hexDigits[b & 0xf];
            }
            return new String(str);
        } catch (Exception e) {
            return null;
        }
    }
}
```

###  service

#### 1 新建mingrui-shop-service-user项目

#### 2 pom.xml

```java
<dependencies>
    <dependency>
        <groupId>com.baidu</groupId>
        <artifactId>mingrui-shop-service-api-user</artifactId>
        <version>1.0-SNAPSHOT</version>
    </dependency>
</dependencies>
```

#### 3 application.yml

```yml
server:
  port: 8500
spring:
  # 整合redis配置
  redis:
    # 数据库标识，可以配置多个redis使用不同的标识区分
    database: 0
    # redisIP地址
    host: 120.53.222.92
    # redis端口号
    port: 6379
    # redis密码
    password: 123456
    # redis连接池的配置
    jedis:
      pool:
        #最大连接数据库连接数,设 0 为没有限制
        max-active: 8
        #最大等待连接中的数量,设 0 为没有限制
        max-idle: 8
        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        max-wait: -1ms
        #最小等待连接中的数量,设 0 为没有限制
        min-idle: 0
  application:
    name: user-server
  datasource:
    # 数据源名称，任意
    name: mysql
    url: jdbc:mysql://localhost:3306/2005?useSSL=true&nullNamePatternMatchesAll=true&serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf8
    # 数据库连接用户
    username: root
    # 数据库连接密码
    password: root
    # 驱动名称
    driver-class-name: com.mysql.jdbc.Driver
    # boot2.0+使用hikari作为默认数据库连接池
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      # 是否自动提交事务 默认
      auto-commit: true
      # 允许的最小连接数
      minimum-idle: 5
      # 连接池内最大连接数
      maximum-pool-size: 10
      # 验证连接的sql语句
      connection-test-query: SELECT 1 FROM DUAL
      # 连接超时时间 默认30000 毫秒 如果小于250毫秒，则被重置回30秒
      connection-timeout: 30000
      # 验证超时时间默认5000毫秒 如果小于250毫秒，则会被重置回5秒
      validation-timeout: 5000
      # 设置连接在连接池中的存活时间 如果不等于0且小于30秒则会被重置回30分钟
      max-lifetime: 1800000
  # 通用mapper
mapper:
  mappers: tk.mybatis.mapper.common.Mapper
  identity: MYSQL
#日志设置
logging:
  level:
    # 打印与我们程序相关的日志信息
    com.baidu.shop: debug
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
```

#### 4 新建包com.baidu

#### 5 新建启动类RunUserServerApplication

```java
package com.baidu;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import tk.mybatis.spring.annotation.MapperScan;

/**
 * 2 * @ClassName RunUserServerApplication
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
@SpringBootApplication
@EnableEurekaClient
@MapperScan(value = "com.baidu.shop.mapper")
public class RunUserServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(RunUserServerApplication.class);
    }
}
```



#### 6 新建包com.baidu.shop.mapper

#### 7 包下新建UserMapper

```java
package com.baidu.shop.mapper;

import com.baidu.shop.entity.UserEntity;
import tk.mybatis.mapper.common.Mapper;

/**
 * 2 * @ClassName UserMapper
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
public interface UserMapper extends Mapper<UserEntity> {
}
```

#### 8 新建包com.baidu.shop.service.impl

#### 9 包下新建UserServiceImpl

```java
package com.baidu.shop.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.constant.MrConstant;
import com.baidu.shop.dto.UserDTO;
import com.baidu.shop.entity.UserEntity;
import com.baidu.shop.mapper.UserMapper;
import com.baidu.shop.redis.repository.RedisRepository;
import com.baidu.shop.service.UserService;
import com.baidu.shop.utils.BCryptUtil;
import com.baidu.shop.utils.BaiduBeanUtil;
import com.baidu.shop.utils.LuosimaoDuanxinUtil;
import com.baidu.shop.utils.MD5Util;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

/**
 * 2 * @ClassName UserServiceImpl
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/10
 * 6 * @Version V1.0
 * 7
 **/
@RestController
public class UserServiceImpl extends BaseApiService implements UserService {

    @Resource
    private UserMapper userMapper;

    @Override
    public Result<JSONObject> register(UserDTO userDTO) {
        UserEntity userEntity = BaiduBeanUtil.copyProperties(userDTO, UserEntity.class);
        //userEntity.setPassword(BCryptUtil.hashpw(userEntity.getPassword(),BCryptUtil.gensalt()));
        userEntity.setPassword(MD5Util.md5(MD5Util.md5(userEntity.getPassword()) + "加盐加密专用字符串"));
        userEntity.setCreated(new Date());
        userMapper.insertSelective(userEntity);
        return this.setResultSuccess();
    }

    
}
```



#### 10 数据库表的密码长度给的不够

##### 在tb_user中：

##### 			password字段的长度改成255

##### 			salt字段改为可以是null

### zuul

#### 1 application.yml

```yml
zuul:
  prefix: /api
  routes:
    xxx-server: /manage/**
    search-server: /search/**
    user-server: /user-center/**
  # 声明路由
#  routes:
#    # 路由名称
#    api-xxx:
#      # 声明将所有以/api-ribbon/的请求都转发到eureka-ribbon的服务中
#      path: /api-xxx/**
#      serviceId: xxx-server
#    api-search:
#      path: /api-search/**
#      serviceId: search-server
  # 启用重试
  retryable: true
  # 包含此路径的不进行路由
  ignored-patterns: /upload/**
  # 忽略上传服务
  ignored-services:
    -upload-server
```



## 注册功能实现



### 校验用户名/手机号唯一



#### 1 UserService

```java
@ApiOperation(value = "校验用户名或手机号唯一")
@GetMapping(value = "user/check/{value}/{type}")
Result<List<UserEntity>> checkUserNameOrPhone(@PathVariable(value = "value") String value,@PathVariable(value = "type") Integer type);
```

#### 2 UserServiceImpl

```java
@Override
public Result<List<UserEntity>> checkUserNameOrPhone(String value, Integer type) {

    Example example = new Example(UserEntity.class);
    Example.Criteria criteria = example.createCriteria();

    criteria.andEqualTo(type==1 ? "username":"phone",value);

    List<UserEntity> userEntities = userMapper.selectByExample(example);

    return this.setResultSuccess(userEntities);
}
```

#### 3 register

```javascript
created() {
            this.$validator.extend('useful', {
                getMessage(field, args, data) {
                    return args[0] === '1' ? '用户名' + data : '手机' + data;
                },
                validate(value, args) {
                    return new Promise(resolve => {
                        mrshop.http.get("/user-center/user/check/" + value + "/" + args[0])
                            .then(resp => {
                                console.log(resp.data.data.length);
                                resolve({
                                    valid: !(resp.data.data.length > 0),
                                    data: "已存在!"
                                })
                            })
                    });
                }
            }),
}
```

###  

### 给手机发送验证码



#### 1 螺丝帽 文档：项目接入短信平台（螺丝帽）.note 链接：http://note.youdao.com/noteshare?id=423762507f2d04dd10c936498bb678e0&sub=9E5C9 B6C0C6543428DE728EBA964E6CC 

#### 2 将本地jar包安装到本地仓库

```
mvn install:install-file -Dfile=jersey-bundle-1.19.jar -DgroupId=com.mrshop.luosimao -DartifactId=jersey-bundle -Dversion=1.0.0 -Dpackaging=jar

mvn install:install-file -Dfile=json-org.jar -DgroupId=com.mrshop.luosimao -DartifactId=json-org -Dversion=1.0.0 -Dpackaging=jar
```

这么做不对,应该将jar包上传到maven私服

### 3 common-core

##### 3.1 pom.xml

```xml
<dependency>
    <groupId>com.mrshop.luosimao</groupId>
    <artifactId>jersey-bundle</artifactId>
    <version>1.0.0</version>
</dependency>
<dependency>
    <groupId>com.mrshop.luosimao</groupId>
    <artifactId>json-org</artifactId>
    <version>1.0.0</version>
</dependency>
```

##### 3.2 utils包下新建LuosimaoDuanxinUtil

```java
package com.baidu.shop.utils;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
import com.sun.jersey.core.util.MultivaluedMapImpl;
import lombok.extern.slf4j.Slf4j;
import javax.ws.rs.core.MediaType;

/**
 * 2 * @ClassName LuosimaoDuanxinUtil
 * 3 * @Description: TODO
 * 4 * @Author jiahang
 * 5 * @Date 2021/3/11
 * 6 * @Version V1.0
 * 7
 **/
@Slf4j
public class LuosimaoDuanxinUtil {
    //短信平台的APIkey
    private static final String DUANXIN_API_KEY = "key-825c533cb47e191021f44f747cdcb3a3";//需要使用自己的APIkey
    private static final String SPEAK_API_KEY = "key-715c44bf9f5de8626a7886968d838c21";//需要使用自己的APIkey
    private static final String SEND_DUANXIN_URL = "http://sms-api.luosimao.com/v1/send.json";//发送短信的接口
    private static final String SEND_SPEAK_URL = "http://voice-api.luosimao.com/v1/verify.json";//发送语音的接口
    private static final String STATUS_URL = "http://sms-api.luosimao.com/v1/status.json";//查看余额的接口

    public static String SendCode(String phone,String code){

        // just replace key here
        Client client = Client.create();
        client.addFilter(new HTTPBasicAuthFilter(
                "api",DUANXIN_API_KEY));
        WebResource webResource = client.resource(SEND_DUANXIN_URL);
        MultivaluedMapImpl formData = new MultivaluedMapImpl();
        formData.add("mobile", phone);
        formData.add("message", "验证码：" + code + "【铁壳测试】");//注意此处不能修改
        ClientResponse response =  webResource.type(MediaType.APPLICATION_FORM_URLENCODED).
                post(ClientResponse.class, formData);
        String textEntity = response.getEntity(String.class);
        int status = response.getStatus();
        log.info(textEntity);
        log.info("---------发送短信验证状态------" + status);
        return textEntity;
    }

    public static String sendSpeak(String phone,String code){
        // just replace key here
        Client client = Client.create();
        client.addFilter(new HTTPBasicAuthFilter(
                "api",SPEAK_API_KEY));
        WebResource webResource = client.resource(
                SEND_SPEAK_URL);
        MultivaluedMapImpl formData = new MultivaluedMapImpl();
        formData.add("mobile", phone);
        formData.add("code", code);
        ClientResponse response =  webResource.type(MediaType.APPLICATION_FORM_URLENCODED).
                post(ClientResponse.class, formData);
        String textEntity = response.getEntity(String.class);
        int status = response.getStatus();
        log.info(textEntity);
        log.info("---------发送语音验证状态------" + status);

        return textEntity;
    }

    private static String getStatus(){
        Client client = Client.create();
        client.addFilter(new HTTPBasicAuthFilter(
                "api",DUANXIN_API_KEY));
        WebResource webResource = client.resource( STATUS_URL );
        MultivaluedMapImpl formData = new MultivaluedMapImpl();
        ClientResponse response =  webResource.get( ClientResponse.class );
        String textEntity = response.getEntity(String.class);
        int status = response.getStatus();

        log.info(textEntity);
        log.info(status + "");
        return textEntity;
    }
}
```

##### register.html

```javascript
methods: {
            createVerifyCode() {// 生成短信验证码
                if(this.sended){//当前是已经发送验证码的状态的话，就不能再发短信了，如果为true就是发过了
                    return ;
                }
                this.$validator.validate("phone").then(r => {
                    if (r) {
                        mrshop.http.post("/user-center/user/sendValidCode", {
                            phone:this.user.phone
                        }).then(resp =>{
                            if(resp.data.code == 200){
                                //成功发送验证码，设置已经发送过验证码
                                this.sended=true;
                                //有效时间为60秒
                                let time =60;
                                //js定时执行任务
                                const timer =window.setInterval(() =>{
                                    time--;//执行一次减一秒
                                    this.sendMsg='验证码已发送,请'+ time +'秒后重试';
                                    if(time == 1){
                                        window.clearInterval(timer);
                                        this.sended=false;//设置发送状态
                                        this.sendMsg='获取短信验证码';//修改按钮的值
                                    }
                                },1000);

                            }
                        }).catch(error => console.log(error));
                    }
                });

            },
```

##### 5 UserService

```java
@ApiOperation(value = "给手机号发送验证码")
@PostMapping(value = "user/sendValidCode")
Result<JSONObject> sendValidCode(@RequestBody UserDTO userDTO);
```

##### 6 UserServiceImpl

```java
@Override
public Result<JSONObject> sendValidCode(UserDTO userDTO) {
    //生成随机6位验证码
    String code = (int)((Math.random() * 9 + 1) * 100000) + "";
    //发送短信验证码
    LuosimaoDuanxinUtil.SendCode(userDTO.getPhone(),code);
    return this.setResultSuccess();
}
```

说明:短信验证码只有10条,不够我们测试

```java
//短信条数只有10条,不够我们测试.所以就不发送短信验证码了,直接在控制台打印就可以
log.debug("向手机号码:{} 发送验证码:{}",userDTO.getPhone(),code);
```

##### register.html   146行

```javascript
data: {
            user: {
                username: '',
                password: '',
                confirmPassword: '',
                phone: '',
                code: ''
            },
            check: {
                username: false
            },
            sended:false,//是不是已经发送了验证码
            sendMsg:'获取短信验证码'
        },
```

加入sended,sendMsg



83行

```javascript
			<span class="code-span" @click="createVerifyCode">
                               {{ sendMsg }}
            </span>
```



211行

```javascript
createVerifyCode() {// 生成短信验证码
                if(this.sended){//当前是已经发送验证码的状态的话，就不能再发短信了，如果为true就是发过了
                    return ;
                }
                this.$validator.validate("phone").then(r => {
                    if (r) {
                        mrshop.http.post("/user-center/user/sendValidCode", {
                            phone:this.user.phone
                        }).then(resp =>{
                            if(resp.data.code == 200){
                                //成功发送验证码，设置已经发送过验证码
                                this.sended=true;
                                //有效时间为60秒
                                let time =60;
                                //js定时执行任务
                                const timer =window.setInterval(() =>{
                                    time--;//执行一次减一秒
                                    this.sendMsg='验证码已发送,请'+ time +'秒后重试';
                                    if(time == 1){
                                        window.clearInterval(timer);
                                        this.sended=false;//设置发送状态
                                        this.sendMsg='获取短信验证码';//修改按钮的值
                                    }
                                },1000);

                            }
                        }).catch(error => console.log(error));
                    }
                });

            },
```



##  校验手机验证码

###  redis安装



### 项目整合redis

#### 1api-user

##### 1 pom.xml

```xml
<dependencies>
    <!--springboot整合redis-->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    <!--redis需要的对象池 redis可以将存储对象-->
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-pool2</artifactId>
        <version>2.8.0</version>
    </dependency>
</dependencies>
```

##### 2 config包下新建RedisConfig

```java
package com.baidu.shop.config;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import java.nio.charset.Charset;
import java.time.Duration;
/**
 * @ClassName RedisConfig
 * @Description: TODO
 * @Author shenyaqi
 * @Date 2021/3/11
 * @Version V1.0
 **/

@Configuration
public class RedisConfig extends CachingConfigurerSupport{

    @Bean
    @Primary
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {

        RedisTemplate<String, Object> template = new RedisTemplate<>();

        RedisSerializer<String> redisSerializer = new StringRedisSerializer(Charset.forName("UTF8"));

        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        //om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);//方法已经过时,我印象当中这个方法是有漏洞的
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);
        jackson2JsonRedisSerializer.setObjectMapper(om);

        template.setConnectionFactory(factory);
        //key序列化方式
        template.setKeySerializer(redisSerializer);
        //value序列化
        template.setValueSerializer(jackson2JsonRedisSerializer);
        //value hashmap序列化
        template.setHashValueSerializer(jackson2JsonRedisSerializer);

        return template;
    }

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory factory) {
        RedisSerializer<String> redisSerializer = new StringRedisSerializer();
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);

        //解决查询缓存转换异常的问题
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        //om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);
        jackson2JsonRedisSerializer.setObjectMapper(om);

        // 配置序列化（解决乱码的问题）,过期时间30秒
        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofSeconds(30))
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))
                .disableCachingNullValues();

        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)
                .cacheDefaults(config)
                .build();
        return cacheManager;
    }
}
```

#### 3 service-user

##### application.yml

```yml
spring:
  # 整合redis配置
  redis:
    # 数据库标识，可以配置多个redis使用不同的标识区分
    database: 0
    # redisIP地址
    host: 120.53.222.92
    # redis端口号
    port: 6379
    # redis密码
    password: 123456
    # redis连接池的配置
    jedis:
      pool:
        #最大连接数据库连接数,设 0 为没有限制
        max-active: 8
        #最大等待连接中的数量,设 0 为没有限制
        max-idle: 8
        #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        max-wait: -1ms
        #最小等待连接中的数量,设 0 为没有限制
        min-idle: 0
```

##### com.baidu.shop包下新建redis.repository包

##### 包下新建RedisRepository

```java
package com.baidu.shop.redis.repository;

import com.baidu.shop.utils.JSONUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;


@Component
public class RedisRepository {

    //--注意：此处不能使用Resource注解，因为在RedisConfig line:30行中使用@Bean注解，方法的返回值是RedisTemplate @Resource默认按名称自动注入，会与我们定义的redisTemplate冲突
    @Autowired
    private StringRedisTemplate redisTemplate;

    /**
     * 获取序列化工具
     * @return
     */
    private RedisSerializer<String> getSerializer(){

        return redisTemplate.getStringSerializer();
    }

    /**
     * 放入string类型的值
     * @param key
     * @param value
     * @return
     */
    public boolean set(final String key, final String value) {
        return redisTemplate.execute(new RedisCallback<Boolean>() {

            @Override
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {

                return connection.set(getSerializer().serialize(key), getSerializer().serialize(value));
            }
        });
    }

    /**
     * 放入对象类型的值
     * @param key
     * @param obj
     * @return
     */
    public boolean setObj(final String key, final Object obj) {

        return redisTemplate.execute(new RedisCallback<Boolean>() {

            @Override
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {

                return connection.set(getSerializer().serialize(key), getSerializer().serialize(JSONUtil.toJsonString(obj)));
            }
        });
    }

    /**
     * 获取string类型的值
     * @param key
     * @return
     */
    public String get(final String key) {

        return redisTemplate.execute(new RedisCallback<String>() {
            @Override
            public String doInRedis(RedisConnection connection) throws DataAccessException {

                byte[] value = connection.get(getSerializer().serialize(key));

                return getSerializer().deserialize(value);
            }
        });
    }

    /**
     * 获取对象类型的值
     * @param key
     * @param clazz
     * @param <T>
     * @return
     */
    public <T> T getObj(final String key,Class<T> clazz) {

        String result = redisTemplate.execute(new RedisCallback<String>() {

            @Override
            public String doInRedis(RedisConnection connection) throws DataAccessException {

                byte[] value = connection.get(getSerializer().serialize(key));

                return getSerializer().deserialize(value);
            }
        });

        Object o = JSONUtil.toBean(result, clazz);

        if(clazz.isInstance(o)){

            return clazz.cast(o);
        }

        return null;
    }

    /**
     * 给key值设置过期时间
     * @param key
     * @param expire
     * @return
     */
    public boolean expire(final String key, long expire) {
        return redisTemplate.expire(key, expire, TimeUnit.SECONDS);
    }

    /**
     * 放入list类型的值
     * @param key
     * @param list
     * @param <T>
     * @return
     */
    public <T> boolean setList(String key, List<T> list) {

        return set(key, JSONUtil.toJsonString(list));
    }

    /**
     * 获取list类型的值
     * @param key
     * @param clz
     * @param <T>
     * @return
     */
    public <T> List<T> getList(String key, Class<T> clz) {

        String json = get(key);

        if (json != null) {

            List<T> list = JSONUtil.toList(json, clz);
            return list;
        }
        return null;
    }

    /**
     * 操作队列
     * @param key
     * @param obj
     * @return
     */
    public long rpush(final String key, Object obj) {
        final String value = JSONUtil.toJsonString(obj);
        long result = redisTemplate.execute(new RedisCallback<Long>() {
            @Override
            public Long doInRedis(RedisConnection connection) throws DataAccessException {

                long count = connection.rPush(getSerializer().serialize(key), getSerializer().serialize(value));
                return count;
            }
        });
        return result;
    }

    /**
     * 删除队列
     * @param key
     * @return
     */
    public String lpop(final String key) {
        String result = redisTemplate.execute(new RedisCallback<String>() {
            @Override
            public String doInRedis(RedisConnection connection) throws DataAccessException {

                byte[] res = connection.lPop(getSerializer().serialize(key));
                return getSerializer().deserialize(res);
            }
        });
        return result;
    }

    /**
     * 通过key值删除缓存数据
     * @param key
     * @return
     */
    public boolean del(String key) {
        // TODO Auto-generated method stub
        return redisTemplate.delete(key);
    }

    /**
     * 存入hash类型的值
     * @param key
     * @param mapKey
     * @param value
     * @return
     */
    public boolean setHash(final String key,final String mapKey, final String value) {

        return redisTemplate.execute(new RedisCallback<Boolean>() {
            @Override
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                // TODO Auto-generated method stub

                return connection.hSet(getSerializer().serialize(key), getSerializer().serialize(mapKey), getSerializer().serialize(value));
            }
        });
    }

    /**
     * 通过redis的key和hashkey删除value
     * @param key
     * @param mapKey
     * @return
     */
    public boolean delHash(final String key,final String mapKey) {

        return redisTemplate.execute(new RedisCallback<Boolean>() {
            @Override
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                // TODO Auto-generated method stub
                Long aLong = connection.hDel(getSerializer().serialize(key), getSerializer().serialize(mapKey));
                return aLong != 0;
            }
        });
    }

    /**
     * 通过rediskey删除hash
     * @param key
     * @return
     */
    public boolean delHash(final String key) {

        return redisTemplate.execute(new RedisCallback<Boolean>() {
            @Override
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                // TODO Auto-generated method stub
                Long aLong = connection.hDel(getSerializer().serialize(key));
                return aLong != 0;
            }
        });
    }


    /**
     * 根据redis的key和hask的key获取hash对应的值
     * @param key
     * @param mapKey
     * @param clazz
     * @param <T>
     * @return
     */
    public <T> T getHash(final String key,final String mapKey,Class<T> clazz) {

        String result = redisTemplate.execute(new RedisCallback<String>() {
            @Override
            public String doInRedis(RedisConnection connection) throws DataAccessException {

                byte[] bytes = connection.hGet(getSerializer().serialize(key), getSerializer().serialize(mapKey));

                return getSerializer().deserialize(bytes);
            }
        });

        Object o = JSONUtil.toBean(result, clazz);
        if(clazz.isInstance(o)){
            return clazz.cast(o);
        }
        return null;
    }

    /**
     * 根据redis 的key值获取hash的entry
     * @param key
     * @return
     */
    public Map<String, String> getHash(final String key) {

        Map<byte[], byte[]> result = (Map<byte[], byte[]>) redisTemplate.execute(new RedisCallback<Map<byte[], byte[]>>() {
            @Override
            public Map<byte[], byte[]> doInRedis(RedisConnection connection) throws DataAccessException {

                Map<byte[], byte[]> map = connection.hGetAll(getSerializer().serialize(key));
                return map;
            }
        });

        Map<String, String> map = new HashMap<String, String>();
        for (Map.Entry<byte[], byte[]> entry : result.entrySet()){

            map.put(getSerializer().deserialize(entry.getKey()),getSerializer().deserialize(entry.getValue()));
        }

        return map;
    }
}
```

#### api-user中

##### UserService

```java
@ApiOperation(value = "给手机号发送验证码")
@PostMapping(value = "user/sendValidCode")
Result<JSONObject> sendValidCode(@RequestBody UserDTO userDTO);
```



#### service中

##### UserServiceImpl

```java
@Override
public Result<JSONObject> sendValidCode(UserDTO userDTO) {

    //生成随机6位验证码
    String code=(int)((Math.random() * 9 + 1) * 100000) + "";

    //发送短信验证码
    //LuosimaoDuanxinUtil.SendCode(userDTO.getPhone(),code);
    //发送语音验证码
    //LuosimaoDuanxinUtil.sendSpeak(userDTO.getPhone(),code);
    log.debug("向手机号码:{} 发送验证码:{}",userDTO.getPhone(),code);
    redisRepository.set(MrConstant.REDIS_DUANXIN_CODE_PRE+userDTO.getPhone(),code);
    redisRepository.expire(MrConstant.REDIS_DUANXIN_CODE_PRE+userDTO.getPhone(),60);
    return this.setResultSuccess();
}
```



####  提供一个校验验证码的接口

```java
@ApiOperation(value = "校验用户名或手机号唯一")
@GetMapping(value = "user/check/{value}/{type}")
Result<List<UserEntity>> checkUserNameOrPhone(@PathVariable(value = "value") String value,@PathVariable(value = "type") Integer type);
```

##### impl

```java
@Override
public Result<JSONObject> checkCode(String phone, String code) {

    String redisValidCode = redisRepository.get(MrConstant.REDIS_DUANXIN_CODE_PRE + phone);
    if (code.equals(redisValidCode)){
        return this.setResultSuccess();
    }
    return this.setResultError("验证码输入错误");
}
```

##### html

```javascript
<input type="text" placeholder="短信验证码" class="input-xfat input-xlarge" style="width: 120px;"
                               v-model="user.code" name="code" v-validate="{required:true,validcode:user.phone}" data-vv-as="验证码">
                        <span class="code-span" @click="createVerifyCode">
                               {{ sendMsg }}
                        </span>
```

```javascript
this.$validator.extend('validcode',{
                getMessage(){
                    return "验证码输入错误";
                },
                validate(value,args) {
                    //验证验证码输入是否正确
                    return new Promise(resolve =>{
                        console.log(value);
                        console.log(args)
                        mrshop.http.get('user-center/user/checkCode',{
                            params: {
                                phone:args[0],
                                code:value
                            }
                        }).then(resp =>{
                            resolve({
                                valid: resp.data.code == 200
                            })
                        }).catch(error => console.log(error))
                    })
                }
            }),
```

新建的↑



99删除  target属性

```
<div class="controls btn-reg">
                        <a class="sui-btn btn-block btn-xlarge btn-danger" href="javascript:void(0)" 
                           @click.stop="submit"
                        >完成注册</a>
                    </div>
```



242

```
submit() {
                this.$validator.validateAll().then(d => {
                    if (d) {
                        // 校验通过，提交表单
                        mrshop.http.post("/user-center/user/register", this.user)
                            .then(resp => {
                                if (resp.data.code === 200) {
                                    // 注册成功
                                    alert("注册成功,即将跳转到登录页！");
                                    setTimeout(() => window.location = '/login.html', 2000);
                                }
                            })
                            .catch(() => alert("注册失败！"))
                    }
                })
            }
```

